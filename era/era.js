function create(ctor, props) {
    return Object.assign(new ctor(), props);
}
function assign(obj, props) {
    return Object.assign(obj, props);
}
var Core;
(function (Core) {
    var Object = (function () {
        function Object() {
        }
        Object.prototype.serialize = function () {
            return JSON.stringify(this);
        };
        Object.prototype.getClassName = function () {
            if ('name' in this.constructor)
                return this.constructor['name'];
            else
                return /function (.{1,})\(/.exec(this.constructor.toString())[1];
        };
        Object.prototype.assign = function (props) {
            return assign(this, props);
        };
        Object.prototype.toString = function () {
            return "[object " + this.getClassName() + "]";
        };
        return Object;
    }());
    Core.Object = Object;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var Events = (function () {
        function Events() {
            this.list = new Array();
        }
        Events.prototype.connect = function (handler, capture) {
            if (capture === void 0) { capture = false; }
            var id = ++Events.handlerGenerator;
            this.list.push({ handler: handler, capture: capture, id: id });
            return id;
        };
        Events.prototype.disconnect = function (handler) {
            for (var i = 0; i < this.list.length; i++) {
                if (this.list[i].handler === handler || this.list[i].id === handler) {
                    this.list.splice(i, 1);
                    break;
                }
            }
        };
        Events.prototype.fire = function (event) {
            for (var _i = 0, _a = this.list.slice(); _i < _a.length; _i++) {
                var handler = _a[_i];
                handler.handler(event);
            }
        };
        Events.handlerGenerator = 0;
        return Events;
    }());
    Core.Events = Events;
})(Core || (Core = {}));
var DEBUG = true;
var htmlNS = "http://www.w3.org/1999/xhtml";
var svgNS = "http://www.w3.org/2000/svg";
var Core;
(function (Core) {
    var Util = (function () {
        function Util() {
        }
        Util.clone = function (obj) {
            if (obj === undefined)
                return undefined;
            if (obj === null || typeof (obj) !== 'object')
                return null;
            var clone = {};
            for (var prop in obj)
                clone[prop] = obj[prop];
            return clone;
        };
        Util.encodeURIQuery = function (obj) {
            var args = '';
            var encodeArg = function (arg, value) {
                if ((typeof (value) !== 'number') && (typeof (value) !== 'string') && (typeof (value) !== 'boolean') && (typeof (value) !== 'object'))
                    return;
                if (args !== '')
                    args += '&';
                args += encodeURIComponent(arg) + '=';
                if (typeof (value) === 'object')
                    args += encodeURIComponent(JSON.stringify(value));
                else
                    args += encodeURIComponent(value);
            };
            if ((obj !== undefined) && (obj !== null)) {
                for (var prop in obj) {
                    var propValue = obj[prop];
                    if (propValue instanceof Array) {
                        for (var _i = 0, _a = propValue; _i < _a.length; _i++) {
                            var value = _a[_i];
                            encodeArg(prop, value);
                        }
                    }
                    else
                        encodeArg(prop, propValue);
                }
            }
            return args;
        };
        Util.utf8Encode = function (value) {
            var res = '';
            for (var i = 0; i < value.length; i++) {
                var c = value.charCodeAt(i);
                if (c < 128)
                    res += String.fromCharCode(c);
                else if ((c >= 128) && (c < 2048)) {
                    res += String.fromCharCode((c >> 6) | 192);
                    res += String.fromCharCode((c & 63) | 128);
                }
                else {
                    res += String.fromCharCode((c >> 12) | 224);
                    res += String.fromCharCode(((c >> 6) & 63) | 128);
                    res += String.fromCharCode((c & 63) | 128);
                }
            }
            return res;
        };
        Util.utf8Decode = function (value) {
            var res = '';
            var i = 0;
            var c;
            while (i < value.length) {
                c = value.charCodeAt(i++);
                if (c < 128)
                    res += String.fromCharCode(c);
                else if ((c >= 192) && (c < 224))
                    res += String.fromCharCode(((c & 31) << 6) | (value.charCodeAt(i++) & 63));
                else
                    res += String.fromCharCode(((c & 15) << 12) | ((value.charCodeAt(i++) & 63) << 6) | (value.charCodeAt(i++) & 63));
            }
            return res;
        };
        Util.toBase64 = function (stringValue) {
            var val1;
            var val2;
            var val3;
            var enc1;
            var enc2;
            var enc3;
            var enc4;
            var value = Util.utf8Encode(stringValue);
            var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var res = '';
            var i = 0;
            while (i + 2 < value.length) {
                val1 = value.charCodeAt(i++) & 0xff;
                val2 = value.charCodeAt(i++) & 0xff;
                val3 = value.charCodeAt(i++) & 0xff;
                enc1 = code.charAt(val1 >> 2);
                enc2 = code.charAt(((val1 & 3) << 4) | (val2 >> 4));
                enc3 = code.charAt(((val2 & 15) << 2) | (val3 >> 6));
                enc4 = code.charAt(val3 & 63);
                res += enc1 + enc2 + enc3 + enc4;
            }
            if (i + 1 < value.length) {
                val1 = value.charCodeAt(i++) & 0xff;
                val2 = value.charCodeAt(i++) & 0xff;
                enc1 = code.charAt(val1 >> 2);
                enc2 = code.charAt(((val1 & 3) << 4) | (val2 >> 4));
                enc3 = code.charAt((val2 & 15) << 2);
                res += enc1 + enc2 + enc3 + '=';
            }
            else if (i < value.length) {
                val1 = value.charCodeAt(i++) & 0xff;
                enc1 = code.charAt(val1 >> 2);
                enc2 = code.charAt((val1 & 3) << 4);
                res += enc1 + enc2 + '==';
            }
            return res;
        };
        Util.fromBase64 = function (value) {
            var char1;
            var char2;
            var char3;
            var enc1;
            var enc2;
            var enc3;
            var enc4;
            var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var res = '';
            var i = 0;
            while (i < value.length) {
                enc1 = code.indexOf(value.charAt(i++));
                enc2 = code.indexOf(value.charAt(i++));
                enc3 = code.indexOf(value.charAt(i++));
                enc4 = code.indexOf(value.charAt(i++));
                char1 = (enc1 << 2) | (enc2 >> 4);
                char2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                char3 = ((enc3 & 3) << 6) | enc4;
                res += String.fromCharCode(char1);
                if (enc3 !== 64) {
                    res += String.fromCharCode(char2);
                    if (enc4 !== 64)
                        res += String.fromCharCode(char3);
                }
            }
            return Util.utf8Decode(res);
        };
        Util.toNoDiacritics = function (value) {
            var defaultDiacriticsRemovalMap = [
                { 'base': 'A', 'letters': /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g },
                { 'base': 'AA', 'letters': /[\uA732]/g },
                { 'base': 'AE', 'letters': /[\u00C6\u01FC\u01E2]/g },
                { 'base': 'AO', 'letters': /[\uA734]/g },
                { 'base': 'AU', 'letters': /[\uA736]/g },
                { 'base': 'AV', 'letters': /[\uA738\uA73A]/g },
                { 'base': 'AY', 'letters': /[\uA73C]/g },
                { 'base': 'B', 'letters': /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g },
                { 'base': 'C', 'letters': /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g },
                { 'base': 'D', 'letters': /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g },
                { 'base': 'DZ', 'letters': /[\u01F1\u01C4]/g },
                { 'base': 'Dz', 'letters': /[\u01F2\u01C5]/g },
                { 'base': 'E', 'letters': /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g },
                { 'base': 'F', 'letters': /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g },
                { 'base': 'G', 'letters': /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g },
                { 'base': 'H', 'letters': /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g },
                { 'base': 'I', 'letters': /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g },
                { 'base': 'J', 'letters': /[\u004A\u24BF\uFF2A\u0134\u0248]/g },
                { 'base': 'K', 'letters': /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g },
                { 'base': 'L', 'letters': /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g },
                { 'base': 'LJ', 'letters': /[\u01C7]/g },
                { 'base': 'Lj', 'letters': /[\u01C8]/g },
                { 'base': 'M', 'letters': /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g },
                { 'base': 'N', 'letters': /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g },
                { 'base': 'NJ', 'letters': /[\u01CA]/g },
                { 'base': 'Nj', 'letters': /[\u01CB]/g },
                { 'base': 'O', 'letters': /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g },
                { 'base': 'OI', 'letters': /[\u01A2]/g },
                { 'base': 'OO', 'letters': /[\uA74E]/g },
                { 'base': 'OU', 'letters': /[\u0222]/g },
                { 'base': 'P', 'letters': /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g },
                { 'base': 'Q', 'letters': /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g },
                { 'base': 'R', 'letters': /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g },
                { 'base': 'S', 'letters': /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g },
                { 'base': 'T', 'letters': /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g },
                { 'base': 'TZ', 'letters': /[\uA728]/g },
                { 'base': 'U', 'letters': /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g },
                { 'base': 'V', 'letters': /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g },
                { 'base': 'VY', 'letters': /[\uA760]/g },
                { 'base': 'W', 'letters': /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g },
                { 'base': 'X', 'letters': /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g },
                { 'base': 'Y', 'letters': /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g },
                { 'base': 'Z', 'letters': /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g },
                { 'base': 'a', 'letters': /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g },
                { 'base': 'aa', 'letters': /[\uA733]/g },
                { 'base': 'ae', 'letters': /[\u00E6\u01FD\u01E3]/g },
                { 'base': 'ao', 'letters': /[\uA735]/g },
                { 'base': 'au', 'letters': /[\uA737]/g },
                { 'base': 'av', 'letters': /[\uA739\uA73B]/g },
                { 'base': 'ay', 'letters': /[\uA73D]/g },
                { 'base': 'b', 'letters': /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g },
                { 'base': 'c', 'letters': /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g },
                { 'base': 'd', 'letters': /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g },
                { 'base': 'dz', 'letters': /[\u01F3\u01C6]/g },
                { 'base': 'e', 'letters': /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g },
                { 'base': 'f', 'letters': /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g },
                { 'base': 'g', 'letters': /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g },
                { 'base': 'h', 'letters': /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g },
                { 'base': 'hv', 'letters': /[\u0195]/g },
                { 'base': 'i', 'letters': /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g },
                { 'base': 'j', 'letters': /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g },
                { 'base': 'k', 'letters': /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g },
                { 'base': 'l', 'letters': /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g },
                { 'base': 'lj', 'letters': /[\u01C9]/g },
                { 'base': 'm', 'letters': /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g },
                { 'base': 'n', 'letters': /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g },
                { 'base': 'nj', 'letters': /[\u01CC]/g },
                { 'base': 'o', 'letters': /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g },
                { 'base': 'oi', 'letters': /[\u01A3]/g },
                { 'base': 'ou', 'letters': /[\u0223]/g },
                { 'base': 'oo', 'letters': /[\uA74F]/g },
                { 'base': 'p', 'letters': /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g },
                { 'base': 'q', 'letters': /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g },
                { 'base': 'r', 'letters': /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g },
                { 'base': 's', 'letters': /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g },
                { 'base': 't', 'letters': /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g },
                { 'base': 'tz', 'letters': /[\uA729]/g },
                { 'base': 'u', 'letters': /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g },
                { 'base': 'v', 'letters': /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g },
                { 'base': 'vy', 'letters': /[\uA761]/g },
                { 'base': 'w', 'letters': /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g },
                { 'base': 'x', 'letters': /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g },
                { 'base': 'y', 'letters': /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g },
                { 'base': 'z', 'letters': /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g }
            ];
            var str = value;
            for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
                str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
            }
            return str;
        };
        return Util;
    }());
    Core.Util = Util;
    var Navigator = (function () {
        function Navigator() {
        }
        Navigator.isGecko = (navigator.userAgent.match(/Gecko\//i) !== null);
        Navigator.isWebkit = (navigator.userAgent.match(/WebKit\//i) !== null);
        Navigator.isIE = (navigator.userAgent.match(/MSIE/i) !== null) || (navigator.userAgent.match(/Trident/i) !== null);
        Navigator.isIE7 = (navigator.userAgent.match(/MSIE 7\./i) !== null);
        Navigator.isIE8 = (navigator.userAgent.match(/MSIE 8\./i) !== null);
        Navigator.isIE10 = (navigator.userAgent.match(/MSIE 10\./i) !== null);
        Navigator.isIE11 = Navigator.isIE && (navigator.userAgent.match(/rv:11\./i) !== null);
        Navigator.isOpera = ((navigator.userAgent === undefined) || (navigator.userAgent.match(/Opera\//i) !== null));
        Navigator.isChrome = (navigator.userAgent.match(/ Chrome\//) !== null);
        Navigator.isSafari = (navigator.userAgent.match(/ Safari\//) !== null);
        Navigator.isFirefox = (navigator.userAgent.match(/ Firefox\//) !== null);
        Navigator.isFirefox3 = (navigator.userAgent.match(/ Firefox\/3\./) !== null);
        Navigator.isFirefox3_5 = (navigator.userAgent.match(/ Firefox\/3\.5\./) !== null);
        Navigator.isFirefox3_6 = (navigator.userAgent.match(/ Firefox\/3\.6\./) !== null);
        Navigator.iPad = (navigator.userAgent.match(/iPad/i) !== null);
        Navigator.iPhone = (navigator.userAgent.match(/iPhone/i) !== null);
        Navigator.iOs = Navigator.iPad || Navigator.iPhone;
        Navigator.Android = (navigator.userAgent.match(/Android/i) !== null);
        Navigator.supportSVG = true;
        Navigator.supportCanvas = true;
        Navigator.supportRgba = true;
        Navigator.supportRgb = true;
        Navigator.supportOpacity = !Navigator.isIE7 && !Navigator.isIE8;
        Navigator.supportFormData = true;
        Navigator.supportFileAPI = true;
        Navigator.supportUploadDirectory = false;
        return Navigator;
    }());
    Core.Navigator = Navigator;
})(Core || (Core = {}));
(function () {
    var test;
    Core.Navigator.supportSVG = false;
    try {
        test = document.createElementNS(svgNS, 'g');
        if ('ownerSVGElement' in test)
            Core.Navigator.supportSVG = true;
    }
    catch (e) { }
    test = document.createElement('canvas');
    Core.Navigator.supportCanvas = 'getContext' in test;
    Core.Navigator.supportRgba = true;
    Core.Navigator.supportRgb = true;
    test = document.createElement('div');
    try {
        test.style.background = 'rgba(0, 0, 0, 0.5)';
    }
    catch (e) {
        Core.Navigator.supportRgba = false;
    }
    try {
        test.style.background = 'rgb(0, 0, 0)';
    }
    catch (e) {
        Core.Navigator.supportRgb = false;
    }
    try {
        new FormData();
    }
    catch (err) {
        Core.Navigator.supportFormData = false;
    }
    var testInput = document.createElement('input');
    Core.Navigator.supportFileAPI = 'files' in testInput;
    Core.Navigator.supportUploadDirectory = 'webkitdirectory' in testInput;
})();
if (Object.assign == undefined) {
    Object.assign = function () {
        var target = arguments[0];
        var i;
        var key;
        for (i = 1; i < arguments.length; i++) {
            for (key in arguments[i]) {
                target[key] = arguments[i][key];
            }
        }
        return target;
    };
}
(function () {
    'use strict';
    var promiseFinally = function (callback) {
        var constructor = this.constructor;
        return this.then(function (value) {
            return constructor.resolve(callback()).then(function () {
                return value;
            });
        }, function (reason) {
            return constructor.resolve(callback()).then(function () {
                return constructor.reject(reason);
            });
        });
    };
    var setTimeoutFunc = setTimeout;
    function noop() { }
    function bind(fn, thisArg) {
        return function () {
            fn.apply(thisArg, arguments);
        };
    }
    function Promise(fn) {
        if (!(this instanceof Promise))
            throw new TypeError('Promises must be constructed via new');
        if (typeof fn !== 'function')
            throw new TypeError('not a function');
        this._state = 0;
        this._handled = false;
        this._value = undefined;
        this._deferreds = [];
        doResolve(fn, this);
    }
    function handle(self, deferred) {
        while (self._state === 3) {
            self = self._value;
        }
        if (self._state === 0) {
            self._deferreds.push(deferred);
            return;
        }
        self._handled = true;
        Promise._immediateFn(function () {
            var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
            if (cb === null) {
                (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
                return;
            }
            var ret;
            try {
                ret = cb(self._value);
            }
            catch (e) {
                reject(deferred.promise, e);
                return;
            }
            resolve(deferred.promise, ret);
        });
    }
    function resolve(self, newValue) {
        try {
            if (newValue === self)
                throw new TypeError('A promise cannot be resolved with itself.');
            if (newValue &&
                (typeof newValue === 'object' || typeof newValue === 'function')) {
                var then = newValue.then;
                if (newValue instanceof Promise) {
                    self._state = 3;
                    self._value = newValue;
                    finale(self);
                    return;
                }
                else if (typeof then === 'function') {
                    doResolve(bind(then, newValue), self);
                    return;
                }
            }
            self._state = 1;
            self._value = newValue;
            finale(self);
        }
        catch (e) {
            reject(self, e);
        }
    }
    function reject(self, newValue) {
        self._state = 2;
        self._value = newValue;
        finale(self);
    }
    function finale(self) {
        if (self._state === 2 && self._deferreds.length === 0) {
            Promise._immediateFn(function () {
                if (!self._handled) {
                    Promise._unhandledRejectionFn(self._value);
                }
            });
        }
        for (var i = 0, len = self._deferreds.length; i < len; i++) {
            handle(self, self._deferreds[i]);
        }
        self._deferreds = null;
    }
    function Handler(onFulfilled, onRejected, promise) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.promise = promise;
    }
    function doResolve(fn, self) {
        var done = false;
        try {
            fn(function (value) {
                if (done)
                    return;
                done = true;
                resolve(self, value);
            }, function (reason) {
                if (done)
                    return;
                done = true;
                reject(self, reason);
            });
        }
        catch (ex) {
            if (done)
                return;
            done = true;
            reject(self, ex);
        }
    }
    Promise.prototype['catch'] = function (onRejected) {
        return this.then(null, onRejected);
    };
    Promise.prototype.then = function (onFulfilled, onRejected) {
        var prom = new this.constructor(noop);
        handle(this, new Handler(onFulfilled, onRejected, prom));
        return prom;
    };
    Promise.prototype['finally'] = promiseFinally;
    Promise.all = function (arr) {
        return new Promise(function (resolve, reject) {
            if (!arr || typeof arr.length === 'undefined')
                throw new TypeError('Promise.all accepts an array');
            var args = Array.prototype.slice.call(arr);
            if (args.length === 0)
                return resolve([]);
            var remaining = args.length;
            function res(i, val) {
                try {
                    if (val && (typeof val === 'object' || typeof val === 'function')) {
                        var then = val.then;
                        if (typeof then === 'function') {
                            then.call(val, function (val) {
                                res(i, val);
                            }, reject);
                            return;
                        }
                    }
                    args[i] = val;
                    if (--remaining === 0) {
                        resolve(args);
                    }
                }
                catch (ex) {
                    reject(ex);
                }
            }
            for (var i = 0; i < args.length; i++) {
                res(i, args[i]);
            }
        });
    };
    Promise.resolve = function (value) {
        if (value && typeof value === 'object' && value.constructor === Promise) {
            return value;
        }
        return new Promise(function (resolve) {
            resolve(value);
        });
    };
    Promise.reject = function (value) {
        return new Promise(function (resolve, reject) {
            reject(value);
        });
    };
    Promise.race = function (values) {
        return new Promise(function (resolve, reject) {
            for (var i = 0, len = values.length; i < len; i++) {
                values[i].then(resolve, reject);
            }
        });
    };
    Promise._immediateFn =
        window.setImmediate && (typeof (window.setImmediate) === 'function') ? function (fn) { window.setImmediate(fn); } : function (fn) { setTimeoutFunc(fn, 0); };
    Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
        if (typeof console !== 'undefined' && console) {
            console.warn('Possible Unhandled Promise Rejection:', err);
        }
    };
    if (!window.Promise)
        window.Promise = Promise;
})();
if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
        value: function (predicate) {
            if (this == null)
                throw new TypeError('"this" is null or not defined');
            var o = Object(this);
            var len = o.length >>> 0;
            if (typeof predicate !== 'function')
                throw new TypeError('predicate must be a function');
            var thisArg = arguments[1];
            var k = 0;
            while (k < len) {
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o))
                    return k;
                k++;
            }
            return -1;
        },
        configurable: true,
        writable: true
    });
}
if (!Array.prototype.find) {
    Array.prototype.find = function (callback, thisArg) {
        thisArg = thisArg ? thisArg : window;
        var i = 0;
        for (var _i = 0, _a = this; _i < _a.length; _i++) {
            var item = _a[_i];
            if (callback.call(thisArg, item, i, this))
                return item;
        }
        return undefined;
    };
}
if (!Array.from) {
    Array.from = (function () {
        var toStr = Object.prototype.toString;
        var isCallable = function (fn) {
            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
        };
        var toInteger = function (value) {
            var number = Number(value);
            if (isNaN(number)) {
                return 0;
            }
            if (number === 0 || !isFinite(number)) {
                return number;
            }
            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
        };
        var maxSafeInteger = Math.pow(2, 53) - 1;
        var toLength = function (value) {
            var len = toInteger(value);
            return Math.min(Math.max(len, 0), maxSafeInteger);
        };
        return function from(arrayLike) {
            var C = this;
            var items = Object(arrayLike);
            if (arrayLike == null)
                throw new TypeError("Array.from doit utiliser un objet semblable à un tableau - null ou undefined ne peuvent pas être utilisés");
            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
            var T;
            if (typeof mapFn !== 'undefined') {
                if (!isCallable(mapFn))
                    throw new TypeError('Array.from: lorsqu il est utilisé le deuxième argument doit être une fonction');
                if (arguments.length > 2)
                    T = arguments[2];
            }
            var len = toLength(items.length);
            var A = isCallable(C) ? Object(new C(len)) : new Array(len);
            var k = 0;
            var kValue;
            while (k < len) {
                kValue = items[k];
                if (mapFn)
                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
                else
                    A[k] = kValue;
                k += 1;
            }
            A.length = len;
            return A;
        };
    }());
}
if (!Array.prototype.map) {
    Array.prototype.map = function (callback) {
        var T, A, k;
        if (this == null)
            throw new TypeError(' this est null ou non défini');
        var O = Object(this);
        var len = O.length >>> 0;
        if (typeof callback !== 'function')
            throw new TypeError(callback + ' n est pas une fonction');
        if (arguments.length > 1)
            T = arguments[1];
        A = new Array(len);
        k = 0;
        while (k < len) {
            var kValue, mappedValue;
            if (k in O) {
                kValue = O[k];
                mappedValue = callback.call(T, kValue, k, O);
                A[k] = mappedValue;
            }
            k++;
        }
        return A;
    };
}
if (!Math.log10) {
    Math.log10 = function (x) {
        return Math.log(x) * Math.LOG10E;
    };
}
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Core;
(function (Core) {
    var Uri = (function (_super) {
        __extends(Uri, _super);
        function Uri(uri) {
            if (uri === void 0) { uri = null; }
            var _this = _super.call(this) || this;
            var fullpath = true;
            var baseURI;
            if ('baseURI' in document)
                baseURI = document.baseURI;
            else
                baseURI = document.location.href;
            if (uri == null)
                uri = baseURI;
            var res = uri.match(/^([^:\/]+):\/\/([^\/]+)(\/.*)$/);
            if (res === null) {
                fullpath = false;
                res = baseURI.match(/^([^:\/]+):\/\/([^\/]+)(\/.*)$/);
            }
            _this.scheme = res[1];
            var authority = res[2];
            var path = res[3];
            res = authority.match(/^(.+):(.+)@(.*)$/);
            if (res !== null) {
                _this.user = res[1];
                _this.password = res[2];
                authority = res[3];
            }
            res = authority.match(/^(.+):(.+)$/);
            if (res !== null) {
                authority = res[1];
                _this.port = parseInt(res[2]);
            }
            else {
                if (_this.scheme == 'https')
                    _this.port = 443;
                else
                    _this.port = 80;
            }
            _this.host = authority;
            if (fullpath)
                _this.path = path;
            else {
                if (uri.indexOf('/') === 0)
                    _this.path = Uri.cleanPath(uri);
                else
                    _this.path = Uri.mergePath(path, uri);
            }
            return _this;
        }
        Uri.prototype.getScheme = function () {
            return this.scheme;
        };
        Uri.prototype.getUser = function () {
            return this.user;
        };
        Uri.prototype.getPassword = function () {
            return this.password;
        };
        Uri.prototype.getHost = function () {
            return this.host;
        };
        Uri.prototype.getPort = function () {
            return this.port;
        };
        Uri.prototype.getPath = function () {
            return this.path;
        };
        Uri.prototype.getQuery = function () {
            return this.query;
        };
        Uri.prototype.getFragment = function () {
            return this.fragment;
        };
        Uri.prototype.toString = function () {
            var str = this.scheme + '://';
            if ((this.user !== undefined) && (this.password !== undefined))
                str += this.user + ':' + this.password + '@';
            str += this.host;
            if (this.port !== undefined)
                str += ':' + this.port;
            str += this.path;
            return str;
        };
        Uri.cleanPath = function (path) {
            while (path.match(/\/([^\/]*)\/\.\.\//))
                path = path.replace(/\/([^\/]*)\/\.\.\//, '/');
            while (path.match(/\/\//))
                path = path.replace(/\/\//, '/');
            while (path.match(/\/\.\//))
                path = path.replace(/\/\.\//, '/');
            return path;
        };
        Uri.mergePath = function (base, relative) {
            var dir = base.match(/^(.*)\//)[0];
            dir += relative;
            return Uri.cleanPath(dir);
        };
        return Uri;
    }(Core.Object));
    Core.Uri = Uri;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var DoubleLinkedListNode = (function () {
        function DoubleLinkedListNode(data) {
            this.data = data;
        }
        return DoubleLinkedListNode;
    }());
    Core.DoubleLinkedListNode = DoubleLinkedListNode;
    var DoubleLinkedList = (function () {
        function DoubleLinkedList() {
        }
        DoubleLinkedList.prototype.getLength = function () {
            return this.length;
        };
        DoubleLinkedList.prototype.getFirstNode = function () {
            return this.root;
        };
        DoubleLinkedList.prototype.getLastNode = function () {
            if (this.root === undefined)
                return undefined;
            else
                return this.root.previous;
        };
        DoubleLinkedList.prototype.appendNode = function (node) {
            if (this.root === undefined) {
                node.previous = node;
                node.next = node;
                this.root = node;
            }
            else {
                node.previous = this.root.previous;
                node.next = this.root;
                this.root.previous.next = node;
                this.root.previous = node;
            }
            this.length++;
            return node;
        };
        DoubleLinkedList.prototype.prependNode = function (node) {
            if (this.root === undefined) {
                node.previous = node;
                node.next = node;
                this.root = node;
            }
            else {
                node.previous = this.root.previous;
                node.next = this.root;
                this.root.previous.next = node;
                this.root.previous = node;
                this.root = node;
            }
            this.length++;
            return node;
        };
        DoubleLinkedList.prototype.removeNode = function (node) {
            if (this.root === node) {
                if (node.next === node)
                    this.root = undefined;
                else {
                    node.next.previous = node.previous;
                    node.previous.next = node.next;
                    this.root = node.next;
                }
            }
            else {
                node.next.previous = node.previous;
                node.previous.next = node.next;
            }
            node.next = undefined;
            node.previous = undefined;
            this.length--;
        };
        DoubleLinkedList.prototype.findNode = function (data) {
            if (this.root === undefined)
                return undefined;
            var current = this.root;
            while (current.next !== this.root) {
                if (current.data === data)
                    return current;
                current = current.next;
            }
            return undefined;
        };
        DoubleLinkedList.prototype.getFirst = function () {
            var firstNode = this.getFirstNode();
            if (firstNode === undefined)
                return undefined;
            else
                return firstNode.data;
        };
        DoubleLinkedList.prototype.getLast = function () {
            var lastNode = this.getLastNode();
            if (lastNode === undefined)
                return undefined;
            else
                return lastNode.data;
        };
        DoubleLinkedList.prototype.append = function (data) {
            return this.appendNode(new DoubleLinkedListNode(data));
        };
        DoubleLinkedList.prototype.prepend = function (data) {
            return this.prependNode(new DoubleLinkedListNode(data));
        };
        DoubleLinkedList.prototype.remove = function (data) {
            var node = this.findNode(data);
            if (node !== undefined)
                this.removeNode(node);
        };
        DoubleLinkedList.prototype.clear = function () {
            this.root = undefined;
        };
        DoubleLinkedList.moveNext = function (node) {
            if (node !== undefined)
                return node.next;
            else
                return undefined;
        };
        DoubleLinkedList.prototype.isLast = function (node) {
            if (node === undefined)
                return true;
            else
                return node.next === this.root;
        };
        return DoubleLinkedList;
    }());
    Core.DoubleLinkedList = DoubleLinkedList;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var HttpRequest = (function (_super) {
        __extends(HttpRequest, _super);
        function HttpRequest(init) {
            var _this = _super.call(this) || this;
            _this.url = null;
            _this.method = 'GET';
            _this.binary = false;
            _this.arguments = undefined;
            _this.content = undefined;
            _this.headers = undefined;
            _this.error = new Core.Events();
            _this.done = new Core.Events();
            _this.request = new XMLHttpRequest();
            var wrapper = function () {
                if (_this.request.readyState == 4) {
                    if ((_this.request.status >= 200) && (_this.request.status < 300))
                        _this.done.fire({ target: _this });
                    else
                        _this.error.fire({ target: _this, code: _this.request.status });
                }
            };
            _this.request.onreadystatechange = wrapper;
            if (init) {
                if (init.url !== undefined)
                    _this.url = init.url;
                if (init.method !== undefined)
                    _this.method = init.method;
                if (init.binary !== undefined)
                    _this.binary = init.binary;
                if (init.arguments !== undefined)
                    _this.arguments = init.arguments;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.headers !== undefined)
                    _this.headers = init.headers;
                if (init.ondone)
                    _this.done.connect(init.ondone);
                if (init.onerror)
                    _this.error.connect(init.onerror);
            }
            return _this;
        }
        Object.defineProperty(HttpRequest.prototype, "onerror", {
            set: function (value) { this.error.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpRequest.prototype, "ondone", {
            set: function (value) { this.done.connect(value); },
            enumerable: true,
            configurable: true
        });
        HttpRequest.prototype.setRequestHeader = function (header, value) {
            if (this.headers === undefined)
                this.headers = {};
            this.headers[header] = value;
        };
        HttpRequest.prototype.addArgument = function (argName, argValue) {
            if (this.arguments === undefined)
                this.arguments = {};
            this.arguments[argName] = argValue;
        };
        HttpRequest.prototype.abort = function () {
            this.request.abort();
        };
        HttpRequest.prototype.send = function () {
            if (this.url === undefined)
                throw ('url MUST be given for an HttpRequest');
            var header;
            var args = '';
            if (this.arguments !== undefined)
                args = Core.Util.encodeURIQuery(this.arguments);
            var url = this.url;
            if (((this.method === 'GET') || (this.method === 'DELETE') || (this.content !== undefined)) && (args !== '')) {
                if (this.url.indexOf('?') === -1)
                    url += '?' + args;
                else
                    url += '&' + args;
            }
            this.request.open(this.method, url, true);
            if (this.binary)
                this.request.overrideMimeType('text/plain; charset=x-user-defined');
            this.request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            if (HttpRequest.requestHeaders !== undefined) {
                for (header in HttpRequest.requestHeaders)
                    this.request.setRequestHeader(header, HttpRequest.requestHeaders[header]);
            }
            if (this.headers !== undefined) {
                for (header in this.headers)
                    this.request.setRequestHeader(header, this.headers[header]);
            }
            if (this.content !== undefined) {
                if ((this.headers === undefined) || (this.headers["Content-Type"] === undefined))
                    this.request.setRequestHeader('Content-Type', 'text/plain; charset=utf-8');
                this.request.send(this.content);
            }
            else if ((args !== '') && ((this.method === 'POST') || (this.method === 'PUT'))) {
                if ((this.headers === undefined) || (this.headers["Content-Type"] === undefined))
                    this.request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                this.request.send(args);
            }
            else
                this.request.send();
        };
        HttpRequest.prototype.sendAsync = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.done.connect(function () { return resolve(_this); });
                _this.error.connect(function () { return resolve(_this); });
                _this.send();
            });
        };
        HttpRequest.prototype.waitAsync = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.done.connect(function () { return resolve(_this); });
                _this.error.connect(function () { return resolve(_this); });
            });
        };
        HttpRequest.prototype.getResponseHeader = function (header) {
            return this.request.getResponseHeader(header);
        };
        Object.defineProperty(HttpRequest.prototype, "responseText", {
            get: function () {
                return this.request.responseText;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpRequest.prototype, "responseBase64", {
            get: function () {
                return Core.Util.toBase64(this.request.responseText);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpRequest.prototype, "responseJSON", {
            get: function () {
                var res;
                try {
                    res = JSON.parse(this.responseText);
                }
                catch (err) {
                    res = undefined;
                }
                return res;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpRequest.prototype, "responseXML", {
            get: function () {
                var parser = new DOMParser();
                try {
                    var xmlDoc = parser.parseFromString(this.responseText, 'text/xml');
                    return xmlDoc;
                }
                catch (e) { }
                return undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpRequest.prototype, "status", {
            get: function () {
                return this.request.status;
            },
            enumerable: true,
            configurable: true
        });
        HttpRequest.setRequestHeader = function (header, value) {
            if (HttpRequest.requestHeaders === undefined)
                HttpRequest.requestHeaders = {};
            HttpRequest.requestHeaders[header] = value;
        };
        HttpRequest.requestHeaders = undefined;
        return HttpRequest;
    }(Core.Object));
    Core.HttpRequest = HttpRequest;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var DelayedTask = (function (_super) {
        __extends(DelayedTask, _super);
        function DelayedTask(delay, callback) {
            var _this = _super.call(this) || this;
            _this.isDone = false;
            _this.delay = delay;
            _this.callback = callback;
            _this.handle = setTimeout(function () {
                _this.handle = undefined;
                _this.isDone = true;
                _this.callback(_this);
            }, _this.delay * 1000);
            return _this;
        }
        DelayedTask.prototype.abort = function () {
            if (this.handle !== undefined) {
                clearTimeout(this.handle);
                this.handle = undefined;
            }
        };
        return DelayedTask;
    }(Core.Object));
    Core.DelayedTask = DelayedTask;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var Timer = (function (_super) {
        __extends(Timer, _super);
        function Timer(init) {
            var _this = _super.call(this) || this;
            _this.interval = 1;
            _this.timeupdated = new Core.Events();
            if (init) {
                if (init.interval !== undefined)
                    _this.interval = init.interval;
                if (init.arguments !== undefined)
                    _this.arguments = init.arguments;
                else
                    _this.arguments = [];
            }
            var wrapper = function () {
                var startTime = (new Date().getTime()) / 1000;
                _this.timeupdated.fire({ target: _this, arguments: _this.arguments });
                var endTime = (new Date().getTime()) / 1000;
                var deltaTime = endTime - startTime;
                if (deltaTime < 0)
                    deltaTime = 0;
                var interval = (_this.interval * 1000) - deltaTime;
                if (interval < 0)
                    interval = 0;
                if (_this.handle !== undefined)
                    _this.handle = setTimeout(wrapper, interval);
            };
            _this.handle = setTimeout(wrapper, 0);
            return _this;
        }
        Object.defineProperty(Timer.prototype, "ontimeupdated", {
            set: function (value) { this.timeupdated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Timer.prototype.abort = function () {
            if (this.handle !== undefined) {
                clearTimeout(this.handle);
                this.handle = undefined;
            }
        };
        return Timer;
    }(Core.Object));
    Core.Timer = Timer;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var Socket = (function (_super) {
        __extends(Socket, _super);
        function Socket(init) {
            var _this = _super.call(this) || this;
            _this.host = undefined;
            _this.service = '/';
            _this.port = 80;
            _this.secure = false;
            _this.lastPosition = 0;
            _this.readSize = true;
            _this.size = 0;
            _this.data = '';
            _this.isClosed = false;
            _this.closeSent = false;
            _this.sep = '?';
            _this.pollInterval = 2.5;
            _this.error = new Core.Events();
            _this.message = new Core.Events();
            _this.closed = new Core.Events();
            _this.opened = new Core.Events();
            _this.onWebSocketOpen = function () {
                if (_this.websocketdelay !== undefined) {
                    _this.websocketdelay.abort();
                    _this.websocketdelay = undefined;
                }
                _this.opened.fire({ target: _this });
            };
            _this.onWebSocketError = function () {
                if (_this.websocketdelay !== undefined) {
                    _this.websocketdelay.abort();
                    _this.websocketdelay = undefined;
                }
                _this.error.fire({ target: _this });
            };
            _this.onWebSocketMessage = function (msg) {
                if (msg.data === 'PING')
                    _this.websocket.send('PONG');
                else
                    _this.message.fire({ target: _this, message: msg.data });
            };
            _this.onWebSocketClose = function (msg) {
                if (_this.websocketdelay !== undefined) {
                    _this.websocketdelay.abort();
                    _this.websocketdelay = undefined;
                }
                _this.closed.fire({ target: _this });
            };
            if (init.host !== undefined)
                _this.host = init.host;
            else
                _this.host = document.location.hostname;
            if (init.secure !== undefined)
                _this.secure = init.secure;
            else
                _this.secure = (document.location.protocol === 'https:');
            if (init.port !== undefined)
                _this.port = init.port;
            else if ((document.location.port !== undefined) && (document.location.port !== ''))
                _this.port = parseInt(document.location.port);
            else {
                if (_this.secure)
                    _this.port = 443;
                else
                    _this.port = 80;
            }
            if (init.service !== undefined) {
                _this.service = init.service;
                if (_this.service.indexOf('?') == -1)
                    _this.sep = '?';
                else
                    _this.sep = '&';
            }
            if (init.mode !== undefined)
                _this.mode = init.mode;
            else {
                if (Core.Socket.supportWebSocket)
                    _this.mode = 'websocket';
                else
                    _this.mode = 'poll';
            }
            if (_this.mode == 'websocket') {
                _this.websocket = new WebSocket((_this.secure ? 'wss' : 'ws') + '://' + _this.host + ':' + _this.port + _this.service);
                _this.websocketdelay = new Core.DelayedTask(30, _this.onWebSocketOpenTimeout);
                _this.websocket.addEventListener('open', _this.onWebSocketOpen);
                _this.websocket.addEventListener('error', _this.onWebSocketError);
                _this.websocket.addEventListener('message', _this.onWebSocketMessage);
                _this.websocket.addEventListener('close', _this.onWebSocketClose);
            }
            else {
                _this.emumessages = [];
                var url = (_this.secure ? 'https' : 'http') + '://' + _this.host + ':' + _this.port + _this.service + _this.sep + 'socket=poll&command=open';
                _this.emuopenrequest = new Core.HttpRequest({
                    url: url,
                    ondone: function (e) { return _this.onEmuSocketOpenDone(); },
                    onerror: function (e) { return _this.onEmuSocketOpenError(e.target, e.code); }
                });
                _this.emuopenrequest.send();
            }
            return _this;
        }
        Object.defineProperty(Socket.prototype, "onerror", {
            set: function (value) { this.error.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Socket.prototype, "onmessage", {
            set: function (value) { this.message.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Socket.prototype, "onclosed", {
            set: function (value) { this.closed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Socket.prototype, "onopened", {
            set: function (value) { this.opened.connect(value); },
            enumerable: true,
            configurable: true
        });
        Socket.prototype.send = function (msg) {
            var _this = this;
            if (this.websocket !== undefined) {
                this.websocket.send(msg);
            }
            else {
                if (this.emusendrequest === undefined) {
                    var url = (this.secure ? 'https' : 'http') + '://' + this.host + ':' + this.port + this.service + this.sep + 'socket=' + this.mode + '&command=send&id=' + this.emuid + '&messages=' + encodeURIComponent(msg.toBase64());
                    this.emusendrequest = new Core.HttpRequest({
                        url: url,
                        ondone: function (e) { return _this.onEmuSocketSendDone(); },
                        onerror: function (e) { return _this.onEmuSocketSendError(); }
                    });
                    this.emusendrequest.send();
                    if (this.delayPollTask !== undefined) {
                        this.delayPollTask.abort();
                        this.delayPollTask = new Core.DelayedTask(0.1, this.delayPollDone);
                    }
                }
                else
                    this.emumessages.push(msg.toBase64());
            }
        };
        Socket.prototype.close = function () {
            var _this = this;
            if (this.delayPollTask !== undefined) {
                this.delayPollTask.abort();
                this.delayPollTask = undefined;
            }
            if (this.websocket !== undefined) {
                this.isClosed = true;
                this.websocket.close();
            }
            else {
                if (!this.isClosed) {
                    this.isClosed = true;
                    if (this.emuopenrequest !== undefined) {
                        this.emuopenrequest.abort();
                        this.emuopenrequest = undefined;
                    }
                    else if (this.emuid !== undefined) {
                        if (this.emusendrequest === undefined) {
                            this.closeSent = true;
                            this.emusendrequest = new Core.HttpRequest({
                                url: (this.secure ? 'https' : 'http') + '://' + this.host + ':' + this.port + this.service + this.sep + 'socket=' + this.mode + '&command=close&id=' + this.emuid,
                                ondone: function (e) { return _this.onEmuSocketSendDone(); },
                                onerror: function (e) { return _this.onEmuSocketSendError(); }
                            });
                            this.emusendrequest.send();
                        }
                    }
                }
            }
        };
        Socket.prototype.onWebSocketOpenTimeout = function () {
            var _this = this;
            this.websocketdelay = undefined;
            this.websocket.removeEventListener('open', this.onWebSocketOpen);
            this.websocket.removeEventListener('error', this.onWebSocketError);
            this.websocket.removeEventListener('message', this.onWebSocketMessage);
            this.websocket.removeEventListener('close', this.onWebSocketClose);
            this.websocket.close();
            this.websocket = undefined;
            this.mode = 'poll';
            this.emumessages = [];
            this.emuopenrequest = new Core.HttpRequest({
                url: (this.secure ? 'https' : 'http') + '://' + this.host + ':' + this.port + this.service + this.sep + 'socket=poll&command=open',
                ondone: function (e) { return _this.onEmuSocketOpenDone(); },
                onerror: function (e) { return _this.onEmuSocketOpenError(e.target, e.code); }
            });
            this.emuopenrequest.send();
        };
        Socket.prototype.emuSocketDataAvailable = function (data) {
            if (this.emuid === undefined) {
                this.emuid = data;
                this.opened.fire({ target: this });
            }
            else {
                if (data !== 'keepalive')
                    this.message.fire({ target: this, message: data.fromBase64() });
            }
        };
        Socket.prototype.emuSocketUpdate = function (delta) {
            for (var i = 0; i < delta.length; i++) {
                var character = delta[i];
                if (this.readSize) {
                    if (character === ':') {
                        this.readSize = false;
                        this.size = parseInt('0x' + this.data);
                        this.data = '';
                    }
                    else
                        this.data += character;
                }
                else {
                    this.data += character;
                    if (this.data.length >= this.size + 2) {
                        this.emuSocketDataAvailable(this.data.substring(0, this.data.length - 2));
                        this.readSize = true;
                        this.data = '';
                    }
                }
            }
        };
        Socket.prototype.onEmuSocketSendDone = function () {
            var _this = this;
            var response = this.emusendrequest.getResponseJSON();
            if (this.emumessages.length > 0) {
                var messages = '';
                for (var i = 0; i < this.emumessages.length; i++) {
                    if (messages !== '')
                        messages += ';';
                    messages += this.emumessages[i];
                }
                this.emusendrequest = new Core.HttpRequest({
                    url: (this.secure ? 'https' : 'http') + '://' + this.host + ':' + this.port + this.service + this.sep + 'socket=' + this.mode + '&command=send&id=' + this.emuid + '&messages=' + encodeURIComponent(messages),
                    ondone: function (e) { return _this.onEmuSocketSendDone(); },
                    onerror: function (e) { return _this.onEmuSocketSendError(); }
                });
                this.emusendrequest.send();
                this.emumessages = [];
            }
            else if (this.isClosed && !this.closeSent) {
                this.emusendrequest = new Core.HttpRequest({
                    url: (this.secure ? 'https' : 'http') + '://' + this.host + ':' + this.port + this.service + this.sep + 'socket=' + this.mode + '&command=close&id=' + this.emuid,
                    ondone: function (e) { return _this.onEmuSocketSendDone(); },
                    onerror: function (e) { return _this.onEmuSocketSendError(); }
                });
                this.emusendrequest.send();
            }
            else
                this.emusendrequest = undefined;
        };
        Socket.prototype.onEmuSocketSendError = function () {
            this.emusendrequest = undefined;
        };
        Socket.prototype.onEmuSocketOpenDone = function () {
            var _this = this;
            this.lastPoll = new Date();
            var response = this.emuopenrequest.getResponseJSON();
            this.emuopenrequest = undefined;
            if (response === undefined) {
                this.error.fire({ target: this });
                this.closed.fire({ target: this });
            }
            else {
                this.emuid = response.id;
                if ('keepAliveInterval' in response)
                    this.pollInterval = Math.min(response.keepAliveInterval, 2.5);
                if (response.status != 'open') {
                    this.error.fire({ target: this });
                    this.closed.fire({ target: this });
                }
                else {
                    this.opened.fire({ target: this });
                    this.emupollrequest = new Core.HttpRequest({
                        url: (this.secure ? 'https' : 'http') + '://' + this.host + ':' + this.port + this.service + this.sep + 'socket=poll&command=poll&id=' + this.emuid,
                        ondone: function (e) { return _this.onEmuSocketPollDone(); },
                        onerror: function (e) { return _this.onEmuSocketPollError(); }
                    });
                    this.emupollrequest.send();
                }
            }
        };
        Socket.prototype.onEmuSocketOpenError = function (request, status) {
            this.emuopenrequest = undefined;
            this.error.fire({ target: this });
            this.closed.fire({ target: this });
        };
        Socket.prototype.onEmuSocketPollDone = function () {
            var response = this.emupollrequest.getResponseJSON();
            this.emupollrequest = undefined;
            if (response === undefined) {
                this.close();
                this.closed.fire({ target: this });
            }
            else {
                if (response.messages !== undefined) {
                    for (var i = 0; i < response.messages.length; i++) {
                        var msg = response.messages[i].fromBase64();
                        this.message.fire({ target: this, message: msg });
                    }
                }
                if (response.status !== 'open') {
                    this.close();
                    this.closed.fire({ target: this });
                }
                else {
                    var now = new Date();
                    var deltaMs = Math.max(0, now.getTime() - this.lastPoll.getTime());
                    this.lastPoll = now;
                    if (deltaMs >= this.pollInterval * 1000)
                        this.sendPoll();
                    else
                        this.delayPollTask = new Core.DelayedTask(this.pollInterval, this.delayPollDone);
                }
            }
        };
        Socket.prototype.onEmuSocketPollError = function () {
            this.emupollrequest = undefined;
            this.error.fire({ target: this });
            this.close();
        };
        Socket.prototype.delayPollDone = function () {
            this.delayPollTask = undefined;
            if (this.emupollrequest === undefined)
                this.sendPoll();
        };
        Socket.prototype.sendPoll = function () {
            var _this = this;
            var now = new Date();
            this.lastPoll = now;
            this.emupollrequest = new Core.HttpRequest({
                url: (this.secure ? 'https' : 'http') + '://' + this.host + ':' + this.port + this.service + this.sep + 'socket=poll&command=poll&id=' + this.emuid,
                ondone: function (e) { return _this.onEmuSocketPollDone(); },
                onerror: function (e) { return _this.onEmuSocketPollError(); }
            });
            this.emupollrequest.send();
        };
        Socket.supportWebSocket = true;
        return Socket;
    }(Core.Object));
    Core.Socket = Socket;
})(Core || (Core = {}));
Core.Socket.supportWebSocket = "WebSocket" in window;
var Core;
(function (Core) {
    var RemoteDebug = (function (_super) {
        __extends(RemoteDebug, _super);
        function RemoteDebug(init) {
            var _this = _super.call(this) || this;
            _this.host = undefined;
            _this.port = undefined;
            _this.socket = undefined;
            _this.socketAlive = false;
            _this.retryTask = undefined;
            _this.nativeConsole = undefined;
            _this.buffer = [];
            _this.onSocketOpen = function () {
                _this.socketAlive = true;
                while (_this.buffer.length > 0) {
                    _this.socket.send(_this.buffer.shift());
                }
            };
            _this.onSocketMessage = function (e) {
                eval(e.message);
            };
            _this.onSocketError = function () {
                _this.socketAlive = false;
                _this.socket.close();
            };
            _this.onSocketClose = function () {
                _this.socketAlive = false;
                _this.socket.error.disconnect(_this.onSocketError);
                _this.socket.closed.disconnect(_this.onSocketClose);
                _this.socket = undefined;
                _this.retryTask = new Core.DelayedTask(5, _this.startSocket);
            };
            Core.RemoteDebug.current = _this;
            _this.host = init.host;
            _this.port = init.port;
            _this.nativeConsole = window.console;
            window.console = {
                log: Core.RemoteDebug.onConsoleLog,
                error: Core.RemoteDebug.onConsoleError,
                warn: Core.RemoteDebug.onConsoleWarn
            };
            window.onerror = Core.RemoteDebug.onError;
            _this.startSocket();
            return _this;
        }
        RemoteDebug.prototype.startSocket = function () {
            this.socket = new Core.Socket({ service: '/', host: this.host, port: this.port });
            this.socket.opened.connect(this.onSocketOpen);
            this.socket.message.connect(this.onSocketMessage);
            this.socket.error.connect(this.onSocketError);
            this.socket.closed.connect(this.onSocketClose);
        };
        RemoteDebug.prototype.onConsoleLog = function (message) {
            if (this.socketAlive)
                this.socket.send(JSON.stringify({ type: 'log', message: message }));
            else
                this.buffer.push(JSON.stringify({ type: 'log', message: message }));
        };
        RemoteDebug.prototype.onConsoleError = function (message) {
            if (this.socketAlive)
                this.socket.send(JSON.stringify({ type: 'error', message: message }));
            else
                this.buffer.push(JSON.stringify({ type: 'error', message: message }));
        };
        RemoteDebug.prototype.onConsoleWarn = function (message) {
            if (this.socketAlive)
                this.socket.send(JSON.stringify({ type: 'warn', message: message }));
            else
                this.buffer.push(JSON.stringify({ type: 'warn', message: message }));
        };
        RemoteDebug.prototype.onError = function (message, url, line) {
            if (this.socketAlive)
                this.socket.send(JSON.stringify({ type: 'warn', message: message, url: url, line: line }));
            else
                this.buffer.push(JSON.stringify({ type: 'warn', message: message, url: url, line: line }));
        };
        RemoteDebug.onConsoleLog = function (message) {
            Core.RemoteDebug.current.onConsoleLog.call(Core.RemoteDebug.current, message);
        };
        RemoteDebug.onConsoleError = function (message) {
            Core.RemoteDebug.current.onConsoleError.call(Core.RemoteDebug.current, message);
        };
        RemoteDebug.onConsoleWarn = function (message) {
            Core.RemoteDebug.current.onConsoleWarn.call(Core.RemoteDebug.current, message);
        };
        RemoteDebug.onError = function (message, url, line) {
            Core.RemoteDebug.current.onError.call(Core.RemoteDebug.current, message, url, line);
        };
        RemoteDebug.current = undefined;
        return RemoteDebug;
    }(Core.Object));
    Core.RemoteDebug = RemoteDebug;
})(Core || (Core = {}));
var Core;
(function (Core) {
    var FilePostUploader = (function (_super) {
        __extends(FilePostUploader, _super);
        function FilePostUploader(init) {
            var _this = _super.call(this) || this;
            _this.binaryString = false;
            _this._method = 'POST';
            _this._isCompleted = false;
            _this._isSent = false;
            _this.field = 'file';
            _this.progress = new Core.Events();
            _this.completed = new Core.Events();
            _this.error = new Core.Events();
            _this.fields = {};
            if (init) {
                if (init.method !== undefined)
                    _this.method = init.method;
                if (init.file !== undefined)
                    _this.file = init.file;
                if (init.field !== undefined)
                    _this.field = init.field;
                if (init.service !== undefined)
                    _this.service = init.service;
                if (init.destination !== undefined)
                    _this.destination = init.destination;
                if (init.arguments !== undefined)
                    _this.arguments = init.arguments;
                if (init.onprogress)
                    _this.progress.connect(init.onprogress);
                if (init.oncompleted)
                    _this.completed.connect(init.oncompleted);
                if (init.onerror)
                    _this.error.connect(init.onerror);
            }
            return _this;
        }
        Object.defineProperty(FilePostUploader.prototype, "onprogress", {
            set: function (value) { this.progress.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "oncompleted", {
            set: function (value) { this.completed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "onerror", {
            set: function (value) { this.error.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "method", {
            set: function (method) {
                this._method = method;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "file", {
            get: function () {
                return this._file;
            },
            set: function (file) {
                this._file = file;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "service", {
            set: function (service) {
                this._service = service;
            },
            enumerable: true,
            configurable: true
        });
        FilePostUploader.prototype.setField = function (name, value) {
            this.fields[name] = value;
        };
        Object.defineProperty(FilePostUploader.prototype, "arguments", {
            set: function (args) {
                this.fields = args;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "destination", {
            set: function (destination) {
                this.setField('destination', destination);
            },
            enumerable: true,
            configurable: true
        });
        FilePostUploader.prototype.send = function () {
            var _this = this;
            var field;
            this._isSent = true;
            if (Core.Navigator.supportFormData) {
                var formData = new FormData();
                for (field in this.fields) {
                    formData.append(field, this.fields[field]);
                }
                formData.append(this.field, this._file);
                this.request = new XMLHttpRequest();
                if ('upload' in this.request)
                    this.request.upload.addEventListener('progress', function (e) { return _this.onUpdateProgress(e); });
                this.request.open(this._method, this._service);
                this.request.send(formData);
                this.request.onreadystatechange = function (event) { return _this.onStateChange(event); };
            }
            else {
                this.fileReader = new FileReader();
                this.request = new XMLHttpRequest();
                if ('upload' in this.request)
                    this.request.upload.addEventListener('progress', function (e) { return _this.onUpdateProgress(e); });
                this.request.open(this._method, this._service);
                this.boundary = '----';
                var characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                for (var i = 0; i < 16; i++)
                    this.boundary += characters[Math.floor(Math.random() * characters.length)];
                this.boundary += '----';
                this.request.setRequestHeader("Content-Type", "multipart/form-data, boundary=" + this.boundary);
                this.request.setRequestHeader("Content-Length", this._file.size.toString());
                this.request.onreadystatechange = function (event) { return _this.onStateChange(event); };
                this.fileReader.onload = function (event) { return _this.onFileReaderLoad(event); };
                this.fileReader.onerror = function (event) { return _this.onFileReaderError(event); };
                this.fileReader.readAsBinaryString(this._file);
            }
        };
        Object.defineProperty(FilePostUploader.prototype, "status", {
            get: function () {
                return this.request.status;
            },
            enumerable: true,
            configurable: true
        });
        FilePostUploader.prototype.sendAsync = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.completed.connect(function () { return resolve(_this); });
                _this.error.connect(function () { return resolve(_this); });
                _this.send();
            });
        };
        FilePostUploader.prototype.waitAsync = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (_this.isCompleted)
                    resolve(_this);
                else {
                    _this.completed.connect(function () { return resolve(_this); });
                    if (!_this._isSent)
                        _this.send();
                }
            });
        };
        FilePostUploader.prototype.abort = function () {
            if (this.request !== undefined) {
                this.request.abort();
                this.request = undefined;
            }
        };
        Object.defineProperty(FilePostUploader.prototype, "responseText", {
            get: function () {
                return this._responseText;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "responseJSON", {
            get: function () {
                var res;
                try {
                    res = JSON.parse(this.responseText);
                }
                catch (err) {
                    res = undefined;
                }
                return res;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "isCompleted", {
            get: function () {
                return this._isCompleted;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "total", {
            get: function () {
                return this.totalOctets;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilePostUploader.prototype, "loaded", {
            get: function () {
                return this.loadedOctets;
            },
            enumerable: true,
            configurable: true
        });
        FilePostUploader.prototype.onStateChange = function (event) {
            if (this.request.readyState == 4) {
                this._isCompleted = true;
                if (this.request.status == 200) {
                    this._responseText = this.request.responseText;
                    this.completed.fire({ target: this });
                }
                else {
                    this._responseText = this.request.responseText;
                    this.error.fire({ target: this, status: this.request.status });
                }
                this.request = undefined;
            }
        };
        FilePostUploader.prototype.onUpdateProgress = function (event) {
            this.loadedOctets = event.loaded;
            this.totalOctets = event.total;
            this.progress.fire({ target: this, loaded: event.loaded, total: event.total });
        };
        FilePostUploader.prototype.onFileReaderError = function (event) {
            this.request.abort();
            this.request = undefined;
            this.error.fire({ target: this, status: event.status });
            this.fileReader = undefined;
        };
        FilePostUploader.prototype.onFileReaderLoad = function (event) {
            var body = '--' + this.boundary + '\r\n';
            body += "Content-Disposition: form-data; name='" + this.field + "'; filename='" + this._file.name + "'\r\n";
            body += 'Content-Type: ' + this._file.type + '\r\n\r\n';
            body += event.target.result + '\r\n';
            body += '--' + this.boundary + '--';
            this.request.sendAsBinary(body);
            this.fileReader = undefined;
        };
        return FilePostUploader;
    }(Core.Object));
    Core.FilePostUploader = FilePostUploader;
})(Core || (Core = {}));
var Anim;
(function (Anim) {
    var EasingFunction = (function (_super) {
        __extends(EasingFunction, _super);
        function EasingFunction(init) {
            var _this = _super.call(this) || this;
            _this.mode = 'in';
            if (init) {
                if (init.mode !== undefined)
                    _this.mode = init.mode;
            }
            return _this;
        }
        EasingFunction.prototype.ease = function (normalizedTime) {
            if (this.mode == 'in')
                return this.easeInCore(normalizedTime);
            else if (this.mode == 'out')
                return 1 - this.easeInCore(1 - normalizedTime);
            else {
                if (normalizedTime <= 0.5)
                    return this.easeInCore(normalizedTime * 2.0) / 2.0;
                else
                    return 0.5 + ((1 - this.easeInCore(2.0 - (normalizedTime * 2.0))) / 2.0);
            }
        };
        EasingFunction.prototype.easeInCore = function (normalizedTime) {
            return normalizedTime;
        };
        EasingFunction.register = function (easeName, classType) {
            this.eases[easeName] = classType;
        };
        EasingFunction.parse = function (ease) {
            return new this.eases[ease]();
        };
        EasingFunction.create = function (ease) {
            if (ease instanceof EasingFunction)
                return ease;
            else
                return EasingFunction.parse(ease);
        };
        EasingFunction.eases = {};
        return EasingFunction;
    }(Core.Object));
    Anim.EasingFunction = EasingFunction;
})(Anim || (Anim = {}));
var Anim;
(function (Anim) {
    var LinearEase = (function (_super) {
        __extends(LinearEase, _super);
        function LinearEase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LinearEase.prototype.easeInCore = function (normalizedTime) {
            return normalizedTime;
        };
        return LinearEase;
    }(Anim.EasingFunction));
    Anim.LinearEase = LinearEase;
})(Anim || (Anim = {}));
Anim.EasingFunction.register('linear', Anim.LinearEase);
var Anim;
(function (Anim) {
    var PowerEase = (function (_super) {
        __extends(PowerEase, _super);
        function PowerEase(init) {
            var _this = _super.call(this, init) || this;
            _this.power = 2;
            if (init) {
                if (init.power !== undefined)
                    _this.power = init.power;
            }
            return _this;
        }
        PowerEase.prototype.easeInCore = function (normalizedTime) {
            return Math.pow(normalizedTime, this.power);
        };
        return PowerEase;
    }(Anim.EasingFunction));
    Anim.PowerEase = PowerEase;
})(Anim || (Anim = {}));
Anim.EasingFunction.register('power', Anim.PowerEase);
var Anim;
(function (Anim) {
    var BounceEase = (function (_super) {
        __extends(BounceEase, _super);
        function BounceEase(init) {
            var _this = _super.call(this, init) || this;
            _this.bounces = 3;
            _this.bounciness = 2.0;
            if (init) {
                if (init.bounces !== undefined)
                    _this.bounces = init.bounces;
                if (init.bounciness !== undefined)
                    _this.bounciness = init.bounciness;
            }
            return _this;
        }
        BounceEase.prototype.easeInCore = function (normalizedTime) {
            var sq = Math.exp((1.0 / this.bounciness) * Math.log(normalizedTime));
            var step = Math.floor(sq * (this.bounces + 0.5));
            var sinstep = (sq * (this.bounces + 0.5)) - step;
            return Math.sin(sinstep * Math.PI) / Math.exp(this.bounces - step);
        };
        return BounceEase;
    }(Anim.EasingFunction));
    Anim.BounceEase = BounceEase;
})(Anim || (Anim = {}));
Anim.EasingFunction.register('bounce', Anim.BounceEase);
var Anim;
(function (Anim) {
    var ElasticEase = (function (_super) {
        __extends(ElasticEase, _super);
        function ElasticEase(init) {
            var _this = _super.call(this, init) || this;
            _this.oscillations = 3;
            _this.springiness = 3.0;
            if (init) {
                if (init.oscillations !== undefined)
                    _this.oscillations = init.oscillations;
                if (init.springiness !== undefined)
                    _this.springiness = init.springiness;
            }
            return _this;
        }
        ElasticEase.prototype.easeInCore = function (normalizedTime) {
            return Math.sin(normalizedTime * (this.oscillations * 2 + 0.5) * Math.PI) * Math.pow(normalizedTime, this.springiness);
        };
        return ElasticEase;
    }(Anim.EasingFunction));
    Anim.ElasticEase = ElasticEase;
})(Anim || (Anim = {}));
Anim.EasingFunction.register('elastic', Anim.ElasticEase);
var Anim;
(function (Anim) {
    var TimeManager = (function (_super) {
        __extends(TimeManager, _super);
        function TimeManager() {
            var _this = _super.call(this) || this;
            _this.clocks = undefined;
            _this.timer = undefined;
            _this.start = 0;
            _this.tick = new Core.Events();
            _this.clocks = [];
            _this.start = new Date().getTime();
            return _this;
        }
        TimeManager.prototype.add = function (clock) {
            var found = false;
            for (var i = 0; !found && (i < this.clocks.length); i++) {
                found = this.clocks[i] === clock;
            }
            if (!found) {
                this.clocks.push(clock);
                if (this.clocks.length === 1) {
                    this.timer = new Core.Timer({ interval: 1 / 60 });
                    this.timer.timeupdate.connect(this.onTick);
                }
            }
        };
        TimeManager.prototype.remove = function (clock) {
            var i = 0;
            while ((i < this.clocks.length) && (this.clocks[i] != clock)) {
                i++;
            }
            if (i < this.clocks.length)
                this.clocks.splice(i, 1);
            if (this.clocks.length === 0) {
                this.timer.abort();
                this.timer = undefined;
            }
        };
        TimeManager.prototype.onTick = function () {
            var current = (new Date().getTime()) - this.start;
            current /= 1000;
            for (var i = 0; i < this.clocks.length; i++)
                this.clocks[i].update(current);
            this.tick.fire({ target: this });
        };
        TimeManager.current = new TimeManager();
        return TimeManager;
    }(Core.Object));
    Anim.TimeManager = TimeManager;
})(Anim || (Anim = {}));
var Anim;
(function (Anim) {
    var AnimationManager = (function (_super) {
        __extends(AnimationManager, _super);
        function AnimationManager() {
            var _this = _super.call(this) || this;
            _this.clocks = undefined;
            _this.start = 0;
            _this.onTickBind = undefined;
            _this.tick = new Core.Events();
            _this.clocks = [];
            _this.start = new Date().getTime();
            _this.onTickBind = _this.onTick.bind(_this);
            return _this;
        }
        AnimationManager.prototype.add = function (clock) {
            var found = false;
            for (var i = 0; !found && (i < this.clocks.length); i++) {
                found = this.clocks[i] === clock;
            }
            if (!found) {
                this.clocks.push(clock);
                if (this.clocks.length == 1)
                    requestAnimationFrame(this.onTickBind);
            }
        };
        AnimationManager.prototype.remove = function (clock) {
            var i = 0;
            while ((i < this.clocks.length) && (this.clocks[i] != clock)) {
                i++;
            }
            if (i < this.clocks.length)
                this.clocks.splice(i, 1);
        };
        AnimationManager.prototype.forceTick = function () {
            if (this.clocks.length > 0)
                this.onTickBind();
        };
        AnimationManager.prototype.onTick = function () {
            var startTime = (new Date().getTime()) / 1000;
            var current = (new Date().getTime()) - this.start;
            current /= 1000;
            for (var i = 0; i < this.clocks.length; i++)
                this.clocks[i].update(current);
            this.tick.fire({ target: this });
            if (this.clocks.length > 0)
                requestAnimationFrame(this.onTickBind);
        };
        AnimationManager.current = new AnimationManager();
        return AnimationManager;
    }(Core.Object));
    Anim.AnimationManager = AnimationManager;
})(Anim || (Anim = {}));
if (!('requestAnimationFrame' in window)) {
    if ('webkitRequestAnimationFrame' in window)
        window.requestAnimationFrame = window['webkitRequestAnimationFrame'];
    else if ('mozRequestAnimationFrame' in window)
        window.requestAnimationFrame = window['mozRequestAnimationFrame'];
    else if ('msRequestAnimationFrame' in window)
        window.requestAnimationFrame = window['msRequestAnimationFrame'];
    else
        window.requestAnimationFrame = function (cb) { setTimeout(cb, 1 / 60); };
}
var Anim;
(function (Anim) {
    var Clock = (function (_super) {
        __extends(Clock, _super);
        function Clock(init) {
            var _this = _super.call(this) || this;
            _this._animation = true;
            _this._parent = undefined;
            _this._time = undefined;
            _this._iteration = undefined;
            _this._progress = 0;
            _this._isActive = false;
            _this._globalTime = 0;
            _this.startTime = 0;
            _this.lastTick = 0;
            _this._beginTime = 0;
            _this.isPaused = false;
            _this._speed = 1;
            _this._duration = 'forever';
            _this.pendingState = 'none';
            _this._autoReverse = false;
            _this._repeat = 1;
            _this._target = undefined;
            _this._ease = undefined;
            _this.timeupdate = new Core.Events();
            _this.completed = new Core.Events();
            if (init) {
                if (init.animation !== undefined)
                    _this.animation = init.animation;
                if (init.repeat !== undefined)
                    _this.repeat = init.repeat;
                if (init.speed !== undefined)
                    _this.speed = init.speed;
                if (init.autoReverse !== undefined)
                    _this.autoReverse = init.autoReverse;
                if (init.beginTime !== undefined)
                    _this.beginTime = init.beginTime;
                if (init.ease !== undefined)
                    _this.ease = init.ease;
                if (init.target !== undefined)
                    _this.target = init.target;
                if (init.duration !== undefined)
                    _this.duration = init.duration;
                if (init.parent !== undefined)
                    _this.parent = init.parent;
                if (init.ontimeupdate)
                    _this.timeupdate.connect(init.ontimeupdate);
                if (init.oncompleted)
                    _this.completed.connect(init.oncompleted);
            }
            return _this;
        }
        Object.defineProperty(Clock.prototype, "animation", {
            set: function (animation) {
                this._animation = animation;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "repeat", {
            set: function (repeat) {
                this._repeat = repeat;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "speed", {
            set: function (speed) {
                this._speed = speed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "autoReverse", {
            set: function (autoReverse) {
                this._autoReverse = autoReverse;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "beginTime", {
            set: function (beginTime) {
                this._beginTime = beginTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "ease", {
            set: function (ease) {
                this._ease = Anim.EasingFunction.create(ease);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "target", {
            set: function (target) {
                this._target = target;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "duration", {
            set: function (duration) {
                if (duration == 'automatic')
                    this._duration = 'forever';
                else
                    this._duration = duration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            set: function (parent) {
                this._parent = parent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "globalTime", {
            get: function () {
                return this._globalTime + (this.lastTick - this.startTime) * this._speed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "isActive", {
            get: function () {
                return this._isActive || (this.pendingState === 'active');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "time", {
            get: function () {
                return this._time;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "iteration", {
            get: function () {
                return this._iteration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Clock.prototype, "progress", {
            get: function () {
                return this._progress;
            },
            enumerable: true,
            configurable: true
        });
        Clock.prototype.begin = function () {
            if (this.isActive)
                return;
            if (this._parent === undefined) {
                if (this._animation)
                    Anim.AnimationManager.current.add(this);
                else
                    Anim.TimeManager.current.add(this);
            }
            this.pendingState = 'active';
            if ((this._target !== undefined) && (this._target.setAnimClock !== undefined))
                this._target.setAnimClock(this);
        };
        Clock.prototype.pause = function () {
            this.pendingState = 'paused';
        };
        Clock.prototype.resume = function () {
            this.pendingState = 'resumed';
        };
        Clock.prototype.stop = function () {
            this.pendingState = 'stopped';
        };
        Clock.prototype.complete = function () {
            if (this._parent === undefined) {
                if (this._animation)
                    Anim.AnimationManager.current.remove(this);
                else
                    Anim.TimeManager.current.remove(this);
            }
            this.completed.fire({ target: this });
        };
        Clock.prototype.onTimeUpdate = function (deltaTick) {
            var progress = this.progress;
            if (this._ease !== undefined)
                progress = this._ease.ease(progress);
            this.timeupdate.fire({ target: this, progress: progress, deltaTick: deltaTick });
        };
        Clock.prototype.update = function (parentGlobalTime) {
            do {
                var state = this.pendingState;
                this.pendingState = 'none';
                if (state === 'none') {
                    if (this._isActive && !this.isPaused) {
                        var deltaTick = parentGlobalTime - this.lastTick;
                        this.lastTick = parentGlobalTime;
                        var globalTime = this.globalTime;
                        globalTime -= this._beginTime;
                        if (globalTime >= 0) {
                            if ((this._duration !== 'forever') && (this._duration !== 'automatic')) {
                                var iteration = globalTime / this._duration;
                                var iterationRounded = Math.floor(iteration + 1);
                                var time = globalTime % this._duration;
                                if (this._autoReverse) {
                                    if ((iterationRounded & 1) === 0)
                                        time = this._duration - time;
                                    iteration /= 2;
                                    iterationRounded = Math.floor(iteration + 1);
                                }
                                if (this._repeat == 'forever') {
                                    this._iteration = iterationRounded;
                                    this._time = time;
                                    this._progress = time / this._duration;
                                    this.onTimeUpdate(deltaTick);
                                }
                                else {
                                    if (iteration >= this._repeat) {
                                        this.pendingState = 'stopped';
                                        this._iteration = this._repeat;
                                        this._time = this._duration;
                                        if (this._autoReverse)
                                            this._progress = 0;
                                        else
                                            this._progress = 1;
                                        this.onTimeUpdate(0);
                                    }
                                    else {
                                        this._iteration = iterationRounded;
                                        this._time = time;
                                        this._progress = time / this._duration;
                                        this.onTimeUpdate(deltaTick);
                                    }
                                }
                            }
                            else {
                                this._time = globalTime;
                                this._progress = 0;
                                this._iteration = undefined;
                                this.onTimeUpdate(deltaTick);
                            }
                        }
                    }
                }
                else if (state == 'active') {
                    if (!this._isActive) {
                        this._isActive = true;
                        this._globalTime = 0;
                        this.startTime = parentGlobalTime;
                        this.lastTick = this.startTime;
                        if (this._beginTime > 0) {
                            this._time = undefined;
                            this._progress = 0;
                            this._iteration = undefined;
                        }
                        else {
                            this._time = 0;
                            this._progress = 0;
                            this._iteration = 1;
                            this.onTimeUpdate(0);
                        }
                    }
                }
                else if (state == 'paused') {
                    if (!this.isPaused && this._isActive) {
                        this.isPaused = true;
                        this._globalTime = this.globalTime;
                        this.startTime = 0;
                        this.lastTick = 0;
                    }
                }
                else if (state == 'resumed') {
                    if (this.isPaused && this._isActive) {
                        this.isPaused = false;
                        this.startTime = parentGlobalTime;
                        this.lastTick = parentGlobalTime;
                    }
                }
                else if (state == 'stopped') {
                    if (this._isActive) {
                        this._progress = undefined;
                        this._time = undefined;
                        this._iteration = undefined;
                        this._isActive = false;
                    }
                }
            } while (this.pendingState != 'none');
            if ((this._parent === undefined) && !this._isActive)
                this.complete();
        };
        return Clock;
    }(Core.Object));
    Anim.Clock = Clock;
})(Anim || (Anim = {}));
var Anim;
(function (Anim) {
    var ClockGroup = (function (_super) {
        __extends(ClockGroup, _super);
        function ClockGroup() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.children = [];
            return _this;
        }
        ClockGroup.prototype.appendChild = function (child) {
            child.parent = this;
            this.children.push(child);
        };
        Object.defineProperty(ClockGroup.prototype, "content", {
            set: function (content) {
                this.children = [];
                if (content !== undefined) {
                    if (content instanceof Array) {
                        for (var i = 0; i < content.length; i++)
                            this.appendChild(content[i]);
                    }
                    else
                        this.appendChild(content);
                }
            },
            enumerable: true,
            configurable: true
        });
        ClockGroup.prototype.begin = function () {
            _super.prototype.begin.call(this);
            for (var i = 0; i < this.children.length; i++)
                this.children[i].begin();
        };
        ClockGroup.prototype.pause = function () {
            _super.prototype.pause.call(this);
            for (var i = 0; i < this.children.length; i++)
                this.children[i].pause();
        };
        ClockGroup.prototype.resume = function () {
            _super.prototype.resume.call(this);
            for (var i = 0; i < this.children.length; i++)
                this.children[i].resume();
        };
        ClockGroup.prototype.stop = function () {
            _super.prototype.stop.call(this);
            for (var i = 0; i < this.children.length; i++)
                this.children[i].stop();
        };
        ClockGroup.prototype.complete = function () {
            _super.prototype.complete.call(this);
            for (var i = 0; i < this.children.length; i++)
                this.children[i].complete();
        };
        ClockGroup.prototype.update = function (parentGlobalTime) {
            do {
                _super.prototype.update.call(this, parentGlobalTime);
                var childStopped = true;
                for (var i = 0; i < this.children.length; i++) {
                    var childClock = this.children[i];
                    childClock.update(this.globalTime);
                    if (childClock.isActive)
                        childStopped = false;
                }
                if (this.isActive && childStopped)
                    this.pendingState = 'stopped';
            } while (this.pendingState != 'none');
        };
        return ClockGroup;
    }(Anim.Clock));
    Anim.ClockGroup = ClockGroup;
})(Anim || (Anim = {}));
var Ui;
(function (Ui) {
    var Matrix = (function (_super) {
        __extends(Matrix, _super);
        function Matrix() {
            var _this = _super.call(this) || this;
            _this.a = 1;
            _this.b = 0;
            _this.c = 0;
            _this.d = 1;
            _this.e = 0;
            _this.f = 0;
            return _this;
        }
        Matrix.prototype.isTranslateOnly = function () {
            return ((this.a === 1) && (this.b === 0) && (this.c === 0) && (this.d === 1));
        };
        Matrix.prototype.isIdentity = function () {
            return ((this.a === 1) && (this.b === 0) && (this.c === 0) && (this.d === 1) && (this.e === 0) && (this.f === 0));
        };
        Matrix.prototype.translate = function (x, y) {
            return this.multiply(Matrix.createTranslate(x, y));
        };
        Matrix.prototype.rotate = function (angle) {
            return this.multiply(Matrix.createRotate(angle));
        };
        Matrix.prototype.scale = function (scaleX, scaleY) {
            if (scaleY === undefined)
                scaleY = scaleX;
            return this.multiply(Matrix.createScale(scaleX, scaleY));
        };
        Matrix.prototype.multiply = function (matrix) {
            var a = matrix.a * this.a + matrix.b * this.c;
            var c = matrix.c * this.a + matrix.d * this.c;
            var e = matrix.e * this.a + matrix.f * this.c + this.e;
            var b = matrix.a * this.b + matrix.b * this.d;
            var d = matrix.c * this.b + matrix.d * this.d;
            var f = matrix.e * this.b + matrix.f * this.d + this.f;
            return Matrix.createMatrix(a, b, c, d, e, f);
        };
        Matrix.prototype.getDeterminant = function () {
            return ((this.a * this.d) - (this.b * this.c));
        };
        Matrix.prototype.inverse = function () {
            var determinant = this.getDeterminant();
            if (determinant === 0)
                throw ("Matrix not invertible");
            var invd = 1 / determinant;
            var ta = this.d * invd;
            var tb = -this.b * invd;
            var tc = -this.c * invd;
            var td = this.a * invd;
            var te = ((this.c * this.f) - (this.e * this.d)) * invd;
            var tf = ((this.e * this.b) - (this.a * this.f)) * invd;
            return Matrix.createMatrix(ta, tb, tc, td, te, tf);
        };
        Matrix.prototype.setMatrix = function (a, b, c, d, e, f) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.e = e;
            this.f = f;
        };
        Matrix.prototype.getA = function () {
            return this.a;
        };
        Matrix.prototype.getB = function () {
            return this.b;
        };
        Matrix.prototype.getC = function () {
            return this.c;
        };
        Matrix.prototype.getD = function () {
            return this.d;
        };
        Matrix.prototype.getE = function () {
            return this.e;
        };
        Matrix.prototype.getF = function () {
            return this.f;
        };
        Matrix.prototype.clone = function () {
            return Matrix.createMatrix(this.a, this.b, this.c, this.d, this.e, this.f);
        };
        Matrix.prototype.toString = function () {
            return 'matrix(' + this.a.toFixed(4) + ',' + this.b.toFixed(4) + ',' + this.c.toFixed(4) + ',' + this.d.toFixed(4) + ',' + this.e.toFixed(4) + ',' + this.f.toFixed(4) + ')';
        };
        Matrix.createMatrix = function (a, b, c, d, e, f) {
            var matrix = new Matrix();
            matrix.setMatrix(a, b, c, d, e, f);
            return matrix;
        };
        Matrix.createTranslate = function (x, y) {
            return Matrix.createMatrix(1, 0, 0, 1, x, y);
        };
        Matrix.createScaleAt = function (scaleX, scaleY, centerX, centerY) {
            return Matrix.createMatrix(scaleX, 0, 0, scaleY, centerX - (scaleX * centerX), centerY - (scaleY * centerY));
        };
        Matrix.createScale = function (scaleX, scaleY) {
            if (scaleY === undefined)
                scaleY = scaleX;
            return Matrix.createScaleAt(scaleX, scaleY, 0, 0);
        };
        Matrix.createRotateAt = function (angle, centerX, centerY) {
            angle = (angle % 360) * Math.PI / 180;
            var sin = Math.sin(angle);
            var cos = Math.cos(angle);
            var offsetX = (centerX * (1.0 - cos)) + (centerY * sin);
            var offsetY = (centerY * (1.0 - cos)) - (centerX * sin);
            return Matrix.createMatrix(cos, sin, -sin, cos, offsetX, offsetY);
        };
        Matrix.createRotate = function (angle) {
            return Matrix.createRotateAt(angle, 0, 0);
        };
        Matrix.parse = function (stringMatrix) {
            var matrix;
            if (typeof (stringMatrix) === 'string') {
                var res = void 0;
                if ((res = stringMatrix.match(/^matrix\((-?\d+\.?\d*),(-?\d+\.?\d*),(-?\d+\.?\d*),(-?\d+\.?\d*),(-?\d+\.?\d*),(-?\d+\.?\d*)\)$/)) != undefined) {
                    var a = parseFloat(res[1]);
                    var b = parseFloat(res[2]);
                    var c = parseFloat(res[3]);
                    var d = parseFloat(res[4]);
                    var e = parseFloat(res[5]);
                    var f = parseFloat(res[6]);
                    matrix = new Matrix();
                    matrix.setMatrix(a, b, c, d, e, f);
                }
            }
            if (matrix === undefined)
                throw ('Unknown matrix format (' + stringMatrix + ')');
            return matrix;
        };
        return Matrix;
    }(Core.Object));
    Ui.Matrix = Matrix;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Point = (function (_super) {
        __extends(Point, _super);
        function Point(x, y) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            var _this = _super.call(this) || this;
            _this.x = 0;
            _this.y = 0;
            _this.x = x;
            _this.y = y;
            return _this;
        }
        Point.prototype.matrixTransform = function (matrix) {
            var x = this.x * matrix.a + this.y * matrix.c + matrix.e;
            var y = this.x * matrix.b + this.y * matrix.d + matrix.f;
            this.x = x;
            this.y = y;
            return this;
        };
        Point.prototype.multiply = function (value) {
            var res;
            if (typeof (value) === 'number')
                res = new Ui.Point(this.x * value, this.y * value);
            else if (value instanceof Ui.Matrix)
                res = new Ui.Point(this.x * value.a + this.y * value.c + value.e, this.x * value.b + this.y * value.d + value.f);
            else
                res = this;
            return res;
        };
        Point.prototype.divide = function (value) {
            var res;
            if (typeof (value) === 'number')
                res = new Ui.Point(this.x / value, this.y / value);
            else if (value instanceof Ui.Matrix) {
                value = value.inverse();
                res = new Ui.Point(this.x * value.a + this.y * value.c + value.e, this.x * value.b + this.y * value.d + value.f);
            }
            else
                res = this;
            return res;
        };
        Point.prototype.add = function (value) {
            var res;
            if (typeof (value) === 'number')
                res = new Point(this.x + value, this.y + value);
            else if (value instanceof Point)
                res = new Point(this.x + value.x, this.y + value.y);
            else
                res = this;
            return res;
        };
        Point.prototype.substract = function (value) {
            var res;
            if (typeof (value) === 'number')
                res = new Point(this.x - value, this.y - value);
            else if (value instanceof Point)
                res = new Point(this.x - value.x, this.y - value.y);
            else
                res = this;
            return res;
        };
        Point.prototype.setPoint = function (point) {
            this.x = point.x;
            this.y = point.y;
        };
        Point.prototype.getX = function () {
            return this.x;
        };
        Point.prototype.setX = function (x) {
            this.x = x;
        };
        Point.prototype.getY = function () {
            return this.y;
        };
        Point.prototype.setY = function (y) {
            this.y = y;
        };
        Point.prototype.getLength = function () {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        };
        Point.prototype.clone = function () {
            return new Point(this.x, this.y);
        };
        Point.prototype.toString = function () {
            return 'point(' + this.x.toFixed(4) + ', ' + this.y.toFixed(4) + ')';
        };
        return Point;
    }(Core.Object));
    Ui.Point = Point;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Color = (function (_super) {
        __extends(Color, _super);
        function Color(r, g, b, a) {
            if (r === void 0) { r = 0; }
            if (g === void 0) { g = 0; }
            if (b === void 0) { b = 0; }
            if (a === void 0) { a = 1; }
            var _this = _super.call(this) || this;
            _this.r = 0;
            _this.g = 0;
            _this.b = 0;
            _this.a = 1;
            _this.r = r;
            _this.g = g;
            _this.b = b;
            _this.a = a;
            return _this;
        }
        Color.prototype.addA = function (a) {
            return new Color(this.r, this.g, this.b, Math.max(0, Math.min(1, this.a + a)));
        };
        Color.prototype.addY = function (y) {
            var yuva = this.getYuva();
            yuva.y += y;
            return Color.createFromYuv(yuva.y, yuva.u, yuva.v, yuva.a);
        };
        Color.prototype.addH = function (h) {
            var hsla = this.getHsla();
            hsla.h += h;
            return Color.createFromHsl(hsla.h, hsla.s, hsla.l, hsla.a);
        };
        Color.prototype.addS = function (s) {
            var hsla = this.getHsla();
            hsla.s += s;
            return Color.createFromHsl(hsla.h, hsla.s, hsla.l, hsla.a);
        };
        Color.prototype.addL = function (l) {
            var hsla = this.getHsla();
            hsla.l += l;
            return Color.createFromHsl(hsla.h, hsla.s, hsla.l, hsla.a);
        };
        Color.prototype.getCssRgba = function () {
            return 'rgba(' + Math.round(this.r * 255) + ',' + Math.round(this.g * 255) + ',' + Math.round(this.b * 255) + ',' + this.a + ')';
        };
        Color.prototype.getCssRgb = function () {
            return 'rgb(' + Math.round(this.r * 255) + ',' + Math.round(this.g * 255) + ',' + Math.round(this.b * 255) + ')';
        };
        Color.prototype.getCssHtml = function () {
            var res = '#';
            var t = Math.round(this.r * 255).toString(16);
            if (t.length == 1)
                t = '0' + t;
            res += t;
            t = Math.round(this.g * 255).toString(16);
            if (t.length == 1)
                t = '0' + t;
            res += t;
            t = Math.round(this.b * 255).toString(16);
            if (t.length == 1)
                t = '0' + t;
            res += t;
            return res;
        };
        Color.prototype.getRgba = function () {
            return { r: this.r, g: this.g, b: this.b, a: this.a };
        };
        Color.prototype.getRgb = function () {
            return this.getRgba();
        };
        Color.prototype.getHsla = function () {
            var r = this.r;
            var g = this.g;
            var b = this.b;
            var min = Math.min(r, Math.min(g, b));
            var max = Math.max(r, Math.max(g, b));
            var h;
            var s;
            var l = max;
            var delta = max - min;
            if (delta === 0)
                return { h: 0, s: 0, l: l, a: this.a };
            if (max !== 0)
                s = delta / max;
            else
                return { h: 0, s: 0, l: l, a: this.a };
            if (r === max)
                h = (g - b) / delta;
            else if (g === max)
                h = 2 + (b - r) / delta;
            else
                h = 4 + (r - g) / delta;
            h *= 60;
            if (h < 0)
                h += 360;
            return { h: h, s: s, l: l, a: this.a };
        };
        Color.prototype.getHsl = function () {
            return this.getHsla();
        };
        Color.prototype.getYuva = function () {
            var y = 0.299 * this.r + 0.587 * this.g + 0.114 * this.b;
            var u = 0.492 * (this.b - y);
            var v = 0.877 * (this.r - y);
            return { y: y, u: u, v: v, a: this.a };
        };
        Color.prototype.getYuv = function () {
            return this.getYuva();
        };
        Color.prototype.initFromHsl = function (h, s, l, a) {
            if (a === void 0) { a = 1; }
            if (s <= 0) {
                this.r = l;
                this.g = l;
                this.b = l;
                return;
            }
            h /= 60;
            var i = Math.floor(h);
            var f = h - i;
            var p = l * (1 - s);
            var q = l * (1 - s * f);
            var t = l * (1 - s * (1 - f));
            if (i === 0) {
                this.r = l;
                this.g = t;
                this.b = p;
            }
            else if (i == 1) {
                this.r = q;
                this.g = l;
                this.b = p;
            }
            else if (i == 2) {
                this.r = p;
                this.g = l;
                this.b = t;
            }
            else if (i == 3) {
                this.r = p;
                this.g = q;
                this.b = l;
            }
            else if (i == 4) {
                this.r = t;
                this.g = p;
                this.b = l;
            }
            else {
                this.r = l;
                this.g = p;
                this.b = q;
            }
            if (isNaN(this.r))
                this.r = 0;
            if (isNaN(this.g))
                this.g = 0;
            if (isNaN(this.b))
                this.b = 0;
            this.a = Math.min(Math.max(a, 0), 1);
        };
        Color.prototype.initFromYuv = function (y, u, v, a) {
            if (a === void 0) { a = 1; }
            this.r = Math.max(0, Math.min(y + 1.13983 * v, 1));
            this.g = Math.max(0, Math.min(y - 0.39465 * u - 0.58060 * v, 1));
            this.b = Math.max(0, Math.min(y + 2.03211 * u, 1));
            this.a = Math.min(Math.max(a, 0), 1);
        };
        Color.prototype.initFromRgb = function (r, g, b, a) {
            if (a === void 0) { a = 1; }
            this.r = Math.min(Math.max(r, 0), 1);
            this.g = Math.min(Math.max(g, 0), 1);
            this.b = Math.min(Math.max(b, 0), 1);
            this.a = Math.min(Math.max(a, 0), 1);
        };
        Color.prototype.toString = function () {
            return 'color(' + this.r.toFixed(4) + ', ' + this.g.toFixed(4) + ', ' + this.b.toFixed(4) + ', ' + this.a.toFixed(4) + ')';
        };
        Color.parse = function (color) {
            var r;
            var g;
            var b;
            var a;
            if (typeof (color) == 'string') {
                if (color in Color.knownColor)
                    color = Color.knownColor[color];
                var res = void 0;
                if ((res = color.match(/^\s*rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+\.?\d*)\s*\)\s*$/)) != undefined) {
                    r = parseInt(res[1]) / 255;
                    g = parseInt(res[2]) / 255;
                    b = parseInt(res[3]) / 255;
                    a = parseFloat(res[4]);
                    return new Color(r, g, b, a);
                }
                else if ((res = color.match(/^\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/)) != undefined) {
                    r = parseInt(res[1]) / 255;
                    g = parseInt(res[2]) / 255;
                    b = parseInt(res[3]) / 255;
                    return new Color(r, g, b);
                }
                else if (color.indexOf('#') === 0) {
                    if (color.length == 7) {
                        r = parseInt(color.substr(1, 2), 16) / 255;
                        g = parseInt(color.substr(3, 2), 16) / 255;
                        b = parseInt(color.substr(5, 2), 16) / 255;
                        return new Color(r, g, b);
                    }
                    else if (color.length == 4) {
                        r = parseInt(color.substr(1, 1), 16) / 15;
                        g = parseInt(color.substr(2, 1), 16) / 15;
                        b = parseInt(color.substr(3, 1), 16) / 15;
                        return new Color(r, g, b);
                    }
                }
            }
            throw ('Unknown color format (' + color + ')');
        };
        Color.create = function (color) {
            if (color instanceof Color)
                return color;
            else
                return Color.parse(color);
        };
        Color.createFromRgb = function (r, g, b, a) {
            if (a === void 0) { a = 1; }
            var color = new Color();
            color.initFromRgb(r, g, b, a);
            return color;
        };
        Color.createFromYuv = function (y, u, v, a) {
            if (a === void 0) { a = 1; }
            var color = new Color();
            color.initFromYuv(y, u, v, a);
            return color;
        };
        Color.createFromHsl = function (h, s, l, a) {
            if (a === void 0) { a = 1; }
            var color = new Color();
            color.initFromHsl(h, s, l, a);
            return color;
        };
        Color.knownColor = {
            white: '#ffffff',
            black: '#000000',
            red: '#ff0000',
            green: '#008000',
            blue: '#0000ff',
            lightblue: '#add8e6',
            lightgreen: '#90ee90',
            orange: '#ffa500',
            purple: '#800080',
            lightgray: '#d3d3d3',
            darkgray: '#a9a9a9',
            pink: '#ffc0cb',
            brown: '#a52a2a'
        };
        return Color;
    }(Core.Object));
    Ui.Color = Color;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var LinearGradient = (function (_super) {
        __extends(LinearGradient, _super);
        function LinearGradient(stops, orientation) {
            if (orientation === void 0) { orientation = 'vertical'; }
            var _this = _super.call(this) || this;
            _this.image = undefined;
            if (stops !== undefined)
                _this.stops = stops;
            else
                _this.stops = [
                    { offset: 0, color: new Ui.Color(1, 1, 1, 1) },
                    { offset: 1, color: new Ui.Color(0, 0, 0, 1) }
                ];
            _this.orientation = orientation;
            for (var i = 0; i < _this.stops.length; i++)
                _this.stops[i].color = Ui.Color.create(_this.stops[i].color);
            return _this;
        }
        LinearGradient.prototype.getBackgroundImage = function () {
            if (this.image !== undefined)
                return this.image;
            this.image = this.getCssGradient();
            return this.image;
        };
        LinearGradient.prototype.getSVGGradient = function () {
            var gradient = document.createElementNS(svgNS, 'linearGradient');
            gradient.setAttributeNS(null, 'gradientUnits', 'objectBoundingBox');
            gradient.setAttributeNS(null, 'x1', 0);
            gradient.setAttributeNS(null, 'y1', 0);
            if (this.orientation == 'vertical') {
                gradient.setAttributeNS(null, 'x2', 0);
                gradient.setAttributeNS(null, 'y2', 1);
            }
            else {
                gradient.setAttributeNS(null, 'x2', 1);
                gradient.setAttributeNS(null, 'y2', 0);
            }
            for (var i = 0; i < this.stops.length; i++) {
                var stop_1 = this.stops[i];
                var svgStop = document.createElementNS(svgNS, 'stop');
                svgStop.setAttributeNS(null, 'offset', stop_1.offset);
                svgStop.style.stopColor = stop_1.color.getCssHtml();
                svgStop.style.stopOpacity = stop_1.color.getRgba().a;
                gradient.appendChild(svgStop);
            }
            return gradient;
        };
        LinearGradient.prototype.getCanvasGradient = function (context, width, height) {
            var gradient;
            if (this.orientation == 'vertical')
                gradient = context.createLinearGradient(0, 0, 0, height);
            else
                gradient = context.createLinearGradient(0, 0, width, 0);
            for (var i = 0; i < this.stops.length; i++) {
                var stop_2 = this.stops[i];
                gradient.addColorStop(stop_2.offset, stop_2.color.getCssRgba());
            }
            return gradient;
        };
        LinearGradient.prototype.getCssGradient = function () {
            var image = 'linear-gradient(';
            if (this.orientation == 'vertical')
                image += 'to bottom';
            else
                image += 'to right';
            for (var i = 0; i < this.stops.length; i++) {
                var stop_3 = this.stops[i];
                image += ", " + Ui.Color.create(stop_3.color).getCssRgba() + " " + Math.round(stop_3.offset * 100) + "%";
            }
            image += ')';
            return image;
        };
        return LinearGradient;
    }(Core.Object));
    Ui.LinearGradient = LinearGradient;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Element = (function (_super) {
        __extends(Element, _super);
        function Element(init) {
            var _this = _super.call(this) || this;
            _this._marginTop = 0;
            _this._marginBottom = 0;
            _this._marginLeft = 0;
            _this._marginRight = 0;
            _this._resizable = false;
            _this.collapse = false;
            _this.measureValid = false;
            _this.measureConstraintPixelRatio = 1;
            _this.measureConstraintWidth = 0;
            _this.measureConstraintHeight = 0;
            _this._measureWidth = 0;
            _this._measureHeight = 0;
            _this.arrangeValid = false;
            _this.arrangeX = 0;
            _this.arrangeY = 0;
            _this.arrangeWidth = 0;
            _this.arrangeHeight = 0;
            _this.arrangePixelRatio = 1;
            _this.drawValid = true;
            _this.layoutValid = true;
            _this._layoutX = 0;
            _this._layoutY = 0;
            _this._layoutWidth = 0;
            _this._layoutHeight = 0;
            _this._isLoaded = false;
            _this._verticalAlign = 'stretch';
            _this._horizontalAlign = 'stretch';
            _this._clipToBounds = false;
            _this._eventsHidden = false;
            _this._focusable = false;
            _this._hasFocus = false;
            _this.isMouseFocus = false;
            _this.isMouseDownFocus = false;
            _this._selectable = false;
            _this.transformOriginX = 0.5;
            _this.transformOriginY = 0.5;
            _this.transformOriginAbsolute = false;
            _this._opacity = 1;
            _this.parentOpacity = 1;
            _this.focused = new Core.Events();
            _this.blurred = new Core.Events();
            _this.loaded = new Core.Events();
            _this.unloaded = new Core.Events();
            _this.enabled = new Core.Events();
            _this.disabled = new Core.Events();
            _this.visible = new Core.Events();
            _this.hidden = new Core.Events();
            _this.ptrdowned = new Core.Events();
            _this.ptrmoved = new Core.Events();
            _this.ptrupped = new Core.Events();
            _this.ptrcanceled = new Core.Events();
            _this.wheelchanged = new Core.Events();
            _this.dragover = new Core.Events();
            _this.onMouseDownFocus = function (event) {
                _this.isMouseDownFocus = true;
                window.addEventListener('mouseup', _this.onMouseUpFocus, true);
            };
            _this.onMouseUpFocus = function (event) {
                _this.isMouseDownFocus = false;
                window.removeEventListener('mouseup', _this.onMouseUpFocus);
            };
            _this.drawing = _this.renderDrawing();
            if (DEBUG) {
                _this.drawing.setAttribute('eraClass', _this.getClassName());
                _this.drawing.data = _this;
            }
            _this.drawing.style.position = 'absolute';
            _this.drawing.style.left = '0px';
            _this.drawing.style.top = '0px';
            _this.drawing.style.width = '0px';
            _this.drawing.style.height = '0px';
            _this.drawing.style.visibility = 'hidden';
            _this.drawing.style.outline = 'none';
            _this.drawing.style.transformOrigin = '0 0';
            if (Core.Navigator.isIE)
                _this.drawing.style.msTransformOrigin = '0 0';
            else if (Core.Navigator.isGecko)
                _this.drawing.style.MozTransformOrigin = '0 0';
            else if (Core.Navigator.isWebkit)
                _this.drawing.style.webkitTransformOrigin = '0 0';
            _this.drawing.addEventListener('focus', function (e) { return _this.onFocus(e); });
            _this.drawing.addEventListener('blur', function (e) { return _this.onBlur(e); });
            _this.selectable = false;
            if (init) {
                if (init.selectable !== undefined)
                    _this.selectable = init.selectable;
                if (init.id !== undefined)
                    _this.id = init.id;
                if (init.focusable !== undefined)
                    _this.focusable = init.focusable;
                if (init.resizable !== undefined)
                    _this.resizable = init.resizable;
                if (init.role !== undefined)
                    _this.role = init.role;
                if (init.width !== undefined)
                    _this.width = init.width;
                if (init.height !== undefined)
                    _this.height = init.height;
                if (init.maxWidth !== undefined)
                    _this.maxWidth = init.maxWidth;
                if (init.maxHeight !== undefined)
                    _this.maxHeight = init.maxHeight;
                if (init.verticalAlign !== undefined)
                    _this.verticalAlign = init.verticalAlign;
                if (init.horizontalAlign !== undefined)
                    _this.horizontalAlign = init.horizontalAlign;
                if (init.clipToBounds !== undefined)
                    _this.clipToBounds = init.clipToBounds;
                if (init.margin !== undefined)
                    _this.margin = init.margin;
                if (init.marginTop !== undefined)
                    _this.marginTop = init.marginTop;
                if (init.marginBottom !== undefined)
                    _this.marginBottom = init.marginBottom;
                if (init.marginLeft !== undefined)
                    _this.marginLeft = init.marginLeft;
                if (init.marginRight !== undefined)
                    _this.marginRight = init.marginRight;
                if (init.opacity !== undefined)
                    _this.opacity = init.opacity;
                if (init.transform !== undefined)
                    _this.transform = init.transform;
                if (init.eventsHidden !== undefined)
                    _this.eventsHidden = init.eventsHidden;
                if (init.style !== undefined)
                    _this.style = init.style;
                if (init.isDisabled !== undefined)
                    _this.isDisabled = init.isDisabled;
                if (init.isVisible !== undefined)
                    _this.isVisible = init.isVisible;
                if (init.onfocused)
                    _this.focused.connect(init.onfocused);
                if (init.onblurred)
                    _this.blurred.connect(init.onblurred);
                if (init.onloaded)
                    _this.loaded.connect(init.onloaded);
                if (init.onunloaded)
                    _this.unloaded.connect(init.onunloaded);
            }
            return _this;
        }
        Object.defineProperty(Element.prototype, "onfocused", {
            set: function (value) { this.focused.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onblurred", {
            set: function (value) { this.blurred.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onloaded", {
            set: function (value) { this.loaded.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onunloaded", {
            set: function (value) { this.unloaded.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onenabled", {
            set: function (value) { this.enabled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "ondisabled", {
            set: function (value) { this.disabled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onvisible", {
            set: function (value) { this.visible.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onhidden", {
            set: function (value) { this.hidden.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onptrdowned", {
            set: function (value) { this.ptrdowned.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onptrmoved", {
            set: function (value) { this.ptrmoved.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onptrupped", {
            set: function (value) { this.ptrupped.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onptrcanceled", {
            set: function (value) { this.ptrcanceled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "onwheelchanged", {
            set: function (value) { this.wheelchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "ondragover", {
            set: function (value) { this.dragover.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "selectable", {
            get: function () {
                return this._selectable;
            },
            set: function (selectable) {
                this._selectable = selectable;
                this.drawing.selectable = selectable;
                Element.setSelectable(this.drawing, selectable);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "resizable", {
            get: function () {
                return this._resizable;
            },
            set: function (value) {
                if (this._resizable != value) {
                    this._resizable = value;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "layoutX", {
            get: function () {
                return this._layoutX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "layoutY", {
            get: function () {
                return this._layoutY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "layoutWidth", {
            get: function () {
                return this._layoutWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "layoutHeight", {
            get: function () {
                return this._layoutHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "id", {
            get: function () {
                return this.drawing.getAttribute('id');
            },
            set: function (id) {
                this.drawing.setAttribute('id', id);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "focusable", {
            get: function () {
                return this._focusable;
            },
            set: function (focusable) {
                if (this._focusable !== focusable) {
                    this._focusable = focusable;
                    if (focusable && !this.isDisabled) {
                        this.drawing.tabIndex = 0;
                        this.drawing.addEventListener('mousedown', this.onMouseDownFocus, true);
                    }
                    else {
                        this.drawing.removeEventListener('mousedown', this.onMouseDownFocus);
                        this.drawing.removeAttribute('tabIndex');
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.getIsMouseFocus = function () {
            return this.isMouseFocus;
        };
        Object.defineProperty(Element.prototype, "role", {
            set: function (role) {
                if ('setAttributeNS' in this.drawing) {
                    if (role === undefined) {
                        if (this.drawing.hasAttributeNS('http://www.w3.org/2005/07/aaa', 'role'))
                            this.drawing.removeAttributeNS('http://www.w3.org/2005/07/aaa', 'role');
                    }
                    else
                        this.drawing.setAttributeNS('http://www.w3.org/2005/07/aaa', 'role', role);
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.measure = function (width, height) {
            if (!this._isLoaded)
                return { width: 0, height: 0 };
            if (this.collapse) {
                this.measureValid = true;
                return { width: 0, height: 0 };
            }
            if (this.measureValid && (this.measureConstraintWidth === width) && (this.measureConstraintHeight === height) &&
                (this.measureConstraintPixelRatio == (window.devicePixelRatio || 1)))
                return { width: this._measureWidth, height: this._measureHeight };
            this.measureConstraintPixelRatio = (window.devicePixelRatio || 1);
            this.measureConstraintWidth = width;
            this.measureConstraintHeight = height;
            var marginLeft = this.marginLeft;
            var marginRight = this.marginRight;
            var marginTop = this.marginTop;
            var marginBottom = this.marginBottom;
            var constraintWidth = Math.max(width - (marginLeft + marginRight), 0);
            var constraintHeight = Math.max(height - (marginTop + marginBottom), 0);
            if (this._maxWidth !== undefined)
                constraintWidth = Math.min(constraintWidth, this._maxWidth - (marginLeft + marginRight));
            if (this._maxHeight !== undefined)
                constraintHeight = Math.min(constraintHeight, this._maxHeight - (marginTop + marginBottom));
            if (this._horizontalAlign !== 'stretch')
                constraintWidth = 0;
            if (this._verticalAlign !== 'stretch')
                constraintHeight = 0;
            if (this._width !== undefined)
                constraintWidth = Math.max(this._width, constraintWidth);
            if (this._height !== undefined)
                constraintHeight = Math.max(this._height, constraintHeight);
            this.measureValid = true;
            var size = this.measureCore(constraintWidth, constraintHeight);
            if ((this._width !== undefined) && (size.width < this._width))
                this._measureWidth = this._width + marginLeft + marginRight;
            else
                this._measureWidth = Math.ceil(size.width) + marginLeft + marginRight;
            if ((this._height !== undefined) && (size.height < this._height))
                this._measureHeight = this._height + marginTop + marginBottom;
            else
                this._measureHeight = Math.ceil(size.height) + marginTop + marginBottom;
            return { width: this._measureWidth, height: this._measureHeight };
        };
        Element.prototype.measureCore = function (width, height) {
            return { width: 0, height: 0 };
        };
        Element.prototype.invalidateMeasure = function () {
            if (this.measureValid) {
                this.measureValid = false;
                if ((this._parent != undefined) && (this._parent.measureValid))
                    this._parent.onChildInvalidateMeasure(this, 'change');
            }
            this.invalidateArrange();
        };
        Element.prototype.invalidateLayout = function () {
            this.measureValid = false;
            this.arrangeValid = false;
            if (this.layoutValid) {
                this.layoutValid = false;
                if (Ui.App.current)
                    Ui.App.current.enqueueLayout(this);
            }
        };
        Element.prototype.onChildInvalidateMeasure = function (child, event) {
            this.invalidateMeasure();
        };
        Element.prototype.updateLayout = function (width, height) {
            this._layoutWidth = width;
            this._layoutHeight = height;
            this.layoutValid = true;
            this.layoutCore();
            this.layoutValid = this.arrangeValid && this.measureValid;
            if (!this.layoutValid)
                this.invalidateLayout();
        };
        Element.prototype.layoutCore = function () {
            this.measure(this._layoutWidth, this._layoutHeight);
            this.arrange(this._layoutX, this._layoutY, this._layoutWidth, this._layoutHeight);
        };
        Element.prototype.arrange = function (x, y, width, height) {
            if (!this._isLoaded || this.collapse)
                return;
            if (isNaN(x))
                x = 0;
            if (isNaN(y))
                y = 0;
            if (isNaN(width))
                width = 0;
            if (isNaN(height))
                height = 0;
            x = Math.round(x);
            y = Math.round(y);
            width = Math.ceil(width);
            height = Math.ceil(height);
            if (!this.arrangeValid || (this.arrangeX != x) || (this.arrangeY != y) ||
                (this.arrangeWidth != width) || (this.arrangeHeight != height) ||
                (this.arrangePixelRatio != (window.devicePixelRatio || 1))) {
                this.arrangeValid = true;
                this.arrangeX = x;
                this.arrangeY = y;
                this.arrangeWidth = width;
                this.arrangeHeight = height;
                this.arrangePixelRatio = (window.devicePixelRatio || 1);
                if (this._verticalAlign == 'top') {
                    height = this._measureHeight;
                }
                else if (this._verticalAlign == 'bottom') {
                    y += height - this._measureHeight;
                    height = this._measureHeight;
                }
                else if (this._verticalAlign == 'center') {
                    y += (height - this._measureHeight) / 2;
                    height = this._measureHeight;
                }
                else if (this._verticalAlign == 'stretch' && this._maxHeight && this._maxHeight < height) {
                    y += (height - this._maxHeight) / 2;
                    height = this._maxHeight;
                }
                if (this._horizontalAlign == 'left') {
                    width = this._measureWidth;
                }
                else if (this._horizontalAlign == 'right') {
                    x += width - this._measureWidth;
                    width = this._measureWidth;
                }
                else if (this._horizontalAlign == 'center') {
                    x += (width - this._measureWidth) / 2;
                    width = this._measureWidth;
                }
                else if (this._horizontalAlign == 'stretch' && this._maxWidth && this._maxWidth < width) {
                    x += (width - this._maxWidth) / 2;
                    width = this._maxWidth;
                }
                var marginLeft = this.marginLeft;
                var marginRight = this.marginRight;
                var marginTop = this.marginTop;
                var marginBottom = this.marginBottom;
                x += marginLeft;
                y += marginTop;
                width -= marginLeft + marginRight;
                height -= marginTop + marginBottom;
                this._layoutX = x;
                this._layoutY = y;
                this._layoutWidth = Math.max(width, 0);
                this._layoutHeight = Math.max(height, 0);
                this.drawing.style.left = Math.round(this._layoutX) + 'px';
                this.drawing.style.top = Math.round(this._layoutY) + 'px';
                if (this._transform !== undefined)
                    this.updateTransform();
                if (this._eventsHidden) {
                    this.drawing.style.width = '0px';
                    this.drawing.style.height = '0px';
                }
                else {
                    this.drawing.style.width = Math.round(this._layoutWidth) + 'px';
                    this.drawing.style.height = Math.round(this._layoutHeight) + 'px';
                }
                this.drawing.style.visibility = 'inherit';
                this.arrangeCore(this._layoutWidth, this._layoutHeight);
                if (!this.arrangeValid)
                    console.log(this + ".arrange PROBLEM. Arrange invalidated during arrange");
            }
        };
        Element.prototype.arrangeCore = function (width, height) {
        };
        Element.prototype.invalidateArrange = function () {
            if (this.arrangeValid) {
                this.arrangeValid = false;
                if (this._parent != undefined)
                    this._parent.onChildInvalidateArrange(this);
            }
        };
        Element.prototype.onChildInvalidateArrange = function (child) {
            this.invalidateArrange();
        };
        Element.prototype.draw = function () {
            this.drawCore();
            this.drawValid = true;
        };
        Element.prototype.drawCore = function () {
        };
        Element.prototype.invalidateDraw = function () {
            if (Ui.App.current === undefined)
                return;
            if (this.drawValid) {
                this.drawValid = false;
                Ui.App.current.enqueueDraw(this);
            }
        };
        Element.prototype.renderDrawing = function () {
            var div = document.createElement('div');
            div.style.boxSizing = 'border-box';
            return div;
        };
        Object.defineProperty(Element.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (width) {
                if (this._width !== width) {
                    this._width = width;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (height) {
                if (this._height !== height) {
                    this._height = height;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "maxWidth", {
            get: function () {
                return this._maxWidth;
            },
            set: function (width) {
                if (this._maxWidth !== width) {
                    this._maxWidth = width;
                    if (this._layoutWidth > this._maxWidth)
                        this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "maxHeight", {
            get: function () {
                return this._maxHeight;
            },
            set: function (height) {
                if (this._maxWidth !== height) {
                    this._maxHeight = height;
                    if (this._layoutHeight > this._maxHeight)
                        this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "verticalAlign", {
            get: function () {
                return this._verticalAlign;
            },
            set: function (align) {
                if (this._verticalAlign !== align) {
                    this._verticalAlign = align;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "horizontalAlign", {
            get: function () {
                return this._horizontalAlign;
            },
            set: function (align) {
                if (this._horizontalAlign !== align) {
                    this._horizontalAlign = align;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "clipToBounds", {
            get: function () {
                return this._clipToBounds;
            },
            set: function (clip) {
                if (this._clipToBounds !== clip) {
                    this._clipToBounds = clip;
                    if (clip)
                        this.drawing.style.overflow = 'hidden';
                    else
                        this.drawing.style.removeProperty('overflow');
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.setClipRectangle = function (x, y, width, height) {
            this.clipX = x;
            this.clipY = y;
            this.clipWidth = width;
            this.clipHeight = height;
            this.updateClipRectangle();
        };
        Element.prototype.updateClipRectangle = function () {
            if (this.clipX !== undefined) {
                var x = Math.round(this.clipX);
                var y = Math.round(this.clipY);
                var width = Math.round(this.clipWidth);
                var height = Math.round(this.clipHeight);
                this.drawing.style.clip = 'rect(' + y + 'px ' + (x + width) + 'px ' + (y + height) + 'px ' + x + 'px)';
            }
            else {
                if ('removeProperty' in this.drawing.style)
                    this.drawing.style.removeProperty('clip');
                else if ('removeAttribute' in this.drawing.style)
                    this.drawing.style.removeAttribute('clip');
            }
        };
        Object.defineProperty(Element.prototype, "margin", {
            set: function (margin) {
                this.marginTop = margin;
                this.marginBottom = margin;
                this.marginLeft = margin;
                this.marginRight = margin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "marginTop", {
            get: function () {
                return this._marginTop;
            },
            set: function (marginTop) {
                if (marginTop !== this._marginTop) {
                    this._marginTop = marginTop;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "marginBottom", {
            get: function () {
                return this._marginBottom;
            },
            set: function (marginBottom) {
                if (marginBottom !== this._marginBottom) {
                    this._marginBottom = marginBottom;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "marginLeft", {
            get: function () {
                return this._marginLeft;
            },
            set: function (marginLeft) {
                if (marginLeft !== this._marginLeft) {
                    this._marginLeft = marginLeft;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "marginRight", {
            get: function () {
                return this._marginRight;
            },
            set: function (marginRight) {
                if (marginRight !== this._marginRight) {
                    this._marginRight = marginRight;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                if (this._opacity !== opacity) {
                    this._opacity = opacity;
                    this.drawing.style.opacity = this._opacity.toString();
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.focus = function () {
            if (this._focusable) {
                try {
                    this.drawing.focus();
                }
                catch (e) { }
            }
        };
        Element.prototype.blur = function () {
            try {
                this.drawing.blur();
            }
            catch (e) { }
        };
        Object.defineProperty(Element.prototype, "transform", {
            set: function (transform) {
                if (this._transform !== transform) {
                    this._transform = transform;
                    this.updateTransform();
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.setTransformOrigin = function (x, y, absolute) {
            if (absolute === void 0) { absolute = false; }
            if ((this.transformOriginX !== x) || (this.transformOriginY !== y) || (this.transformOriginAbsolute !== absolute)) {
                this.transformOriginX = x;
                this.transformOriginY = y;
                this.transformOriginAbsolute = absolute;
                this.updateTransform();
            }
        };
        Element.prototype.getInverseLayoutTransform = function () {
            var matrix = Ui.Matrix.createTranslate(this._layoutX, this._layoutY);
            if (this._transform !== undefined) {
                var originX = this.transformOriginX * this._layoutWidth;
                var originY = this.transformOriginY * this._layoutHeight;
                matrix = matrix.translate(-originX, -originY).multiply(this._transform).translate(originX, originY);
            }
            return matrix;
        };
        Element.prototype.getLayoutTransform = function () {
            var matrix = new Ui.Matrix();
            if (this._transform !== undefined) {
                var originX = this.transformOriginX * this._layoutWidth;
                var originY = this.transformOriginY * this._layoutHeight;
                matrix = Ui.Matrix.createTranslate(-originX, -originY).
                    multiply(this._transform).
                    translate(originX, originY).
                    inverse();
            }
            return matrix.translate(-this._layoutX, -this._layoutY);
        };
        Element.prototype.transformToWindow = function () {
            return Ui.Element.transformToWindow(this);
        };
        Element.prototype.transformFromWindow = function () {
            return Ui.Element.transformFromWindow(this);
        };
        Element.prototype.transformToElement = function (element) {
            var toMatrix = this.transformToWindow();
            var fromMatrix = element.transformFromWindow();
            return toMatrix.multiply(fromMatrix);
        };
        Element.prototype.pointToWindow = function (point) {
            return point.multiply(this.transformToWindow());
        };
        Element.prototype.pointFromWindow = function (point) {
            return point.multiply(this.transformFromWindow());
        };
        Element.prototype.pointFromElement = function (element, point) {
            return this.pointFromWindow(element.pointToWindow(point));
        };
        Element.prototype.getIsInside = function (point) {
            var p = point.multiply(this.getLayoutTransform());
            if ((p.x >= 0) && (p.x <= this._layoutWidth) &&
                (p.y >= 0) && (p.y <= this._layoutHeight))
                return true;
            return false;
        };
        Object.defineProperty(Element.prototype, "eventsHidden", {
            get: function () {
                return this._eventsHidden;
            },
            set: function (eventsHidden) {
                this._eventsHidden = eventsHidden;
                this.invalidateArrange();
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.elementFromPoint = function (point) {
            if (!this._eventsHidden && this.isVisible && this.getIsInside(point))
                return this;
            else
                return undefined;
        };
        Object.defineProperty(Element.prototype, "measureWidth", {
            get: function () {
                return this.collapse ? 0 : this._measureWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "measureHeight", {
            get: function () {
                return this.collapse ? 0 : this._measureHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "isCollapsed", {
            get: function () {
                return this.collapse;
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.hide = function (collapse) {
            if (collapse === void 0) { collapse = false; }
            if ((this._visible === undefined) || this._visible) {
                var old = this.isVisible;
                this._visible = false;
                this.drawing.style.display = 'none';
                this.collapse = collapse;
                if (old)
                    this.onInternalHidden();
                if (this.collapse)
                    this.invalidateMeasure();
            }
        };
        Element.prototype.show = function () {
            if ((this._visible === undefined) || !this._visible) {
                var old = this.isVisible;
                this._visible = true;
                this.drawing.style.display = 'block';
                if (this.isVisible && !old)
                    this.onInternalVisible();
                if (this.collapse) {
                    this.collapse = false;
                    this.invalidateMeasure();
                }
            }
        };
        Object.defineProperty(Element.prototype, "isVisible", {
            get: function () {
                return ((this._parentVisible === true) && (this._visible !== false));
            },
            set: function (value) {
                if (value)
                    this.show();
                else
                    this.hide();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "parentVisible", {
            set: function (visible) {
                var old = this.isVisible;
                this._parentVisible = visible;
                if (old != this.isVisible) {
                    if (this.isVisible)
                        this.onInternalVisible();
                    else
                        this.onInternalHidden();
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.onInternalHidden = function () {
            this.onHidden();
            this.hidden.fire({ target: this });
        };
        Element.prototype.onHidden = function () {
        };
        Element.prototype.onInternalVisible = function () {
            this.onVisible();
            this.visible.fire({ target: this });
        };
        Element.prototype.checkVisible = function () {
            if (this.drawing === undefined)
                return;
            var visible = false;
            var current = this.drawing;
            while (current !== undefined) {
                if (current instanceof HTMLElement && current.style.display === 'none') {
                    visible = false;
                    break;
                }
                if (current == document.body) {
                    visible = true;
                    break;
                }
                current = current.parentNode;
            }
            if (this.isVisible !== visible)
                console.log('checkVisible expect: ' + this.isVisible + ', got: ' + visible + ' (on ' + this + ')');
        };
        Element.prototype.onVisible = function () {
        };
        Element.prototype.disable = function () {
            if ((this._disabled === undefined) || !this._disabled) {
                var old = this.isDisabled;
                this._disabled = true;
                if (!old)
                    this.onInternalDisable();
            }
        };
        Element.prototype.enable = function () {
            if ((this._disabled === undefined) || this._disabled) {
                var old = this.isDisabled;
                this._disabled = false;
                if (old && !this.isDisabled)
                    this.onInternalEnable();
            }
        };
        Element.prototype.setEnable = function (enable) {
            if (enable)
                this.enable();
            else
                this.disable();
        };
        Object.defineProperty(Element.prototype, "isDisabled", {
            get: function () {
                if ((this._disabled !== undefined) && (this._disabled === true))
                    return true;
                if ((this.parentDisabled !== undefined) && (this.parentDisabled === true))
                    return true;
                return false;
            },
            set: function (disabled) {
                if (disabled)
                    this.disable();
                else
                    this.enable();
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.setParentDisabled = function (disabled) {
            var old = this.isDisabled;
            this.parentDisabled = disabled;
            if (old !== this.isDisabled) {
                if (this.isDisabled)
                    this.onInternalDisable();
                else
                    this.onInternalEnable();
            }
        };
        Element.prototype.onInternalDisable = function () {
            if (this._focusable) {
                this.drawing.tabIndex = -1;
                if (this._hasFocus)
                    this.blur();
            }
            this.onDisable();
            this.disabled.fire({ target: this });
        };
        Element.prototype.onDisable = function () {
        };
        Element.prototype.onInternalEnable = function () {
            if (this._focusable)
                this.drawing.tabIndex = 0;
            this.onEnable();
            this.enabled.fire({ target: this });
        };
        Element.prototype.onEnable = function () {
        };
        Element.prototype.containSubStyle = function (style) {
            return style['types'] != undefined && style['types'] instanceof Array;
        };
        Element.prototype.fusionStyle = function (dst, src) {
            if (src['types'] == undefined || !(src['types'] instanceof Array))
                return;
            var mergeTypes = dst['types'] == undefined ? [] : dst['types'].slice();
            var pos = mergeTypes.findIndex(function (t) { return t.types; });
            if (pos != -1)
                mergeTypes.splice(pos, 1);
            for (var i = 0; i < src['types'].length; i++) {
                var srcStyle = src['types'][i];
                var dstStyle = this.getClassStyle(dst, srcStyle['type']);
                if (dstStyle != undefined) {
                    var mergeStyle = {};
                    for (var prop in dstStyle)
                        mergeStyle[prop] = dstStyle[prop];
                    for (var prop in srcStyle)
                        mergeStyle[prop] = srcStyle[prop];
                    var pos_1 = mergeTypes.indexOf(dstStyle);
                    if (pos_1 != -1)
                        mergeTypes.splice(pos_1, 1);
                    mergeTypes.push(mergeStyle);
                }
                else
                    mergeTypes.push(srcStyle);
            }
            dst['types'] = mergeTypes;
        };
        Element.prototype.getClassStyle = function (style, classFunc) {
            if (style['types'] != undefined && (style['types'] instanceof Array)) {
                for (var i = 0; i < style['types'].length; i++) {
                    var pStyle = style['types'][i];
                    if (pStyle.type == classFunc)
                        return pStyle;
                }
            }
            return undefined;
        };
        Element.prototype.mergeStyles = function () {
            var current;
            var found;
            this.mergeStyle = undefined;
            if (this._parentStyle != undefined) {
                current = this.constructor;
                found = false;
                while (current != undefined) {
                    var classStyle = this.getClassStyle(this._parentStyle, current);
                    if (classStyle != undefined && this.containSubStyle(classStyle)) {
                        if (this.mergeStyle == undefined)
                            this.mergeStyle = Core.Util.clone(this._parentStyle);
                        this.fusionStyle(this.mergeStyle, classStyle);
                        this.mergeStyle['types'].push(classStyle);
                        found = true;
                        break;
                    }
                    current = Object.getPrototypeOf(current.prototype);
                    if (current != null)
                        current = current.constructor;
                }
                if (!found)
                    this.mergeStyle = this._parentStyle;
            }
            if (this._style != undefined) {
                if (this.mergeStyle != undefined) {
                    this.mergeStyle = Core.Util.clone(this.mergeStyle);
                    this.fusionStyle(this.mergeStyle, this._style);
                    current = this.constructor;
                    while (current != undefined) {
                        var classStyle = this.getClassStyle(this._style, current);
                        if (classStyle != undefined && this.containSubStyle(classStyle)) {
                            this.fusionStyle(this.mergeStyle, classStyle);
                            break;
                        }
                        current = Object.getPrototypeOf(current.prototype);
                        if (current != null)
                            current = current.constructor;
                    }
                }
                else {
                    current = this.constructor;
                    found = false;
                    while (current != undefined) {
                        var classStyle = this.getClassStyle(this._style, current);
                        if (classStyle != undefined) {
                            if (this.mergeStyle == undefined)
                                this.mergeStyle = Core.Util.clone(this._style);
                            this.fusionStyle(this.mergeStyle, classStyle);
                            found = true;
                            break;
                        }
                        current = Object.getPrototypeOf(current.prototype);
                        if (current != null)
                            current = current.constructor;
                    }
                    if (!found)
                        this.mergeStyle = this._style;
                }
            }
        };
        Element.prototype.getIsChildOf = function (parent) {
            var current = this;
            while (current != undefined) {
                if (current === parent)
                    return true;
                current = current.parent;
            }
            return false;
        };
        Object.defineProperty(Element.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            set: function (parent) {
                this._parent = parent;
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.getParentByClass = function (classFunc) {
            var current = this.parent;
            while (current != undefined) {
                if (current instanceof classFunc)
                    return current;
                current = current.parent;
            }
            return undefined;
        };
        Element.prototype.setParentStyle = function (parentStyle) {
            if (this._parentStyle !== parentStyle)
                this._parentStyle = parentStyle;
            this.mergeStyles();
            this.onInternalStyleChange();
        };
        Object.defineProperty(Element.prototype, "style", {
            set: function (style) {
                this._style = style;
                this.mergeStyles();
                this.onInternalStyleChange();
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.setStyleProperty = function (property, value) {
            if (this._style === undefined)
                this._style = {};
            this._style[property] = value;
            this.mergeStyles();
            this.onInternalStyleChange();
        };
        Element.prototype.getStyleProperty = function (property) {
            var current;
            if (this._style != undefined && this._style[property] != undefined)
                return this._style[property];
            if (this.mergeStyle != undefined) {
                current = this.constructor;
                while (current != undefined) {
                    if (this.mergeStyle['types'] != undefined && (this.mergeStyle['types'] instanceof Array)) {
                        var classStyle = undefined;
                        for (var i = 0; classStyle == undefined && i < this.mergeStyle['types'].length; i++) {
                            var pStyle = this.mergeStyle['types'][i];
                            if (pStyle.type == current)
                                classStyle = pStyle;
                        }
                        if (classStyle != undefined && classStyle[property] != undefined)
                            return classStyle[property];
                    }
                    current = Object.getPrototypeOf(current.prototype);
                    if (current != null)
                        current = current.constructor;
                }
            }
            current = this.constructor;
            while (current != undefined) {
                if (('style' in current) && (property in current.style))
                    return current.style[property];
                current = Object.getPrototypeOf(current);
            }
            return undefined;
        };
        Element.prototype.onInternalStyleChange = function () {
            if (!this._isLoaded)
                return;
            this.onStyleChange();
        };
        Element.prototype.onStyleChange = function () {
        };
        Object.defineProperty(Element.prototype, "hasFocus", {
            get: function () {
                return this._hasFocus;
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.scrollIntoView = function () {
            this.onScrollIntoView(this);
        };
        Element.prototype.onScrollIntoView = function (el) {
            if (this._parent != undefined)
                this._parent.onScrollIntoView(el);
        };
        Element.prototype.get = function (name) {
            return (this.name == name) ? this : undefined;
        };
        Object.defineProperty(Element.prototype, "isLoaded", {
            get: function () {
                return this._isLoaded;
            },
            set: function (isLoaded) {
                if (this._isLoaded !== isLoaded) {
                    this._isLoaded = isLoaded;
                    if (isLoaded)
                        this.onLoad();
                    else
                        this.onUnload();
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype.onFocus = function (event) {
            if (!this._hasFocus && this._focusable && !this.isDisabled) {
                this._hasFocus = true;
                this.isMouseFocus = this.isMouseDownFocus;
                this.focused.fire({ target: this });
            }
        };
        Element.prototype.onBlur = function (event) {
            if (this._hasFocus) {
                this.isMouseFocus = false;
                this._hasFocus = false;
                this.blurred.fire({ target: this });
            }
        };
        Element.prototype.updateTransform = function () {
            if (this._transform !== undefined) {
                var matrix = this._transform;
                var x = this.transformOriginX;
                var y = this.transformOriginY;
                if (!this.transformOriginAbsolute) {
                    x *= this._layoutWidth;
                    y *= this._layoutHeight;
                }
                if ((x !== 0) || (y !== 0))
                    matrix = Ui.Matrix.createTranslate(x, y).multiply(this._transform).translate(-x, -y);
                this.drawing.style.transform = matrix.toString();
                if (Core.Navigator.isIE)
                    this.drawing.style.msTransform = matrix.toString();
            }
            else {
                if ('removeProperty' in this.drawing.style)
                    this.drawing.style.removeProperty('transform');
                if (Core.Navigator.isIE && ('removeProperty' in this.drawing.style))
                    this.drawing.style.removeProperty('-ms-transform');
            }
        };
        Element.prototype.setAnimClock = function (clock) {
            var _this = this;
            if (this.animClock != undefined)
                this.animClock.stop();
            this.animClock = clock;
            if (clock != undefined)
                clock.completed.connect(function () { return _this.onAnimClockComplete(); });
        };
        Element.prototype.onAnimClockComplete = function () {
            this.animClock = undefined;
        };
        Element.prototype.onLoad = function () {
            if (this._parent != undefined) {
                this.setParentStyle(this._parent.mergeStyle);
                this.setParentDisabled(this._parent.isDisabled);
                this.parentVisible = this._parent.isVisible;
            }
            this.loaded.fire({ target: this });
        };
        Element.prototype.onUnload = function () {
            if (this.animClock != undefined) {
                this.animClock.stop();
                this.animClock = undefined;
            }
            this.unloaded.fire({ target: this });
        };
        Element.transformToWindow = function (element) {
            var matrix = new Ui.Matrix();
            var current = element;
            while (current != undefined) {
                matrix = current.getInverseLayoutTransform().multiply(matrix);
                current = current._parent;
            }
            return matrix;
        };
        Element.transformFromWindow = function (element) {
            return Ui.Element.transformToWindow(element).inverse();
        };
        Element.elementFromPoint = function (point) {
            return Ui.App.current.elementFromPoint(point);
        };
        Element.getIsDrawingChildOf = function (drawing, parent) {
            var current = drawing;
            while (current != undefined) {
                if (current === parent)
                    return true;
                current = current.offsetParent;
            }
            return false;
        };
        Element.setSelectable = function (drawing, selectable) {
            drawing.selectable = selectable;
            if (selectable) {
                drawing.style.cursor = 'text';
                drawing.style.userSelect = 'text';
                if (Core.Navigator.isWebkit)
                    drawing.style.webkitUserSelect = 'text';
                else if (Core.Navigator.isGecko)
                    drawing.style.MozUserSelect = 'text';
                else if (Core.Navigator.isIE)
                    drawing.style.msUserSelect = 'element';
            }
            else {
                drawing.style.cursor = 'inherit';
                drawing.style.userSelect = 'none';
                if (Core.Navigator.isWebkit)
                    drawing.style.webkitUserSelect = 'none';
                else if (Core.Navigator.isGecko)
                    drawing.style.MozUserSelect = 'none';
                else if (Core.Navigator.isIE)
                    drawing.style.msUserSelect = 'none';
            }
        };
        return Element;
    }(Core.Object));
    Ui.Element = Element;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Container = (function (_super) {
        __extends(Container, _super);
        function Container(init) {
            var _this = _super.call(this, init) || this;
            _this._containerDrawing = undefined;
            _this._children = [];
            if (_this._containerDrawing === undefined)
                _this._containerDrawing = _this.drawing;
            return _this;
        }
        Object.defineProperty(Container.prototype, "containerDrawing", {
            get: function () {
                return this._containerDrawing;
            },
            set: function (containerDrawing) {
                this._containerDrawing = containerDrawing;
            },
            enumerable: true,
            configurable: true
        });
        Container.prototype.appendChild = function (child) {
            child.parent = this;
            this._children.push(child);
            this._containerDrawing.appendChild(child.drawing);
            child.isLoaded = this.isLoaded;
            child.parentVisible = this.isVisible;
            child.parentDisabled = this.isDisabled;
            this.onChildInvalidateMeasure(child, 'add');
        };
        Container.prototype.prependChild = function (child) {
            child.parent = this;
            this._children.unshift(child);
            if (this._containerDrawing.firstChild !== undefined)
                this._containerDrawing.insertBefore(child.drawing, this._containerDrawing.firstChild);
            else
                this._containerDrawing.appendChild(child.drawing);
            child.isLoaded = this.isLoaded;
            child.parentVisible = this.isVisible;
            child.parentDisabled = this.isDisabled;
            this.onChildInvalidateMeasure(child, 'add');
        };
        Container.prototype.removeChild = function (child) {
            if (child == undefined)
                return;
            child.parent = undefined;
            if (child.drawing != undefined && child.drawing.parentNode == this._containerDrawing)
                this._containerDrawing.removeChild(child.drawing);
            var i = 0;
            while ((i < this._children.length) && (this._children[i] !== child)) {
                i++;
            }
            if (i < this._children.length)
                this._children.splice(i, 1);
            child.isLoaded = false;
            child.parentVisible = false;
            this.onChildInvalidateMeasure(child, 'remove');
        };
        Container.prototype.insertChildAt = function (child, position) {
            position = Math.max(0, Math.min(position, this._children.length));
            child.parent = this;
            this._children.splice(position, 0, child);
            if ((this._containerDrawing.firstChild !== undefined) && (position < this._children.length - 1))
                this._containerDrawing.insertBefore(child.drawing, this._containerDrawing.childNodes[position]);
            else
                this._containerDrawing.appendChild(child.drawing);
            child.isLoaded = this.isLoaded;
            child.parentVisible = this.isVisible;
            child.parentDisabled = this.isDisabled;
            this.onChildInvalidateMeasure(child, 'add');
        };
        Container.prototype.insertChildBefore = function (child, beforeChild) {
            this.insertChildAt(child, this.getChildPosition(beforeChild));
        };
        Container.prototype.moveChildAt = function (child, position) {
            if (position < 0)
                position = this._children.length + position;
            if (position < 0)
                position = 0;
            if (position >= this._children.length)
                position = this._children.length;
            var i = 0;
            while ((i < this._children.length) && (this._children[i] !== child)) {
                i++;
            }
            if (i < this._children.length) {
                this._children.splice(i, 1);
                this._children.splice(position, 0, child);
                this._containerDrawing.removeChild(child.drawing);
                if ((this._containerDrawing.firstChild !== undefined) && (position < this._containerDrawing.childNodes.length))
                    this._containerDrawing.insertBefore(child.drawing, this._containerDrawing.childNodes[position]);
                else
                    this._containerDrawing.appendChild(child.drawing);
            }
            this.onChildInvalidateMeasure(child, 'move');
        };
        Object.defineProperty(Container.prototype, "children", {
            get: function () {
                return this._children;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Container.prototype, "firstChild", {
            get: function () {
                if (this._children.length > 0)
                    return this._children[0];
                else
                    return undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Container.prototype, "lastChild", {
            get: function () {
                if (this._children.length > 0)
                    return this._children[this._children.length - 1];
                else
                    return undefined;
            },
            enumerable: true,
            configurable: true
        });
        Container.prototype.getChildPosition = function (child) {
            for (var i = 0; i < this._children.length; i++) {
                if (this._children[i] === child) {
                    return i;
                }
            }
            return -1;
        };
        Container.prototype.hasChild = function (child) {
            return this.getChildPosition(child) !== -1;
        };
        Container.prototype.clear = function () {
            while (this.firstChild !== undefined) {
                this.removeChild(this.firstChild);
            }
        };
        Container.prototype.get = function (name) {
            if (this.name == name)
                return this;
            else {
                for (var i = 0; i < this._children.length; i++) {
                    var child = this._children[i];
                    var res = child.get(name);
                    if (res != undefined)
                        return res;
                }
            }
            return undefined;
        };
        Container.prototype.elementFromPoint = function (point) {
            if (!this.isVisible)
                return undefined;
            var p = point.multiply(this.getLayoutTransform());
            var isInside = ((p.x >= 0) && (p.x <= this.layoutWidth) &&
                (p.y >= 0) && (p.y <= this.layoutHeight));
            if (this.clipToBounds && !isInside)
                return undefined;
            if (this._children != undefined) {
                for (var i = this._children.length - 1; i >= 0; i--) {
                    var found = this._children[i].elementFromPoint(p);
                    if (found != undefined)
                        return found;
                }
            }
            if (!this.eventsHidden && isInside)
                return this;
            return undefined;
        };
        Container.prototype.onLoad = function () {
            _super.prototype.onLoad.call(this);
            for (var i = 0; i < this._children.length; i++)
                this._children[i].isLoaded = this.isLoaded;
        };
        Container.prototype.onUnload = function () {
            _super.prototype.onUnload.call(this);
            for (var i = 0; i < this._children.length; i++)
                this._children[i].isLoaded = this.isLoaded;
        };
        Container.prototype.onInternalStyleChange = function () {
            if (!this.isLoaded)
                return;
            this.onStyleChange();
            if (this._children !== undefined) {
                for (var i = 0; i < this._children.length; i++)
                    this._children[i].setParentStyle(this.mergeStyle);
            }
        };
        Container.prototype.onInternalDisable = function () {
            _super.prototype.onInternalDisable.call(this);
            if (this._children) {
                for (var i = 0; i < this._children.length; i++)
                    this._children[i].setParentDisabled(true);
            }
        };
        Container.prototype.onInternalEnable = function () {
            _super.prototype.onInternalEnable.call(this);
            if (this._children) {
                for (var i = 0; i < this._children.length; i++)
                    this._children[i].setParentDisabled(false);
            }
        };
        Container.prototype.onInternalVisible = function () {
            _super.prototype.onInternalVisible.call(this);
            if (this._children) {
                for (var i = 0; i < this._children.length; i++)
                    this._children[i].parentVisible = true;
            }
        };
        Container.prototype.onInternalHidden = function () {
            _super.prototype.onInternalHidden.call(this);
            if (this._children) {
                for (var i = 0; i < this._children.length; i++)
                    this._children[i].parentVisible = false;
            }
        };
        return Container;
    }(Ui.Element));
    Ui.Container = Container;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var SvgParser = (function (_super) {
        __extends(SvgParser, _super);
        function SvgParser(path) {
            var _this = _super.call(this) || this;
            _this.pos = 0;
            _this.current = undefined;
            _this.value = false;
            _this.end = false;
            _this.path = path;
            return _this;
        }
        SvgParser.prototype.isEnd = function () {
            return this.end;
        };
        SvgParser.prototype.next = function () {
            this.end = this.pos >= this.path.length;
            if (!this.end) {
                while ((this.pos < this.path.length) && ((this.path[this.pos] == ' ') || (this.path[this.pos] == ',') || (this.path[this.pos] == ';')))
                    this.pos++;
                var dotseen = false;
                var eseen = false;
                this.current = '';
                var c = this.path[this.pos];
                var isCmd = (c !== 'e') && ((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z'));
                if (isCmd) {
                    this.current = this.path[this.pos++];
                    this.cmd = this.current;
                    this.value = false;
                }
                else {
                    while ((this.pos < this.path.length) && (((this.path[this.pos] >= '0') && (this.path[this.pos] <= '9')) ||
                        ((this.path[this.pos] === '-') && ((this.current.length == 0) || (this.current[this.current.length - 1] === 'e'))) ||
                        (!eseen && (this.path[this.pos] === 'e')) || (!dotseen && (this.path[this.pos] === '.')))) {
                        if (this.path[this.pos] === '.')
                            dotseen = true;
                        if (this.path[this.pos] === 'e')
                            eseen = true;
                        this.current += this.path[this.pos++];
                    }
                    this.value = true;
                    if (this.current[0] === '.')
                        this.current = '0' + this.current;
                    if ((this.current[0] === '-') && (this.current[1] === '.'))
                        this.current = '-0' + this.current.substring(1);
                    this.current = parseFloat(this.current);
                    if (isNaN(this.current))
                        throw ('bad number');
                }
            }
        };
        SvgParser.prototype.setCmd = function (cmd) {
            this.cmd = cmd;
        };
        SvgParser.prototype.getCmd = function () {
            return this.cmd;
        };
        SvgParser.prototype.getCurrent = function () {
            return this.current;
        };
        SvgParser.prototype.isCmd = function () {
            return !this.value;
        };
        SvgParser.prototype.isValue = function () {
            return this.value;
        };
        return SvgParser;
    }(Core.Object));
    Ui.SvgParser = SvgParser;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var CanvasElement = (function (_super) {
        __extends(CanvasElement, _super);
        function CanvasElement(init) {
            var _this = _super.call(this, init) || this;
            _this.dpiRatio = 1;
            _this.generateNeeded = true;
            _this.selectable = false;
            _this.canvasEngine = 'svg';
            return _this;
        }
        Object.defineProperty(CanvasElement.prototype, "canvasEngine", {
            get: function () {
                return this._canvasEngine;
            },
            set: function (value) {
                if (this._canvasEngine != value) {
                    this._canvasEngine = value;
                    this.generateNeeded = true;
                    while (this.drawing.firstChild)
                        this.drawing.removeChild(this.drawing.firstChild);
                    this._context = undefined;
                    this.svgDrawing = undefined;
                    this.canvasDrawing = undefined;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        CanvasElement.prototype.update = function () {
            if (this.generateNeeded)
                this.renderCanvasDrawing();
            if (this.canvasEngine === 'canvas') {
                this._context.clearRect(0, 0, Math.ceil(this.layoutWidth * this.dpiRatio), Math.ceil(this.layoutHeight * this.dpiRatio));
                this._context.save();
                if (this.dpiRatio !== 1)
                    this._context.scale(this.dpiRatio, this.dpiRatio);
                this.updateCanvas(this._context);
                this._context.restore();
            }
            else {
                if (this.svgDrawing !== undefined)
                    this.drawing.removeChild(this.svgDrawing);
                var svgDrawing = document.createElementNS(svgNS, 'svg');
                svgDrawing.style.position = 'absolute';
                svgDrawing.style.top = '0px';
                svgDrawing.style.left = '0px';
                svgDrawing.style.width = this.layoutWidth + 'px';
                svgDrawing.style.height = this.layoutHeight + 'px';
                svgDrawing.setAttribute('focusable', 'false');
                svgDrawing.setAttribute('draggable', 'false');
                svgDrawing.setAttribute('pointer-events', 'none');
                var ctx = new Core.SVG2DContext(svgDrawing);
                this.updateCanvas(ctx);
                this.svgDrawing = svgDrawing;
                this.svgDrawing.appendChild(ctx.getSVG());
                this.drawing.appendChild(this.svgDrawing);
            }
        };
        Object.defineProperty(CanvasElement.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        CanvasElement.prototype.updateCanvas = function (context) {
        };
        CanvasElement.prototype.renderCanvasDrawing = function () {
            if ((this.canvasEngine == 'canvas') && !Core.Navigator.supportCanvas)
                this.canvasEngine = 'svg';
            if ((this.canvasEngine == 'svg') && !Core.Navigator.supportSVG)
                this.canvasEngine = 'canvas';
            var drawing;
            var resourceDrawing;
            if (this.canvasEngine === 'canvas') {
                drawing = this.canvasDrawing = document.createElement('canvas');
                if (this.layoutWidth) {
                    drawing.setAttribute('width', Math.ceil(this.layoutWidth * this.dpiRatio).toString());
                    drawing.style.width = Math.ceil(this.layoutWidth) + 'px';
                }
                if (this.layoutHeight) {
                    drawing.setAttribute('height', Math.ceil(this.layoutHeight * this.dpiRatio).toString());
                    drawing.style.height = Math.ceil(this.layoutHeight) + 'px';
                }
                this._context = drawing.getContext('2d');
            }
            else {
                drawing = document.createElement('div');
                resourceDrawing = document.createElement('div');
                resourceDrawing.style.width = '0px';
                resourceDrawing.style.height = '0px';
                resourceDrawing.style.visibility = 'hidden';
                drawing.appendChild(resourceDrawing);
                this.containerDrawing = resourceDrawing;
                if (Core.Navigator.supportCanvas)
                    drawing.toDataURL = this.svgToDataURL.bind(this);
            }
            this.generateNeeded = false;
            this.drawing.appendChild(drawing);
        };
        CanvasElement.prototype.svgToDataURL = function () {
            var drawing = document.createElement('canvas');
            var context = drawing.getContext('2d');
            drawing.setAttribute('width', Math.ceil(this.layoutWidth).toString());
            drawing.setAttribute('height', Math.ceil(this.layoutHeight).toString());
            this.updateCanvas(context);
            return drawing.toDataURL.apply(drawing, arguments);
        };
        CanvasElement.prototype.arrangeCore = function (width, height) {
            var devicePixelRatio = window.devicePixelRatio || 1;
            var backingStoreRatio = 1;
            if (this._context !== undefined) {
                var context = this._context;
                backingStoreRatio = context.webkitBackingStorePixelRatio ||
                    context.mozBackingStorePixelRatio ||
                    context.msBackingStorePixelRatio ||
                    context.oBackingStorePixelRatio ||
                    context.backingStorePixelRatio || 1;
            }
            this.dpiRatio = devicePixelRatio / backingStoreRatio;
            if (this.canvasDrawing) {
                this.canvasDrawing.setAttribute('width', Math.ceil(width * this.dpiRatio).toString());
                this.canvasDrawing.setAttribute('height', Math.ceil(height * this.dpiRatio).toString());
                this.canvasDrawing.style.width = Math.ceil(width) + 'px';
                this.canvasDrawing.style.height = Math.ceil(height) + 'px';
            }
            if (this.isVisible && this.isLoaded)
                this.update();
        };
        CanvasElement.prototype.drawCore = function () {
            if ((this.layoutWidth !== 0) && (this.layoutHeight !== 0))
                this.update();
        };
        CanvasElement.prototype.onInternalVisible = function () {
            _super.prototype.onInternalVisible.call(this);
            this.invalidateDraw();
        };
        return CanvasElement;
    }(Ui.Container));
    Ui.CanvasElement = CanvasElement;
})(Ui || (Ui = {}));
var Core;
(function (Core) {
    var SVG2DPath = (function (_super) {
        __extends(SVG2DPath, _super);
        function SVG2DPath() {
            var _this = _super.call(this) || this;
            _this.d = undefined;
            _this.x = 0;
            _this.y = 0;
            _this.d = '';
            return _this;
        }
        SVG2DPath.prototype.moveTo = function (x, y) {
            this.d += ' M ' + x + ' ' + y;
            this.x = x;
            this.y = y;
        };
        SVG2DPath.prototype.lineTo = function (x, y) {
            this.d += ' L ' + x + ' ' + y;
            this.x = x;
            this.y = y;
        };
        SVG2DPath.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
            this.d += ' Q ' + cpx + ' ' + cpy + ' ' + x + ' ' + y;
            this.x = x;
            this.y = y;
        };
        SVG2DPath.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
            this.d += ' C ' + cp1x + ' ' + cp1y + ' ' + cp2x + ' ' + cp2y + ' ' + x + ' ' + y;
            this.x = x;
            this.y = y;
        };
        SVG2DPath.prototype.arcTo = function (x1, y1, x2, y2, radiusX, radiusY, angle) {
            var vx1 = this.x - x1;
            var vy1 = this.y - y1;
            var vx2 = x2 - x1;
            var vy2 = y2 - y1;
            var p = vx1 * vy2 - vy1 * vx2;
            if (angle === undefined) {
                angle = radiusY;
                radiusY = radiusX;
            }
            this.d += ' A ' + radiusX + ' ' + radiusY + ' ' + (angle * Math.PI / 180) + ' 0 ' + ((p < 0) ? 1 : 0) + ' ' + x2 + ' ' + y2;
            this.x = x2;
            this.y = y2;
        };
        SVG2DPath.prototype.closePath = function () {
            this.d += ' Z';
        };
        SVG2DPath.prototype.rect = function (x, y, w, h) {
            this.moveTo(x, y);
            this.lineTo(x + w, y);
            this.lineTo(x + w, y + h);
            this.lineTo(x, y + h);
        };
        SVG2DPath.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {
            this.ellipse(x, y, radius, radius, 0, startAngle, endAngle, anticlockwise);
        };
        SVG2DPath.prototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
            if ((rotation === 0) && (Math.abs(endAngle - startAngle) >= Math.PI * 2)) {
                this.moveTo(x, y + radiusY);
                if (anticlockwise) {
                    this.arcTo(x - radiusX, y + radiusY, x - radiusX, y, radiusX, radiusY, Math.PI / 2);
                    this.arcTo(x - radiusX, y - radiusY, x, y - radiusY, radiusX, radiusY, Math.PI / 2);
                    this.arcTo(x + radiusY, y - radiusY, x + radiusX, y, radiusX, radiusY, Math.PI / 2);
                    this.arcTo(x + radiusX, y + radiusY, x, y + radiusY, radiusX, radiusY, Math.PI / 2);
                }
                else {
                    this.arcTo(x + radiusX, y + radiusY, x + radiusX, y, radiusX, radiusY, Math.PI / 2);
                    this.arcTo(x + radiusX, y - radiusY, x, y - radiusY, radiusX, radiusY, Math.PI / 2);
                    this.arcTo(x - radiusX, y - radiusY, x - radiusX, y, radiusX, radiusY, Math.PI / 2);
                    this.arcTo(x - radiusX, y + radiusY, x, y + radiusY, radiusX, radiusY, Math.PI / 2);
                }
            }
            else {
                var startX = x + Math.cos(startAngle) * radiusX;
                var startY = y + Math.sin(startAngle) * radiusY;
                var endX = x + Math.cos(endAngle) * radiusX;
                var endY = y + Math.sin(endAngle) * radiusY;
                if (this.d == '')
                    this.moveTo(startX, startY);
                else
                    this.lineTo(startX, startY);
                var largeArc = (((endAngle - startAngle) + Math.PI * 2) % (Math.PI * 2)) > Math.PI;
                if (anticlockwise)
                    largeArc = !largeArc;
                this.d += ' A ' + radiusX + ' ' + radiusY + ' ' + ((endAngle - startAngle) * Math.PI / 180) + ' ' + (largeArc ? 1 : 0) + ' ' + (!anticlockwise ? 1 : 0) + ' ' + endX + ' ' + endY;
                this.x = endX;
                this.y = endY;
            }
        };
        SVG2DPath.prototype.roundRect = function (x, y, w, h, radiusTopLeft, radiusTopRight, radiusBottomRight, radiusBottomLeft, antiClockwise) {
            if (antiClockwise === true) {
                this.moveTo(x + radiusTopLeft, y);
                if (radiusTopLeft > 0)
                    this.arcTo(x, y, x, y + radiusTopLeft, radiusTopLeft, radiusTopLeft, Math.PI / 4);
                this.lineTo(x, y + h - radiusBottomLeft);
                if (radiusBottomLeft > 0)
                    this.arcTo(x, y + h, x + radiusBottomLeft, y + h, radiusBottomLeft, radiusBottomLeft, Math.PI / 4);
                this.lineTo(x + w - radiusBottomRight, y + h);
                if (radiusBottomRight > 0)
                    this.arcTo(x + w, y + h, x + w, y + h - radiusBottomRight, radiusBottomRight, radiusBottomRight, Math.PI / 4);
                this.lineTo(x + w, y + radiusTopRight);
                if (radiusTopRight > 0)
                    this.arcTo(x + w, y, x + w - radiusTopRight, y, radiusTopRight, radiusTopRight, Math.PI / 4);
            }
            else {
                this.moveTo(x, y + radiusTopLeft);
                if (radiusTopLeft > 0)
                    this.arcTo(x, y, x + radiusTopLeft, y, radiusTopLeft, radiusTopLeft, Math.PI / 4);
                this.lineTo(x + w - radiusTopRight, y);
                if (radiusTopRight > 0)
                    this.arcTo(x + w, y, x + w, y + radiusTopRight, radiusTopRight, radiusTopRight, Math.PI / 4);
                this.lineTo(x + w, y + h - radiusBottomRight);
                if (radiusBottomRight > 0)
                    this.arcTo(x + w, y + h, x + w - radiusBottomRight, y + h, radiusBottomRight, radiusBottomRight, Math.PI / 4);
                this.lineTo(x + radiusBottomLeft, y + h);
                if (radiusBottomLeft > 0)
                    this.arcTo(x, y + h, x, y + h - radiusBottomLeft, radiusBottomLeft, radiusBottomLeft, Math.PI / 4);
            }
        };
        SVG2DPath.prototype.getSVG = function () {
            var path = document.createElementNS(svgNS, 'path');
            path.setAttribute('d', this.d);
            return path;
        };
        return SVG2DPath;
    }(Core.Object));
    Core.SVG2DPath = SVG2DPath;
    var SVGGradient = (function (_super) {
        __extends(SVGGradient, _super);
        function SVGGradient(x0, y0, x1, y1) {
            var _this = _super.call(this) || this;
            _this.gradient = undefined;
            _this.id = undefined;
            _this.gradient = document.createElementNS(svgNS, 'linearGradient');
            _this.gradient.setAttributeNS(null, 'gradientUnits', 'userSpaceOnUse');
            _this.gradient.setAttributeNS(null, 'x1', x0);
            _this.gradient.setAttributeNS(null, 'y1', y0);
            _this.gradient.setAttributeNS(null, 'x2', x1);
            _this.gradient.setAttributeNS(null, 'y2', y1);
            _this.id = '_grad' + (++Core.SVGGradient.counter);
            _this.gradient.setAttributeNS(null, 'id', _this.id);
            return _this;
        }
        SVGGradient.prototype.getId = function () {
            return this.id;
        };
        SVGGradient.prototype.addColorStop = function (offset, color) {
            var svgStop = document.createElementNS(svgNS, 'stop');
            svgStop.setAttributeNS(null, 'offset', offset);
            svgStop.style.stopColor = color;
            color = Ui.Color.create(color);
            svgStop.style.stopOpacity = color.getRgba().a;
            this.gradient.appendChild(svgStop);
        };
        SVGGradient.prototype.getSVG = function () {
            return this.gradient;
        };
        SVGGradient.counter = 0;
        return SVGGradient;
    }(Core.Object));
    Core.SVGGradient = SVGGradient;
    var SVG2DContext = (function (_super) {
        __extends(SVG2DContext, _super);
        function SVG2DContext(svgElement) {
            var _this = _super.call(this) || this;
            _this.fillStyle = 'black';
            _this.strokeStyle = 'black';
            _this.lineWidth = 1;
            _this.lineDash = undefined;
            _this.globalAlpha = 1;
            _this.currentTransform = undefined;
            _this.font = 'default 10px sans-serif';
            _this.textAlign = 'start';
            _this.textBaseline = 'alphabetic';
            _this.direction = 'inherit';
            _this.clipId = undefined;
            _this.document = undefined;
            _this.currentPath = undefined;
            _this.g = undefined;
            _this.defs = undefined;
            _this.states = undefined;
            _this.document = svgElement;
            _this.g = document.createElementNS(svgNS, 'g');
            _this.currentTransform = _this.document.createSVGMatrix();
            _this.states = [];
            _this.lineDash = [];
            _this.defs = document.createElementNS(svgNS, 'defs');
            _this.g.appendChild(_this.defs);
            return _this;
        }
        SVG2DContext.prototype.beginPath = function () {
            this.currentPath = new Core.SVG2DPath();
        };
        SVG2DContext.prototype.moveTo = function (x, y) {
            this.currentPath.moveTo(x, y);
        };
        SVG2DContext.prototype.lineTo = function (x, y) {
            this.currentPath.lineTo(x, y);
        };
        SVG2DContext.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
            this.currentPath.quadraticCurveTo(cpx, cpy, x, y);
        };
        SVG2DContext.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
            this.currentPath.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
        };
        SVG2DContext.prototype.rect = function (x, y, w, h) {
            this.currentPath.rect(x, y, w, h);
        };
        SVG2DContext.prototype.arcTo = function (x1, y1, x2, y2, radius) {
            this.currentPath.arcTo(x1, y1, x2, y2, radius);
        };
        SVG2DContext.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {
            this.currentPath.arc(x, y, radius, startAngle, endAngle, anticlockwise);
        };
        SVG2DContext.prototype.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
            this.currentPath.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
        };
        SVG2DContext.prototype.roundRect = function (x, y, w, h, radiusTopLeft, radiusTopRight, radiusBottomRight, radiusBottomLeft, antiClockwise) {
            if (antiClockwise === void 0) { antiClockwise = false; }
            this.currentPath.roundRect(x, y, w, h, radiusTopLeft, radiusTopRight, radiusBottomRight, radiusBottomLeft, antiClockwise);
        };
        SVG2DContext.prototype.closePath = function () {
            this.currentPath.closePath();
        };
        SVG2DContext.prototype.fill = function () {
            var svg = this.currentPath.getSVG();
            if (this.fillStyle instanceof Core.SVGGradient) {
                var id = this.fillStyle.getId();
                this.defs.appendChild(this.fillStyle.getSVG());
                svg.style.fill = 'url(#' + id + ')';
            }
            else
                svg.style.fill = this.fillStyle;
            if (this.clipId !== undefined)
                svg.setAttributeNS(null, 'clip-path', 'url(#' + this.clipId + ')');
            svg.style.opacity = this.globalAlpha;
            svg.transform.baseVal.initialize(this.document.createSVGTransformFromMatrix(this.currentTransform));
            this.g.appendChild(svg);
        };
        SVG2DContext.prototype.stroke = function () {
            var svg = this.currentPath.getSVG();
            svg.style.stroke = this.strokeStyle;
            svg.style.fill = 'none';
            svg.style.opacity = this.globalAlpha;
            svg.style.strokeWidth = this.lineWidth;
            if (this.clipId !== undefined)
                svg.setAttributeNS(null, 'clip-path', 'url(#' + this.clipId + ')');
            if (this.lineDash.length !== 0)
                svg.setAttributeNS(null, 'stroke-dasharray', this.lineDash.join(','));
            svg.setAttributeNS(null, 'pointer-events', 'none');
            svg.transform.baseVal.initialize(this.document.createSVGTransformFromMatrix(this.currentTransform));
            this.g.appendChild(svg);
        };
        SVG2DContext.prototype.clip = function () {
            var clip = document.createElementNS(svgNS, 'clipPath');
            this.clipId = '_clip' + (++Core.SVG2DContext.counter);
            clip.setAttributeNS(null, 'id', this.clipId);
            clip.appendChild(this.currentPath.getSVG());
            this.defs.appendChild(clip);
        };
        SVG2DContext.prototype.resetClip = function () {
            this.clipId = undefined;
        };
        SVG2DContext.prototype.getLineDash = function () {
            return this.lineDash;
        };
        SVG2DContext.prototype.setLineDash = function (lineDash) {
            this.lineDash = lineDash;
        };
        SVG2DContext.prototype.drawImage = function (image, sx, sy, sw, sh, dx, dy, dw, dh) {
            var img;
            var nw = image.naturalWidth;
            var nh = image.naturalHeight;
            if (sw === undefined) {
                dx = sx;
                dy = sy;
                sx = 0;
                sy = 0;
                sw = nw;
                sh = nh;
                dw = nw;
                dh = nh;
            }
            else if (dx === undefined) {
                dx = sx;
                dy = sy;
                dw = sw;
                dh = sh;
                sx = 0;
                sy = 0;
                sw = nw;
                sh = nh;
            }
            if ((sx === 0) && (sy === 0) && (sw === nw) && (sh == nh)) {
                img = document.createElementNS(svgNS, 'image');
                if (this.clipId !== undefined)
                    img.setAttributeNS(null, 'clip-path', 'url(#' + this.clipId + ')');
                img.style.opacity = this.globalAlpha;
                img.setAttributeNS(null, 'pointer-events', 'none');
                img.href.baseVal = image.src;
                img.setAttributeNS(null, 'x', dx);
                img.setAttributeNS(null, 'y', dy);
                img.setAttributeNS(null, 'width', dw);
                img.setAttributeNS(null, 'height', dh);
                img.transform.baseVal.initialize(this.document.createSVGTransformFromMatrix(this.currentTransform));
                this.g.appendChild(img);
            }
            else {
                var pattern = document.createElementNS(svgNS, 'pattern');
                var id = '_pat' + (++Core.SVG2DContext.counter);
                pattern.setAttributeNS(null, 'id', id);
                pattern.setAttributeNS(null, 'patternUnits', 'userSpaceOnUse');
                pattern.setAttributeNS(null, 'x', dx.toString());
                pattern.setAttributeNS(null, 'y', dy.toString());
                pattern.setAttributeNS(null, 'width', dw.toString());
                pattern.setAttributeNS(null, 'height', dh.toString());
                img = document.createElementNS(svgNS, 'image');
                img.href.baseVal = image.src;
                img.setAttributeNS(null, 'x', -sx * dw / sw);
                img.setAttributeNS(null, 'y', -sy * dh / sh);
                img.setAttributeNS(null, 'width', nw * dw / sw);
                img.setAttributeNS(null, 'height', nh * dh / sh);
                pattern.appendChild(img);
                this.defs.appendChild(pattern);
                var path = document.createElementNS(svgNS, 'path');
                path.setAttributeNS(null, 'pointer-events', 'none');
                path.setAttributeNS(null, 'd', 'M ' + dx + ' ' + dy + ' L ' + (dx + dw) + ' ' + dy + ' L ' + (dx + dw) + ' ' + (dy + dh) + ' L ' + dx + ' ' + (dy + dh) + ' Z');
                path.style.fill = 'url(#' + id + ')';
                if (this.clipId !== undefined)
                    path.setAttributeNS(null, 'clip-path', 'url(#' + this.clipId + ')');
                path.style.opacity = this.globalAlpha;
                path.transform.baseVal.initialize(this.document.createSVGTransformFromMatrix(this.currentTransform));
                this.g.appendChild(path);
            }
        };
        SVG2DContext.prototype.fillText = function (text, x, y, maxWidth) {
            var t = document.createElementNS(svgNS, 'text');
            var textNode = document.createTextNode(text);
            t.appendChild(textNode);
            t.style.fill = this.fillStyle;
            t.style.opacity = this.globalAlpha;
            t.setAttributeNS(null, 'pointer-events', 'none');
            t.transform.baseVal.initialize(this.document.createSVGTransformFromMatrix(this.currentTransform));
            if (this.textAlign == 'center')
                t.style.textAnchor = 'middle';
            else if (this.textAlign == 'end')
                t.style.textAnchor = 'end';
            else if (this.textAlign == 'right')
                t.style.textAnchor = 'end';
            var font = this.parseFont(this.font);
            t.style.fontFamily = font.family;
            t.style.fontWeight = font.weight;
            t.style.fontSize = font.size.toString() + 'px';
            t.style.fontStyle = font.style;
            if (!Core.Navigator.isWebkit) {
                var fontSize = font.size;
                if (this.textBaseline === 'top')
                    y += fontSize * 0.8;
                else if (this.textBaseline === 'hanging')
                    y += fontSize * 0.8;
                else if (this.textBaseline === 'middle')
                    y += (fontSize * 0.8) / 2;
                else if (this.textBaseline === 'bottom')
                    y += fontSize * -0.2;
            }
            else {
                if (this.textBaseline === 'top')
                    t.style.alignmentBaseline = 'text-before-edge';
                else if (this.textBaseline === 'hanging')
                    t.style.alignmentBaseline = 'text-before-edge';
                else if (this.textBaseline === 'middle')
                    t.style.alignmentBaseline = 'central';
                else if (this.textBaseline === 'alphabetic')
                    t.style.alignmentBaseline = 'alphabetic';
                else if (this.textBaseline === 'ideographic')
                    t.style.alignmentBaseline = 'ideographic';
                else if (this.textBaseline === 'bottom')
                    t.style.alignmentBaseline = 'text-after-edge';
            }
            t.setAttributeNS(null, 'x', x);
            t.setAttributeNS(null, 'y', y);
            this.g.appendChild(t);
        };
        SVG2DContext.prototype.strokeText = function (text, x, y, maxWidth) {
        };
        SVG2DContext.prototype.save = function () {
            var state = {
                fillStyle: this.fillStyle,
                strokeStyle: this.strokeStyle,
                lineWidth: this.lineWidth,
                lineDash: this.lineDash,
                globalAlpha: this.globalAlpha,
                matrix: {
                    a: this.currentTransform.a, b: this.currentTransform.b,
                    c: this.currentTransform.c, d: this.currentTransform.d,
                    e: this.currentTransform.e, f: this.currentTransform.f
                },
                font: this.font,
                textAlign: this.textAlign,
                textBaseline: this.textBaseline,
                direction: this.direction,
                clipId: this.clipId
            };
            this.states.push(state);
        };
        SVG2DContext.prototype.restore = function () {
            if (this.states.length > 0) {
                var state = this.states.pop();
                this.fillStyle = state.fillStyle;
                this.strokeStyle = state.strokeStyle;
                this.lineWidth = state.lineWidth;
                this.lineDash = state.lineDash;
                this.globalAlpha = state.globalAlpha;
                this.currentTransform = this.document.createSVGMatrix();
                this.currentTransform.a = state.matrix.a;
                this.currentTransform.b = state.matrix.b;
                this.currentTransform.c = state.matrix.c;
                this.currentTransform.d = state.matrix.d;
                this.currentTransform.e = state.matrix.e;
                this.currentTransform.f = state.matrix.f;
                this.font = state.font;
                this.textAlign = state.textAlign;
                this.textBaseline = state.textBaseline;
                this.direction = state.direction;
                this.clipId = state.clipId;
            }
        };
        SVG2DContext.prototype.scale = function (x, y) {
            this.currentTransform = this.currentTransform.scaleNonUniform(x, (y === undefined) ? x : y);
        };
        SVG2DContext.prototype.rotate = function (angle) {
            this.currentTransform = this.currentTransform.rotate(angle * 180 / Math.PI);
        };
        SVG2DContext.prototype.translate = function (x, y) {
            this.currentTransform = this.currentTransform.translate(x, y);
        };
        SVG2DContext.prototype.transform = function (a, b, c, d, e, f) {
            var mulMatrix = this.document.createSVGMatrix();
            mulMatrix.a = a;
            mulMatrix.b = b;
            mulMatrix.c = c;
            mulMatrix.d = d;
            mulMatrix.e = e;
            mulMatrix.f = f;
            this.currentTransform = this.currentTransform.multiply(mulMatrix);
        };
        SVG2DContext.prototype.setTransform = function (a, b, c, d, e, f) {
            this.currentTransform.a = a;
            this.currentTransform.b = b;
            this.currentTransform.c = c;
            this.currentTransform.d = d;
            this.currentTransform.e = e;
            this.currentTransform.f = f;
        };
        SVG2DContext.prototype.resetTransform = function () {
            this.currentTransform = this.document.createSVGMatrix();
        };
        SVG2DContext.prototype.clearRect = function (x, y, w, h) {
        };
        SVG2DContext.prototype.fillRect = function (x, y, w, h) {
            this.beginPath();
            this.currentPath.rect(x, y, w, h);
            this.closePath();
            this.fill();
        };
        SVG2DContext.prototype.strokeRect = function (x, y, w, h) {
            this.beginPath();
            this.currentPath.rect(x, y, w, h);
            this.closePath();
            this.stroke();
        };
        SVG2DContext.prototype.createLinearGradient = function (x0, y0, x1, y1) {
            return new Core.SVGGradient(x0, y0, x1, y1);
        };
        SVG2DContext.prototype.measureText = function (text) {
            var font = this.parseFont(this.font);
            return Ui.Label.measureText(text, font.size, font.family, font.weight);
        };
        SVG2DContext.prototype.svgPath = function (path) {
            var x = 0;
            var y = 0;
            var x1;
            var y1;
            var x2;
            var y2;
            var x3;
            var y3;
            var beginX = 0;
            var beginY = 0;
            var parser = new Ui.SvgParser(path);
            parser.next();
            this.beginPath();
            while (!parser.isEnd()) {
                var cmd = parser.getCmd();
                if (parser.isCmd())
                    parser.next();
                if (cmd === 'm') {
                    parser.setCmd('l');
                    x += parser.getCurrent();
                    parser.next();
                    y += parser.getCurrent();
                    parser.next();
                    beginX = x;
                    beginY = y;
                    this.moveTo(x, y);
                }
                else if (cmd === 'M') {
                    parser.setCmd('L');
                    x = parser.getCurrent();
                    parser.next();
                    y = parser.getCurrent();
                    parser.next();
                    beginX = x;
                    beginY = y;
                    this.moveTo(x, y);
                }
                else if (cmd === 'l') {
                    x += parser.getCurrent();
                    parser.next();
                    y += parser.getCurrent();
                    parser.next();
                    this.lineTo(x, y);
                }
                else if (cmd === 'L') {
                    x = parser.getCurrent();
                    parser.next();
                    y = parser.getCurrent();
                    parser.next();
                    this.lineTo(x, y);
                }
                else if (cmd === 'v') {
                    y += parser.getCurrent();
                    parser.next();
                    this.lineTo(x, y);
                }
                else if (cmd === 'V') {
                    y = parser.getCurrent();
                    parser.next();
                    this.lineTo(x, y);
                }
                else if (cmd === 'h') {
                    x += parser.getCurrent();
                    parser.next();
                    this.lineTo(x, y);
                }
                else if (cmd === 'H') {
                    x = parser.getCurrent();
                    parser.next();
                    this.lineTo(x, y);
                }
                else if (cmd === 'c') {
                    x1 = x + parser.getCurrent();
                    parser.next();
                    y1 = y + parser.getCurrent();
                    parser.next();
                    x2 = x + parser.getCurrent();
                    parser.next();
                    y2 = y + parser.getCurrent();
                    parser.next();
                    x3 = x + parser.getCurrent();
                    parser.next();
                    y3 = y + parser.getCurrent();
                    parser.next();
                    x = x3;
                    y = y3;
                    this.bezierCurveTo(x1, y1, x2, y2, x, y);
                }
                else if (cmd === 'C') {
                    x1 = parser.getCurrent();
                    parser.next();
                    y1 = parser.getCurrent();
                    parser.next();
                    x2 = parser.getCurrent();
                    parser.next();
                    y2 = parser.getCurrent();
                    parser.next();
                    x3 = parser.getCurrent();
                    parser.next();
                    y3 = parser.getCurrent();
                    parser.next();
                    x = x3;
                    y = y3;
                    this.bezierCurveTo(x1, y1, x2, y2, x, y);
                }
                else if (cmd === 's') {
                    x1 = x + parser.getCurrent();
                    parser.next();
                    y1 = y + parser.getCurrent();
                    parser.next();
                    x2 = x1;
                    y2 = y1;
                    x3 = x + parser.getCurrent();
                    parser.next();
                    y3 = y + parser.getCurrent();
                    parser.next();
                    x = x3;
                    y = y3;
                    this.bezierCurveTo(x1, y1, x2, y2, x, y);
                    this.lineTo(x, y);
                }
                else if (cmd === 'S') {
                    x1 = parser.getCurrent();
                    parser.next();
                    y1 = parser.getCurrent();
                    parser.next();
                    x2 = x1;
                    y2 = y1;
                    x3 = parser.getCurrent();
                    parser.next();
                    y3 = parser.getCurrent();
                    parser.next();
                    x = x3;
                    y = y3;
                    this.bezierCurveTo(x1, y1, x2, y2, x, y);
                }
                else if (cmd === 'q') {
                    x1 = x + parser.getCurrent();
                    parser.next();
                    y1 = y + parser.getCurrent();
                    parser.next();
                    x2 = x + parser.getCurrent();
                    parser.next();
                    y2 = y + parser.getCurrent();
                    parser.next();
                    x = x2;
                    y = y2;
                    this.quadraticCurveTo(x1, y1, x, y);
                }
                else if (cmd === 'Q') {
                    x1 = parser.getCurrent();
                    parser.next();
                    y1 = parser.getCurrent();
                    parser.next();
                    x2 = parser.getCurrent();
                    parser.next();
                    y2 = parser.getCurrent();
                    parser.next();
                    x = x2;
                    y = y2;
                    this.quadraticCurveTo(x1, y1, x, y);
                }
                else if ((cmd === 'z') || (cmd === 'Z')) {
                    x = beginX;
                    y = beginY;
                    this.closePath();
                }
                else {
                    throw ('Invalid SVG path cmd: ' + cmd + ' (' + path + ')');
                }
            }
        };
        SVG2DContext.prototype.parseFont = function (font) {
            var tab = font.split(' ');
            if (tab.length === 1)
                return { style: 'default', weight: 'normal', size: 16, family: tab[0] };
            if (tab.length === 2)
                return { style: 'default', weight: 'normal', size: parseInt(tab[0]), family: tab[1] };
            else if (tab.length === 3)
                return { style: 'default', weight: tab[0], size: parseInt(tab[1]), family: tab[2] };
            else if (tab.length === 4)
                return { style: tab[0], weight: tab[1], size: parseInt(tab[2]), family: tab[3] };
        };
        SVG2DContext.prototype.roundRectFilledShadow = function (x, y, width, height, radiusTopLeft, radiusTopRight, radiusBottomRight, radiusBottomLeft, inner, shadowWidth, color) {
            this.save();
            var rgba = color.getRgba();
            for (var i = 0; i < shadowWidth; i++) {
                var opacity = void 0;
                if (inner) {
                    if (shadowWidth == 1)
                        opacity = 1;
                    else {
                        var tx = (i + 1) / shadowWidth;
                        opacity = tx * tx;
                    }
                }
                else
                    opacity = (i + 1) / (shadowWidth + 1);
                color = new Ui.Color(rgba.r, rgba.g, rgba.b, rgba.a * opacity);
                this.fillStyle = color.getCssRgba();
                if (inner) {
                    this.beginPath();
                    this.roundRect(x, y, width, height, radiusTopLeft, radiusTopRight, radiusBottomRight, radiusBottomLeft);
                    this.roundRect(x + shadowWidth - i, y + shadowWidth - i, width - ((shadowWidth - i) * 2), height - ((shadowWidth - i) * 2), radiusTopLeft, radiusTopRight, radiusBottomRight, radiusBottomLeft, true);
                    this.closePath();
                    this.fill();
                }
                else {
                    this.beginPath();
                    this.roundRect(x + i, y + i, width - i * 2, height - i * 2, radiusTopLeft, radiusTopRight, radiusBottomRight, radiusBottomLeft);
                    this.closePath();
                    this.fill();
                }
            }
            this.restore();
        };
        SVG2DContext.prototype.getSVG = function () {
            return this.g;
        };
        SVG2DContext.counter = 0;
        return SVG2DContext;
    }(Core.Object));
    Core.SVG2DContext = SVG2DContext;
})(Core || (Core = {}));
if (Core.Navigator.supportCanvas) {
    CanvasRenderingContext2D.prototype['roundRect'] = Core.SVG2DPath.prototype.roundRect;
    CanvasRenderingContext2D.prototype['svgPath'] = Core.SVG2DContext.prototype.svgPath;
    CanvasRenderingContext2D.prototype['roundRectFilledShadow'] = Core.SVG2DContext.prototype.roundRectFilledShadow;
}
var Ui;
(function (Ui) {
    var Rectangle = (function (_super) {
        __extends(Rectangle, _super);
        function Rectangle(init) {
            var _this = _super.call(this, init) || this;
            _this._radiusTopLeft = 0;
            _this._radiusTopRight = 0;
            _this._radiusBottomLeft = 0;
            _this._radiusBottomRight = 0;
            _this._fill = new Ui.Color(0, 0, 0);
            if (init) {
                if (init.fill !== undefined)
                    _this.fill = init.fill;
                if (init.radius !== undefined)
                    _this.radius = init.radius;
                if (init.radiusTopLeft != undefined)
                    _this.radiusTopLeft = init.radiusTopLeft;
                if (init.radiusTopRight !== undefined)
                    _this.radiusTopRight = init.radiusTopRight;
                if (init.radiusBottomLeft !== undefined)
                    _this.radiusBottomLeft = init.radiusBottomLeft;
                if (init.radiusBottomRight !== undefined)
                    _this.radiusBottomRight = init.radiusBottomRight;
            }
            return _this;
        }
        Object.defineProperty(Rectangle.prototype, "fill", {
            set: function (fill) {
                if (this._fill !== fill) {
                    if (typeof (fill) === 'string')
                        fill = Ui.Color.create(fill);
                    this._fill = fill;
                    if (this._fill instanceof Ui.Color)
                        this.drawing.style.background = this._fill.getCssRgba();
                    else if (this._fill instanceof Ui.LinearGradient)
                        this.drawing.style.background = this._fill.getBackgroundImage();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "radius", {
            set: function (radius) {
                this.radiusTopLeft = radius;
                this.radiusTopRight = radius;
                this.radiusBottomLeft = radius;
                this.radiusBottomRight = radius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "radiusTopLeft", {
            get: function () {
                return this._radiusTopLeft;
            },
            set: function (radiusTopLeft) {
                this._radiusTopLeft = radiusTopLeft;
                this.drawing.style.borderTopLeftRadius = radiusTopLeft + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "radiusTopRight", {
            get: function () {
                return this._radiusTopRight;
            },
            set: function (radiusTopRight) {
                this._radiusTopRight = radiusTopRight;
                this.drawing.style.borderTopRightRadius = radiusTopRight + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "radiusBottomLeft", {
            get: function () {
                return this._radiusBottomLeft;
            },
            set: function (radiusBottomLeft) {
                this._radiusTopRight = radiusBottomLeft;
                this.drawing.style.borderBottomLeftRadius = radiusBottomLeft + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "radiusBottomRight", {
            get: function () {
                return this._radiusBottomRight;
            },
            set: function (radiusBottomRight) {
                this._radiusTopRight = radiusBottomRight;
                this.drawing.style.borderBottomRightRadius = radiusBottomRight + "px";
            },
            enumerable: true,
            configurable: true
        });
        return Rectangle;
    }(Ui.Element));
    Ui.Rectangle = Rectangle;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Separator = (function (_super) {
        __extends(Separator, _super);
        function Separator() {
            var _this = _super.call(this) || this;
            _this.height = 1;
            _this.width = 1;
            return _this;
        }
        Separator.prototype.onStyleChange = function () {
            this.fill = this.getStyleProperty('color');
        };
        Separator.style = {
            color: '#444444'
        };
        return Separator;
    }(Ui.Rectangle));
    Ui.Separator = Separator;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Shape = (function (_super) {
        __extends(Shape, _super);
        function Shape(init) {
            var _this = _super.call(this, init) || this;
            _this._scale = 1;
            if (init) {
                if (init.scale !== undefined)
                    _this.scale = init.scale;
                if (init.fill !== undefined)
                    _this.fill = init.fill;
                if (init.path !== undefined)
                    _this.path = init.path;
            }
            return _this;
        }
        Object.defineProperty(Shape.prototype, "scale", {
            set: function (scale) {
                if (this._scale != scale) {
                    this._scale = scale;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shape.prototype, "fill", {
            get: function () {
                if (this._fill === undefined)
                    return Ui.Color.create(this.getStyleProperty('color'));
                else
                    return this._fill;
            },
            set: function (fill) {
                if (this._fill !== fill) {
                    if (typeof (fill) === 'string')
                        fill = Ui.Color.create(fill);
                    this._fill = fill;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shape.prototype, "path", {
            set: function (path) {
                if (this._path != path) {
                    this._path = path;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Shape.prototype.onStyleChange = function () {
            this.invalidateDraw();
        };
        Shape.prototype.updateCanvas = function (ctx) {
            if (this._path === undefined)
                return;
            if (this._scale != 1)
                ctx.scale(this._scale, this._scale);
            ctx.svgPath(this._path);
            var fill = this.fill;
            if (fill instanceof Ui.Color)
                ctx.fillStyle = fill.getCssRgba();
            else if (fill instanceof Ui.LinearGradient)
                ctx.fillStyle = fill.getCanvasGradient(ctx, this.layoutWidth, this.layoutHeight);
            ctx.fill();
        };
        Shape.style = {
            color: '#444444'
        };
        return Shape;
    }(Ui.CanvasElement));
    Ui.Shape = Shape;
})(Ui || (Ui = {}));
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var Ui;
(function (Ui) {
    var Icon = (function (_super) {
        __extends(Icon, _super);
        function Icon(init) {
            var _this = _super.call(this, init) || this;
            _this._icon = '';
            _this.loadingfailed = new Core.Events();
            if (init) {
                if (init.icon !== undefined)
                    _this.icon = init.icon;
                if (init.fill !== undefined)
                    _this.fill = init.fill;
                if (init.path !== undefined)
                    _this.path = init.path;
            }
            return _this;
        }
        Object.defineProperty(Icon.prototype, "onloadingfailed", {
            set: function (value) { this.loadingfailed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Icon.prototype, "fill", {
            get: function () {
                if (this._fill === undefined)
                    return Ui.Color.create(this.getStyleProperty('color'));
                else
                    return this._fill;
            },
            set: function (value) {
                this._fill = value;
                this.drawing.style.fill = Ui.Color.create(this.fill).getCssRgba();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Icon.prototype, "path", {
            set: function (value) {
                var drawing = this.drawing;
                drawing.innerHTML =
                    "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\n        <path d=\"" + value + "\"/>\n    </svg>";
                this.normalize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Icon.prototype, "icon", {
            set: function (value) {
                if (this._icon == value)
                    return;
                this._icon = value;
                if (Icon.forceExternal)
                    this.loadIcon(value);
                else {
                    var path = Icon.getPath(value);
                    if (path == undefined)
                        this.loadIcon(value);
                    else
                        this.path = path;
                }
            },
            enumerable: true,
            configurable: true
        });
        Icon.prototype.onStyleChange = function () {
            this.drawing.style.fill = Ui.Color.create(this.fill).getCssRgba();
        };
        Icon.prototype.onLoadingFailed = function () {
            this.loadingfailed.fire({ target: this });
        };
        Icon.prototype.loadIcon = function (value) {
            return __awaiter(this, void 0, void 0, function () {
                var drawing, req;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(value.indexOf('.svg') + 4 == value.length && value.length > 4))
                                value = value + ".svg";
                            drawing = this.drawing;
                            if (!(Ui.Icon.iconsCache[value] != undefined)) return [3, 1];
                            drawing.innerHTML = Ui.Icon.iconsCache[value];
                            return [3, 6];
                        case 1:
                            req = void 0;
                            if (!(Ui.Icon.loadingReqs[value] != undefined)) return [3, 3];
                            req = Ui.Icon.loadingReqs[value];
                            return [4, req.waitAsync()];
                        case 2:
                            _a.sent();
                            return [3, 5];
                        case 3:
                            req = new Core.HttpRequest().assign({
                                url: "" + Icon.baseUrl + value
                            });
                            Ui.Icon.loadingReqs[value] = req;
                            return [4, req.sendAsync()];
                        case 4:
                            _a.sent();
                            delete (Ui.Icon.loadingReqs[value]);
                            _a.label = 5;
                        case 5:
                            if (req.status == 200) {
                                drawing.innerHTML = req.responseText;
                                this.normalize();
                                Ui.Icon.iconsCache[value] = this.drawing.innerHTML;
                            }
                            else {
                                drawing.innerHTML = '';
                                this.onLoadingFailed();
                            }
                            _a.label = 6;
                        case 6: return [2];
                    }
                });
            });
        };
        Icon.prototype.normalize = function () {
            var child = this.drawing.children.item(0);
            if (child instanceof SVGSVGElement) {
                var svgWidth = child.getAttribute('width');
                var svgHeight = child.getAttribute('height');
                var svgViewBox = child.getAttribute('viewBox');
                if (svgViewBox == null) {
                    if (svgWidth != null && svgHeight != null)
                        svgViewBox = "0 0 " + parseInt(svgWidth) + " " + parseInt(svgHeight);
                    else
                        svgViewBox = '0 0 48 48';
                    child.setAttribute('viewBox', svgViewBox);
                }
                child.style.width = '100%';
                child.style.height = '100%';
            }
        };
        Icon.initialize = function () {
            this.register('check', 'M18 32.3L9.7 24l-2.8 2.8L18 38 42 14l-2.8-2.8z');
            this.register('home', 'm24 6-20 18 6 0 0 16 10 0 0-12 8 0 0 12 10 0 0-16 6 0z');
            this.register('search', 'M16.6 2.8C9.3 2.8 3.3 8.7 3.3 16 3.3 23.3 9.3 29.3 16.6 29.3 19.2 29.3 21.7 28.5 23.8 27.1L26.5 29.8C26 31.2 26.4 32.9 27.5 34L37 43.5C38.5 45.1 41.1 45.1 42.6 43.5L44.3 41.8C45.9 40.3 45.9 37.8 44.3 36.2L34.8 26.7C33.7 25.6 32.3 25.3 30.9 25.7L28 22.7C29.2 20.8 29.8 18.5 29.8 16 29.8 8.7 23.9 2.8 16.6 2.8zM16.6 6.8C21.7 6.8 25.8 10.9 25.8 16 25.8 21.2 21.7 25.3 16.6 25.3 11.4 25.3 7.3 21.2 7.3 16 7.3 10.9 11.4 6.8 16.6 6.8z');
            this.register('close', 'M38 12.82L35.18 10 24 21.18 12.82 10 10 12.82 21.18 24 10 35.18 12.82 38 24 26.82 35.18 38 38 35.18 26.82 24z');
            this.register('backarrow', 'M40 22H15.86l11.18-11.18L24 8l-16 16 16 16 2.82-2.82L15.66 26H40v-4z');
            this.register('arrowleft', 'm30 4 5 5-15 15 15 15-5 5-20-20z');
            this.register('arrowright', 'm18 4-5 5 15 15-15 15 5 5 20-20z');
            this.register('arrowtop', 'm44 31-5 5-15-15-15 15-5-5 20-20z');
            this.register('arrowbottom', 'm4 16 5-5 15 15 15-15 5 5-20 20z');
            this.register('refresh', 'M24 8C15.2 8 8 15.2 8 24 8 32.8 15.2 40 24 40 31.5 40 37.7 34.9 39.5 28l-4.2 0C33.7 32.7 29.2 36 24 36 17.4 36 12 30.6 12 24c0-6.6 5.4-12 12-12 3.3 0 6.3 1.4 8.4 3.6L26 22 40 22 40 8 35.3 12.7C32.4 9.8 28.4 8 24 8Z');
            this.register('deny', 'M24.4 4.6C13.8 4.6 5.3 13.1 5.3 23.6 5.3 34.2 13.8 42.7 24.4 42.7 34.9 42.7 43.4 34.2 43.4 23.6 43.4 13.1 34.9 4.6 24.4 4.6zM12.9 20.5L36.4 20.5 36.4 27.8 12.9 27.8 12.9 20.5z');
            this.register('warning', 'M2 42h44L24 4 2 42zm24-6h-4v-4h4v4zm0-8h-4v-8h4v8z');
            this.register('trash', 'm12 38 c0 2 1.8 4 4 4l16 0c2.2 0 4-1.8 4-4L36 14 11.6 14ZM38 8 31 8 29 6 19 6 17 8 10 8 10 12 38 12Z');
            this.register('new', 'M38 6H10c-2.22 0-4 1.8-4 4v28c0 2.2 2.78 4 4 4h28c2.2 0 4-1.8 4-4V10c0-2.2-1.8-4-4-4zm-4 20h-8v8h-4v-8H14v-4h8V14h4v8h8v4z');
            this.register('star', 'M24 34.54L36.36 42l-3.28-14.06L44 18.48l-14.38-1.22L24 4 18.38 17.26 4 18.48l10.92 9.46L11.64 42z');
            this.register('exit', 'M20.18 31.18L23 34l10-10-10-10-2.82 2.82L25.34 22H6v4h19.34l-5.16 5.18zM38 6H10c-2.22 0-4 1.8-4 4v4h4V10h28v28H10v-8H6v8c0 2.2 1.78 4 4 4h28c2.2 0 4-1.8 4-4V10c0-2.2-1.8-4-4-4z');
            this.register('loading', 'M24 2.5C22.1 2.5 20.5 4.1 20.5 6 20.5 7.9 22.1 9.5 24 9.5 25.9 9.5 27.5 7.9 27.5 6 27.5 4.1 25.9 2.5 24 2.5zM11.3 7.8C10.4 7.8 9.5 8.1 8.8 8.8 7.5 10.2 7.5 12.4 8.8 13.8 10.2 15.1 12.4 15.1 13.8 13.8 15.1 12.4 15.1 10.2 13.8 8.8 13.1 8.1 12.2 7.8 11.3 7.8zM36.7 7.8C35.8 7.8 34.9 8.1 34.3 8.8 32.9 10.2 32.9 12.4 34.3 13.8 35.6 15.1 37.8 15.1 39.2 13.8 40.5 12.4 40.5 10.2 39.2 8.8 38.5 8.1 37.6 7.8 36.7 7.8zM6 20.5C4.1 20.5 2.5 22.1 2.5 24 2.5 25.9 4.1 27.5 6 27.5 7.9 27.5 9.5 25.9 9.5 24 9.5 22.1 7.9 20.5 6 20.5zM42 20.5C40.1 20.5 38.5 22.1 38.5 24 38.5 25.9 40.1 27.5 42 27.5 43.9 27.5 45.5 25.9 45.5 24 45.5 22.1 43.9 20.5 42 20.5zM11.3 33.3C10.4 33.3 9.5 33.6 8.8 34.3 7.5 35.6 7.5 37.8 8.8 39.2 10.2 40.5 12.4 40.5 13.8 39.2 15.1 37.8 15.1 35.6 13.8 34.3 13.1 33.6 12.2 33.3 11.3 33.3zM36.7 33.3C35.8 33.3 34.9 33.6 34.3 34.3 32.9 35.6 32.9 37.8 34.3 39.2 35.6 40.5 37.8 40.5 39.2 39.2 40.5 37.8 40.5 35.6 39.2 34.3 38.5 33.6 37.6 33.3 36.7 33.3zM24 38.5C22.1 38.5 20.5 40.1 20.5 42 20.5 43.9 22.1 45.5 24 45.5 25.9 45.5 27.5 43.9 27.5 42 27.5 40.1 25.9 38.5 24 38.5z');
            this.register('edit', 'M6 34.5V42h7.5L35.62 19.88l-7.5-7.5L6 35.5zM41.42 14.08c.78-.78.78-2.04 0-2.82l-4.68-4.68c-.78-.78-2.04-.78-2.82 0l-3.66 3.66 7.5 7.5 3.66-3.66z');
            this.register('upload', 'M18 32h12v-12h8l-14-14-14 14h8zm-8 18h28v4H10z');
            this.register('lock', 'M24 2C18.5 2 14 6.5 14 12l0 4-2 0c-2.2 0-4 1.8-4 4l0 20c0 2.2 1.8 4 4 4l24 0c2.2 0 4-1.8 4-4 0-10.5 0-11.2 0-20 0-2.2-1.8-4-4-4l-2 0 0-4C34 6.5 29.5 2 24 2Zm0 3.8C27.4 5.8 30.2 8.6 30.2 12l0 4-12.4 0 0-4C17.8 8.6 20.6 5.8 24 5.8ZM24 26c2.2 0 4 1.8 4 4 0 2.2-1.8 4-4 4-2.2 0-4-1.8-4-4 0-2.2 1.8-4 4-4z');
            this.register('savecloud', 'M38.7 20.08C37.34 13.18 31.28 8 24 8 18.22 8 13.2 11.28 10.7 16.08 2.68 16.72 0 21.82 0 28c0 6.62 5.28 12 12 12h26c5.52 0 10-4.48 10-10 0-5.28-4.1-9.56-9.3-9.92zM28 26v8h-8v-8H14l10-10 10 10h-6z');
            this.register('calendar', 'M34 24h-10v10h10v-10zM32 2v4H16V2H12v4H10c-2.22 0-3.98 1.8-3.98 4L6 38c0 2.2 1.78 4 4 4h28c2.2 0 2-1.8 4-4V10c0-2.2-1.8-4-4-4h-2V2h-4zm6 36H10V16h28v22z');
            this.register('phone', 'M13.2 21.6c2.9 5.7 7.5 10.3 13.2 13.2l4.4-4.4c.5-.5 1.3-.7 2-.5 2.2 .7 4.7 1.1 7.1 1.1 1.1 0 2 .9 2 2V40c0 1.1-.9 2-2 2-18.8 0-34-15.2-34-34 0-1.1 .9-2 2-2h7c1.1 0 2 .9 2 2 0 2.5 .4 4.9 1.1 7.1 .2 .7 .1 1.5-.5 2l-4.4 4.4z');
            this.register('mail', 'M40 8H8c-2.2 0-4 1.8-4 4L4 36c0 2.2 1.8 4 4 4h32c2.2 0 4-1.8 4-4V12c0-2.2-1.8-4-4-4zm0 8l-16 10-16-10V12l16 10 16-10v4z');
            this.register('plus', 'M38 26h-12v12h-4v-12H10v-4h12V10h4v12h12v4z');
            this.register('eye', 'M24.2 10.4C11.7 10.4 2 23.6 1.6 24.2L.9 25.1 1.6 26.1C2 26.7 11.7 39.9 24.2 39.9 36.6 39.9 46.3 26.7 46.7 26.1L47.4 25.1 46.7 24.2C46.3 23.6 36.6 10.4 24.2 10.4zM24.2 13.7C33.1 13.7 40.9 22.2 43.3 25.1 41 28 33.1 36.6 24.2 36.6 15.2 36.6 7.4 28 5 25.1 7.4 22.2 15.2 13.7 24.2 13.7zM24.8 15.2C19.4 15.2 15 19.6 15 24.9 15 30.3 19.4 34.7 24.8 34.7 30.2 34.7 34.6 30.3 34.6 24.9 34.6 23.1 34.1 21.5 33.3 20 33.1 22.1 31.4 23.8 29.3 23.8 27 23.8 25.3 22 25.3 19.8 25.3 17.9 26.7 16.3 28.5 15.9 27.4 15.5 26.1 15.2 24.8 15.2z');
            this.register('map', 'M41 6l-.3 .1L30 10.2 18 6 6.7 9.8c-.4 .1-.7 .5-.7 1V41c0 .6 .4 1 1 1l.3-.1L18 37.8l12 4.2 11.3-3.8c.4-.1 .7-.5 .7-1V7c0-.6-.4-1-1-1zM30 38l-12-4.2V10l12 4.2V38z');
            this.register('sortarrow', 'm4 32 40 0-20-20z');
            this.register('dragcopy', 'M24 .2C10.8 .2 .2 10.8 .2 24 .2 37.2 10.8 47.8 24 47.8 37.2 47.8 47.8 37.2 47.8 24 47.8 10.8 37.2 .2 24 .2zm-4.5 5.9 8.9 0 0 13.5 13.5 0 0 8.9-13.5 0 0 13.5-8.9 0 0-13.6-13.5 .1 0-8.9 13.5 0z');
            this.register('dragmove', 'M24 .2C10.8 .2 .2 10.8 .2 24 .2 37.2 10.8 47.8 24 47.8 37.2 47.8 47.8 37.2 47.8 24 47.8 10.8 37.2 .2 24 .2zM26.6 8.6L42 24 26.6 39.4 21.4 34.3 26.6 29.2 6 29.2 6 18.8 26.6 18.8 21.4 13.8 26.6 8.6z');
            this.register('draglink', 'M24 .2C10.8 .2 .2 10.8 .2 24 .2 37.2 10.8 47.8 24 47.8 37.2 47.8 47.8 37.2 47.8 24 47.8 10.8 37.2 .2 24 .2zM34.9 13.9C40.7 13.9 44.3 18.3 44.3 23.9 44.3 29.6 40.8 34.1 34.8 34.1 30.2 34.1 26.9 31.1 24 27.8 21 31.1 18.1 34.1 13.3 34.1 7.4 34.1 3.7 29.7 3.7 24 3.7 18.4 7.2 13.9 13.1 13.9 17.9 13.9 21.1 17.2 24 20.6 26.9 17.2 30.1 13.9 34.9 13.9zM34.8 19.3C31.9 19.3 29.1 22.1 27.2 24.1 29.2 26.3 31.8 28.7 34.9 28.7 37.7 28.7 39.3 26.7 39.3 24.1 39.3 21.4 37.6 19.3 34.8 19.3zM13.1 19.3C10.4 19.3 8.8 21.6 8.8 24.1 8.8 26.8 10.5 28.7 13.2 28.7 16.1 28.7 19 26.1 20.8 24.1 18.9 22.2 15.9 19.3 13.1 19.3z');
            this.register('dragchoose', 'M24 .2C10.8 .2 .2 10.8 .2 24 .2 37.2 10.8 47.8 24 47.8 37.2 47.8 47.8 37.2 47.8 24 47.8 10.8 37.2 .2 24 .2zM23.6 3.3L25.9 3.3C33.1 3.3 37.8 8 37.8 14.7 37.8 22.1 33.3 24 29.7 25.6 27.7 26.6 26 27.4 26 29.8 26 31.4 26.4 32.3 26.4 32.8 26.4 33.2 26.2 33.3 25.8 33.3L19.7 33.3C19.3 33.3 19.1 33.1 19 32.8 18.8 31.6 18.6 30.2 18.6 28.9 18.6 23 22.8 21.3 26.3 19.5 28.5 18.4 30.4 17.3 30.4 14.7 30.4 12.1 28.4 10.1 25.9 10.1L23.6 10.1C21.8 10.1 20.2 11.1 19 13.8 18.9 14.2 18.7 14.3 18.5 14.3 18.2 14.3 18 14.1 17.8 14L12.6 11.3C12.4 11.2 12.2 11.1 12.2 10.9 12.2 10.5 12.9 9.5 13.4 8.5 15.4 5.5 18.3 3.3 23.6 3.3zM23.4 36.4C25.7 36.4 27.7 38.4 27.7 40.7 27.7 43 25.7 44.9 23.4 44.9 21.1 44.9 19.1 43 19.1 40.7 19.1 38.4 21.1 36.4 23.4 36.4z');
            this.register('dragrun', 'M24 2.4C12.1 2.4 2.4 12.1 2.4 24 2.4 36 12.1 45.6 24 45.6 36 45.6 45.6 36 45.6 24 45.6 12.1 36 2.4 24 2.4zM23.9 7.8C24 7.8 24 7.8 24 7.8 27 7.8 29.8 8.6 32.2 10L30.4 13.1C32.3 14.2 33.8 15.7 34.9 17.6L38 15.8C39.4 18.2 40.3 21 40.3 24 40.3 24 40.3 24 40.3 24.1L36.7 24C36.7 26.3 36.1 28.4 35 30.3L38.1 32.1C36.7 34.6 34.6 36.7 32.1 38.1L30.3 35C28.4 36.1 26.3 36.7 24 36.7L24.1 40.3C24 40.3 24 40.3 24 40.3 21 40.3 18.2 39.4 15.8 38L17.6 34.9C15.7 33.8 14.2 32.3 13.1 30.4L10 32.2C8.6 29.8 7.8 27 7.8 24 7.8 24 7.8 24 7.8 23.9L11.3 24C11.3 21.7 12 19.6 13 17.7L9.9 15.9C11.3 13.4 13.4 11.3 15.9 9.9L17.7 13C19.6 12 21.7 11.3 24 11.3L23.9 7.8zM24 18.8C21.1 18.8 18.8 21.1 18.8 24 18.8 26.9 21.1 29.2 24 29.2 26.9 29.2 29.2 26.9 29.2 24 29.2 21.1 26.9 18.8 24 18.8z');
            this.register('dragplay', 'M24 .2C10.8 .2 .2 10.8 .2 24 .2 37.2 10.8 47.8 24 47.8 37.2 47.8 47.8 37.2 47.8 24 47.8 10.8 37.2 .2 24 .2zM13.8 7.8L42.2 24 13.8 40.3 13.8 7.8z');
            this.register('burger', 'M24 1.47C20.77 1.48 18.16 4.17 18.16 7.49 18.16 10.82 20.77 13.52 24 13.52 27.23 13.52 29.84 10.82 29.84 7.49 29.84 4.17 27.23 1.48 24 1.47Zm0 16.42c-3.23 0-5.84 2.7-5.84 6.02 0 3.33 2.61 6.02 5.84 6.02 3.23 0 5.84-2.7 5.84-6.02C29.84 20.59 27.23 17.9 24 17.9Zm0 16.42c-3.23 0-5.84 2.7-5.84 6.02 0 3.33 2.61 6.02 5.84 6.02 3.23 0 5.84-2.7 5.84-6.02C29.84 37.01 27.23 34.32 24 34.32Z');
        };
        Icon.getPath = function (icon) {
            return Icon.icons[icon];
        };
        Icon.getNames = function () {
            var names = new Array();
            for (var tmp in Icon.icons)
                names.push(tmp);
            return names;
        };
        Icon.register = function (iconName, iconPath) {
            if (Icon.icons[iconName] !== undefined)
                throw ('Icon \'' + iconName + '\' is already registered. To change it, use override');
            Icon.icons[iconName] = iconPath;
        };
        Icon.override = function (iconName, iconPath) {
            Icon.icons[iconName] = iconPath;
        };
        Icon.parse = function (icon) {
            var ico = new Icon();
            ico.icon = icon;
            return ico;
        };
        Icon.drawIcon = function (ctx, icon, size, fill) {
            ctx.save();
            var scale = size / 48;
            ctx.scale(scale, scale);
            ctx.svgPath(Icon.getPath(icon));
            ctx.fillStyle = fill;
            ctx.fill();
            ctx.restore();
        };
        Icon.drawIconAndBadge = function (ctx, icon, size, fill, badgeText, badgeSize, badgeFill, textFill) {
            ctx.save();
            var scale = size / 48;
            badgeSize /= scale;
            var textHeight = badgeSize * 0.75;
            ctx.font = 'bold ' + textHeight + 'px sans-serif';
            var textSize = ctx.measureText(badgeText);
            var textWidth = textSize.width;
            var badgeWidth = Math.max(badgeSize, textWidth * 1.25);
            ctx.scale(scale, scale);
            ctx.save();
            ctx.beginPath();
            ctx.rect(0, 0, 48, 48);
            ctx.roundRect(1, 48 - 5 - badgeSize, badgeWidth + 4, badgeSize + 4, badgeSize / 2, badgeSize / 2, badgeSize / 2, badgeSize / 2, true);
            ctx.closePath();
            ctx.clip();
            ctx.svgPath(Icon.getPath(icon));
            ctx.fillStyle = fill;
            ctx.fill();
            ctx.restore();
            ctx.fillStyle = badgeFill;
            ctx.beginPath();
            ctx.roundRect(3, 48 - 3 - badgeSize, badgeWidth, badgeSize, badgeSize / 2, badgeSize / 2, badgeSize / 2, badgeSize / 2);
            ctx.closePath();
            ctx.fill();
            ctx.textBaseline = 'middle';
            ctx.fillStyle = textFill;
            ctx.fillText(badgeText, 3 + ((badgeWidth - textWidth) / 2), 48 - (3 + (badgeSize / 2)));
            ctx.restore();
        };
        Icon.baseUrl = '';
        Icon.forceExternal = false;
        Icon.loadingReqs = {};
        Icon.iconsCache = {};
        Icon.style = {
            color: '#444444'
        };
        Icon.icons = {};
        return Icon;
    }(Ui.Element));
    Ui.Icon = Icon;
})(Ui || (Ui = {}));
Ui.Icon.initialize();
var Ui;
(function (Ui) {
    var DualIcon = (function (_super) {
        __extends(DualIcon, _super);
        function DualIcon(init) {
            var _this = _super.call(this, init) || this;
            if (init) {
                if (init.icon !== undefined)
                    _this.icon = init.icon;
                if (init.fill !== undefined)
                    _this.fill = init.fill;
                if (init.stroke !== undefined)
                    _this.stroke = init.stroke;
                if (init.strokeWidth !== undefined)
                    _this.strokeWidth = init.strokeWidth;
            }
            return _this;
        }
        Object.defineProperty(DualIcon.prototype, "icon", {
            set: function (icon) {
                this._icon = icon;
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DualIcon.prototype, "fill", {
            get: function () {
                if (this._fill === undefined)
                    return Ui.Color.create(this.getStyleProperty('fill'));
                else
                    return this._fill;
            },
            set: function (fill) {
                this._fill = fill;
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DualIcon.prototype, "stroke", {
            get: function () {
                if (this._stroke === undefined)
                    return Ui.Color.create(this.getStyleProperty('stroke'));
                else
                    return this._stroke;
            },
            set: function (stroke) {
                this._stroke = stroke;
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DualIcon.prototype, "strokeWidth", {
            get: function () {
                if (this._strokeWidth === undefined)
                    return this.getStyleProperty('strokeWidth');
                else
                    return this._strokeWidth;
            },
            set: function (strokeWidth) {
                this._strokeWidth = strokeWidth;
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        DualIcon.prototype.updateCanvas = function (ctx) {
            if (!this._icon)
                return;
            var strokeWidth = this.strokeWidth;
            ctx.save();
            var scale = Math.min(this.layoutWidth, this.layoutHeight) / 48;
            ctx.scale(scale, scale);
            ctx.translate(strokeWidth, strokeWidth);
            var scale2 = (48 - (strokeWidth * 2)) / 48;
            ctx.scale(scale2, scale2);
            var path = Ui.Icon.getPath(this._icon);
            if (path == undefined)
                throw "Icon '" + this._icon + "' NOT AVAILABLE for DualIcon";
            ctx.svgPath(path);
            ctx.strokeStyle = this.stroke.getCssRgba();
            ctx.lineWidth = strokeWidth * 2;
            ctx.stroke();
            ctx.fillStyle = this.fill.getCssRgba();
            ctx.fill();
            ctx.restore();
        };
        DualIcon.style = {
            fill: '#ffffff',
            stroke: '#000000',
            strokeWidth: 2
        };
        return DualIcon;
    }(Ui.CanvasElement));
    Ui.DualIcon = DualIcon;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Event = (function (_super) {
        __extends(Event, _super);
        function Event() {
            var _this = _super.call(this) || this;
            _this.bubbles = true;
            _this.cancelable = true;
            _this.cancelBubble = false;
            _this.stop = false;
            return _this;
        }
        Event.prototype.stopPropagation = function () {
            this.cancelBubble = true;
        };
        Event.prototype.stopImmediatePropagation = function () {
            this.stop = true;
        };
        Event.prototype.getIsPropagationStopped = function () {
            return this.stop || this.cancelBubble;
        };
        Event.prototype.setType = function (type) {
            this.type = type;
        };
        Event.prototype.setBubbles = function (bubbles) {
            this.bubbles = bubbles;
        };
        Event.prototype.dispatchEvent = function (target) {
            this.target = target;
            if (this.bubbles) {
                var stack = [];
                var current = this.target;
                while (current != undefined) {
                    stack.push(current);
                    current = current.parent;
                }
                for (var i = stack.length - 1; (i >= 0) && (!this.cancelBubble) && (!this.stop); i--) {
                    current = stack[i];
                    if (this.type in current && current[this.type] instanceof Core.Events) {
                        var handlers = current[this.type].list;
                        for (var i2 = 0; (i2 < handlers.length) && (!this.stop); i2++) {
                            var handler = handlers[i2];
                            if (handler.capture)
                                handler.handler(this);
                        }
                    }
                }
                for (var i = 0; (i < stack.length) && (!this.cancelBubble) && (!this.stop); i++) {
                    current = stack[i];
                    if (this.type in current && current[this.type] instanceof Core.Events) {
                        var handlers = current[this.type].list;
                        for (var i2 = 0; (i2 < handlers.length) && (!this.stop); i2++) {
                            var handler = handlers[i2];
                            if (!handler.capture)
                                handler.handler(this);
                        }
                    }
                }
            }
            else {
                if (this.type in this.target && this.target[this.type] instanceof Core.Events) {
                    var handlers = this.target[this.type].list;
                    for (var i2 = 0; (i2 < handlers.length) && (!this.stop); i2++) {
                        var handler = handlers[i2];
                        if (handler.capture)
                            handler.handler(this);
                    }
                    for (var i2 = 0; (i2 < handlers.length) && (!this.stop); i2++) {
                        var handler = handlers[i2];
                        if (!handler.capture)
                            handler.handler(this);
                    }
                }
            }
        };
        return Event;
    }(Core.Object));
    Ui.Event = Event;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var EmuPointerEvent = (function (_super) {
        __extends(EmuPointerEvent, _super);
        function EmuPointerEvent(type, pointer) {
            var _this = _super.call(this) || this;
            _this.pointer = undefined;
            _this.clientX = 0;
            _this.clientY = 0;
            _this.pointerType = 'mouse';
            _this.setType(type);
            _this.pointer = pointer;
            _this.clientX = _this.pointer.getX();
            _this.clientY = _this.pointer.getY();
            _this.pointerType = _this.pointer.getType();
            return _this;
        }
        return EmuPointerEvent;
    }(Ui.Event));
    Ui.EmuPointerEvent = EmuPointerEvent;
    var PointerWatcher = (function (_super) {
        __extends(PointerWatcher, _super);
        function PointerWatcher(element, pointer) {
            var _this = _super.call(this) || this;
            _this.downed = new Core.Events();
            _this.moved = new Core.Events();
            _this.upped = new Core.Events();
            _this.cancelled = new Core.Events();
            _this.element = element;
            _this.pointer = pointer;
            return _this;
        }
        PointerWatcher.prototype.getAbsoluteDelta = function () {
            var initial = { x: this.pointer.getInitialX(), y: this.pointer.getInitialY() };
            var current = { x: this.pointer.getX(), y: this.pointer.getY() };
            return { x: current.x - initial.x, y: current.y - initial.y };
        };
        PointerWatcher.prototype.getDelta = function () {
            var initial = new Ui.Point(this.pointer.getInitialX(), this.pointer.getInitialY());
            var current = new Ui.Point(this.pointer.getX(), this.pointer.getY());
            initial = this.element.pointFromWindow(initial);
            current = this.element.pointFromWindow(current);
            return { x: current.x - initial.x, y: current.y - initial.y };
        };
        PointerWatcher.prototype.getPosition = function () {
            var current = new Ui.Point(this.pointer.getX(), this.pointer.getY());
            return this.element.pointFromWindow(current);
        };
        PointerWatcher.prototype.getIsInside = function () {
            var pos = this.getPosition();
            if ((pos.x >= 0) && (pos.x <= this.element.layoutWidth) &&
                (pos.y >= 0) && (pos.y <= this.element.layoutHeight))
                return true;
            return false;
        };
        PointerWatcher.prototype.getDirection = function () {
            var delta = this.getDelta();
            if (Math.abs(delta.x) > Math.abs(delta.y)) {
                if (delta.x < 0)
                    return 'left';
                else
                    return 'right';
            }
            else {
                if (delta.y < 0)
                    return 'top';
                else
                    return 'bottom';
            }
        };
        PointerWatcher.prototype.getSpeed = function () {
            if ((this.pointer === undefined) || (this.pointer.history.length < 2))
                return { x: 0, y: 0 };
            else {
                var measure = void 0;
                var i = this.pointer.history.length;
                var now = { time: (new Date().getTime()) / 1000, x: this.pointer.x, y: this.pointer.y };
                do {
                    measure = this.pointer.history[--i];
                } while ((i > 0) && ((now.time - measure.time) < 0.08));
                var deltaTime = now.time - measure.time;
                return {
                    x: (now.x - measure.x) / deltaTime,
                    y: (now.y - measure.y) / deltaTime
                };
            }
        };
        PointerWatcher.prototype.getIsCaptured = function () {
            return (this.pointer !== undefined) && (this.pointer.captureWatcher === this);
        };
        PointerWatcher.prototype.capture = function () {
            this.pointer.capture(this);
        };
        PointerWatcher.prototype.release = function () {
            this.pointer.release(this);
        };
        PointerWatcher.prototype.cancel = function () {
            if (this.pointer != undefined) {
                this.cancelled.fire({ target: this });
                this.pointer.unwatch(this);
                this.pointer = undefined;
            }
        };
        PointerWatcher.prototype.down = function () {
            if (this.pointer != undefined)
                this.downed.fire({ target: this });
        };
        PointerWatcher.prototype.move = function () {
            if (this.pointer != undefined)
                this.moved.fire({ target: this });
        };
        PointerWatcher.prototype.up = function () {
            if (this.pointer != undefined)
                this.upped.fire({ target: this });
        };
        PointerWatcher.prototype.unwatch = function () {
            if (this.pointer != undefined)
                this.pointer.unwatch(this);
        };
        return PointerWatcher;
    }(Core.Object));
    Ui.PointerWatcher = PointerWatcher;
    var Pointer = (function (_super) {
        __extends(Pointer, _super);
        function Pointer(type, id) {
            var _this = _super.call(this) || this;
            _this.id = undefined;
            _this.x = 0;
            _this.y = 0;
            _this.initialX = 0;
            _this.initialY = 0;
            _this.altKey = false;
            _this.ctrlKey = false;
            _this.shiftKey = false;
            _this.type = undefined;
            _this.start = undefined;
            _this.cumulMove = 0;
            _this.chainLevel = 0;
            _this.watchers = undefined;
            _this.captureWatcher = undefined;
            _this.history = undefined;
            _this.buttons = 0;
            _this.button = 0;
            _this.ptrmoved = new Core.Events();
            _this.ptrupped = new Core.Events();
            _this.ptrdowned = new Core.Events();
            _this.ptrcanceled = new Core.Events();
            _this.type = type;
            _this.id = id;
            _this.start = (new Date().getTime()) / 1000;
            _this.watchers = [];
            _this.history = [];
            return _this;
        }
        Pointer.prototype.capture = function (watcher) {
            var watchers = this.watchers.slice();
            for (var i = 0; i < watchers.length; i++) {
                if (watchers[i] !== watcher)
                    watchers[i].cancel();
            }
            this.captureWatcher = watcher;
        };
        Pointer.prototype.release = function (watcher) {
            this.captureWatcher = undefined;
        };
        Pointer.prototype.getType = function () {
            return this.type;
        };
        Pointer.prototype.getIsDown = function () {
            return this.buttons !== 0;
        };
        Pointer.prototype.getIsCaptured = function () {
            return (this.captureWatcher !== undefined);
        };
        Pointer.prototype.getX = function () {
            return this.x;
        };
        Pointer.prototype.getY = function () {
            return this.y;
        };
        Pointer.prototype.getInitialX = function () {
            return this.initialX;
        };
        Pointer.prototype.getInitialY = function () {
            return this.initialY;
        };
        Pointer.prototype.setInitialPosition = function (x, y) {
            this.initialX = x;
            this.initialY = y;
        };
        Pointer.prototype.getButtons = function () {
            return this.buttons;
        };
        Pointer.prototype.setButtons = function (buttons) {
            this.buttons = buttons;
        };
        Pointer.prototype.getChainLevel = function () {
            return this.chainLevel;
        };
        Pointer.prototype.getAltKey = function () {
            return this.altKey;
        };
        Pointer.prototype.setAltKey = function (altKey) {
            this.altKey = altKey;
        };
        Pointer.prototype.getCtrlKey = function () {
            return this.ctrlKey;
        };
        Pointer.prototype.setCtrlKey = function (ctrlKey) {
            this.ctrlKey = ctrlKey;
        };
        Pointer.prototype.getShiftKey = function () {
            return this.shiftKey;
        };
        Pointer.prototype.setShiftKey = function (shiftKey) {
            this.shiftKey = shiftKey;
        };
        Pointer.prototype.setControls = function (altKey, ctrlKey, shiftKey) {
            this.altKey = altKey;
            this.ctrlKey = ctrlKey;
            this.shiftKey = shiftKey;
        };
        Pointer.prototype.move = function (x, y) {
            if (x === undefined)
                x = this.x;
            if (y === undefined)
                y = this.y;
            if ((this.x !== x) || (this.y !== y)) {
                var deltaX = this.x - x;
                var deltaY = this.y - y;
                this.cumulMove += Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                this.x = x;
                this.y = y;
                var time = (new Date().getTime()) / 1000;
                this.history.push({ time: time, x: this.x, y: this.y });
                while ((this.history.length > 2) && (time - this.history[0].time > Ui.Pointer.HISTORY_TIMELAPS)) {
                    this.history.shift();
                }
            }
            var watchers = this.watchers.slice();
            for (var i = 0; i < watchers.length; i++)
                watchers[i].move();
            if (this.captureWatcher === undefined) {
                var target = Ui.App.current.elementFromPoint(new Ui.Point(this.x, this.y));
                if (target != undefined) {
                    var pointerEvent = new EmuPointerEvent('ptrmoved', this);
                    pointerEvent.dispatchEvent(target);
                }
            }
            this.ptrmoved.fire({ target: this });
        };
        Pointer.prototype.getIsHold = function () {
            return (((new Date().getTime()) / 1000) - this.start) >= Ui.Pointer.HOLD_DELAY;
        };
        Pointer.prototype.getDelta = function () {
            var deltaX = this.x - this.initialX;
            var deltaY = this.y - this.initialY;
            return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        };
        Pointer.prototype.getCumulMove = function () {
            return this.cumulMove;
        };
        Pointer.prototype.getIsMove = function () {
            if (this.type == 'mouse' && this.button == 0)
                return this.cumulMove >= Pointer.MOUSE_MOVE_DELTA;
            else
                return this.cumulMove >= Pointer.MOVE_DELTA;
        };
        Pointer.prototype.getPosition = function (element) {
            var current = new Ui.Point(this.getX(), this.getY());
            return element.pointFromWindow(current);
        };
        Pointer.prototype.getIsInside = function (element) {
            var pos = this.getPosition(element);
            if ((pos.x >= 0) && (pos.x <= element.layoutWidth) &&
                (pos.y >= 0) && (pos.y <= element.layoutHeight))
                return true;
            return false;
        };
        Pointer.prototype.down = function (x, y, buttons, button) {
            this.start = (new Date().getTime()) / 1000;
            this.x = x;
            this.initialX = x;
            this.y = y;
            this.initialY = y;
            this.history = [];
            this.history.push({ time: this.start, x: this.initialX, y: this.initialY });
            this.buttons = buttons;
            this.cumulMove = 0;
            this.button = button;
            var watchers = this.watchers.slice();
            for (var i = 0; i < watchers.length; i++)
                watchers[i].down();
            var target = Ui.App.current.elementFromPoint(new Ui.Point(this.x, this.y));
            var pointerEvent = new EmuPointerEvent('ptrdowned', this);
            if (target !== undefined)
                pointerEvent.dispatchEvent(target);
            this.ptrdowned.fire({ target: this });
        };
        Pointer.prototype.up = function () {
            var watchers = this.watchers.slice();
            for (var i = 0; i < watchers.length; i++)
                watchers[i].up();
            if (this.type == 'touch')
                this.watchers = [];
            this.buttons = 0;
            var pointerEvent = new EmuPointerEvent('ptrupped', this);
            if (this.captureWatcher === undefined) {
                var target = Ui.App.current.elementFromPoint(new Ui.Point(this.x, this.y));
                if (target != undefined)
                    pointerEvent.dispatchEvent(target);
            }
            this.captureWatcher = undefined;
            this.ptrupped.fire({ target: this });
        };
        Pointer.prototype.cancel = function () {
            var watchers = this.watchers.slice();
            for (var _i = 0, watchers_1 = watchers; _i < watchers_1.length; _i++) {
                var watcher = watchers_1[_i];
                watcher.cancel();
            }
            this.captureWatcher = undefined;
            this.ptrcanceled.fire({ target: this });
        };
        Pointer.prototype.watch = function (element) {
            var watcher = new PointerWatcher(element, this);
            this.watchers.push(watcher);
            return watcher;
        };
        Pointer.prototype.unwatch = function (watcher) {
            for (var i = 0; i < this.watchers.length; i++) {
                if (this.watchers[i] === watcher) {
                    this.watchers.splice(i, 1);
                    break;
                }
            }
        };
        Pointer.HOLD_DELAY = 0.75;
        Pointer.MOUSE_MOVE_DELTA = 5;
        Pointer.MOVE_DELTA = 15;
        Pointer.HISTORY_TIMELAPS = 0.5;
        return Pointer;
    }(Core.Object));
    Ui.Pointer = Pointer;
    var PointerManager = (function (_super) {
        __extends(PointerManager, _super);
        function PointerManager(app) {
            var _this = _super.call(this) || this;
            _this.touches = undefined;
            _this.lastUpdate = undefined;
            _this.lastTouchX = -1;
            _this.lastTouchY = -1;
            _this.lastDownTouchX = -1;
            _this.lastDownTouchY = -1;
            _this.mouse = undefined;
            _this.pointers = {};
            _this.app = app;
            if ('PointerEvent' in window) {
                window.addEventListener('pointerdown', function (e) { return _this.onPointerDown(e); }, { passive: false });
                window.addEventListener('pointermove', function (e) { return _this.onPointerMove(e); }, { passive: false });
                window.addEventListener('pointerup', function (e) { return _this.onPointerUp(e); }, { passive: false });
                window.addEventListener('pointercancel', function (e) { return _this.onPointerCancel(e); }, { passive: false });
            }
            else {
                _this.mouse = new Pointer('mouse', 0);
                window.addEventListener('mousedown', function (e) { return _this.onMouseDown(e); });
                window.addEventListener('mousemove', function (e) { return _this.onMouseMove(e); });
                window.addEventListener('mouseup', function (e) { return _this.onMouseUp(e); });
                document.addEventListener('selectstart', function (e) { return _this.onSelectStart(e); });
                window.addEventListener('keydown', function (event) {
                    if ((event.which === 16) || (event.which === 17) || (event.which === 18)) {
                        _this.mouse.setControls(event.altKey, event.ctrlKey, event.shiftKey);
                        _this.mouse.move(_this.mouse.x, _this.mouse.y);
                    }
                });
                window.addEventListener('keyup', function (event) {
                    if ((event.which === 16) || (event.which === 17) || (event.which === 18)) {
                        _this.mouse.setControls(event.altKey, event.ctrlKey, event.shiftKey);
                        _this.mouse.move(_this.mouse.x, _this.mouse.y);
                    }
                });
                document.body.addEventListener('touchstart', function (e) { return _this.updateTouches(e); }, { passive: false, capture: true });
                document.body.addEventListener('touchmove', function (e) { return _this.updateTouches(e); }, { passive: false, capture: true });
                document.body.addEventListener('touchend', function (e) { return _this.updateTouches(e); }, { passive: false, capture: true });
                document.body.addEventListener('touchcancel', function (e) { return _this.updateTouches(e); }, { passive: false, capture: true });
            }
            return _this;
        }
        PointerManager.prototype.onSelectStart = function (event) {
            if (this.mouse.getIsCaptured()) {
                event.preventDefault();
                return;
            }
            var selectable = false;
            var current = event.target;
            while (current != undefined) {
                if (current.selectable === true) {
                    selectable = true;
                    break;
                }
                current = current.parentNode;
            }
            if (!selectable)
                event.preventDefault();
            else if (this.mouse !== undefined)
                this.mouse.capture(undefined);
        };
        PointerManager.prototype.onMouseDown = function (event) {
            var deltaTime = (((new Date().getTime()) / 1000) - this.lastUpdate);
            var deltaX = (this.lastTouchX - event.clientX);
            var deltaY = (this.lastTouchY - event.clientY);
            var deltaPos = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            var downDeltaX = this.lastDownTouchX - event.clientX;
            var downDeltaY = this.lastDownTouchY - event.clientY;
            var downDeltaPos = Math.sqrt(downDeltaX * downDeltaX + downDeltaY * downDeltaY);
            if ((deltaTime < 1) || ((deltaTime < 10) && ((deltaPos < 20) || (downDeltaPos < 20))))
                return;
            var buttons = 0;
            if (event.button === 0)
                buttons |= 1;
            else if (event.button === 1)
                buttons |= 2;
            else if (event.button === 2)
                buttons |= 4;
            this.mouse.setControls(event.altKey, event.ctrlKey, event.shiftKey);
            var oldButtons = this.mouse.getButtons();
            if (oldButtons === 0)
                this.mouse.down(event.clientX, event.clientY, buttons, event.button);
            else
                this.mouse.setButtons(oldButtons | buttons);
        };
        PointerManager.prototype.onMouseMove = function (event) {
            this.mouse.setControls(event.altKey, event.ctrlKey, event.shiftKey);
            var deltaTime = (((new Date().getTime()) / 1000) - this.lastUpdate);
            var deltaX = (this.lastTouchX - event.clientX);
            var deltaY = (this.lastTouchY - event.clientY);
            var deltaPos = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            var downDeltaX = this.lastDownTouchX - event.clientX;
            var downDeltaY = this.lastDownTouchY - event.clientY;
            var downDeltaPos = Math.sqrt(downDeltaX * downDeltaX + downDeltaY * downDeltaY);
            if ((deltaTime < 1) || ((deltaTime < 10) && ((deltaPos < 20) || (downDeltaPos < 20))))
                return;
            this.mouse.move(event.clientX, event.clientY);
        };
        PointerManager.prototype.onMouseUp = function (event) {
            this.mouse.setControls(event.altKey, event.ctrlKey, event.shiftKey);
            var deltaTime = (((new Date().getTime()) / 1000) - this.lastUpdate);
            var deltaX = (this.lastTouchX - event.clientX);
            var deltaY = (this.lastTouchY - event.clientY);
            var deltaPos = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            var downDeltaX = this.lastDownTouchX - event.clientX;
            var downDeltaY = this.lastDownTouchY - event.clientY;
            var downDeltaPos = Math.sqrt(downDeltaX * downDeltaX + downDeltaY * downDeltaY);
            if ((deltaTime < 1) || ((deltaTime < 10) && ((deltaPos < 20) || (downDeltaPos < 20))))
                return;
            this.mouse.move(event.clientX, event.clientY);
            this.mouse.up();
        };
        PointerManager.prototype.onWindowLoad = function () {
            try {
                if (document.body === undefined) {
                    var htmlBody = document.createElement('body');
                    document.body = htmlBody;
                }
            }
            catch (e) { }
        };
        PointerManager.prototype.onPointerDown = function (event) {
            if (!(event.target.tagName == 'INPUT' || event.target.tagName == 'TEXTAREA'))
                event.target.setPointerCapture(event.pointerId);
            if (this.pointers[event.pointerId] === undefined) {
                var type = void 0;
                if (event.pointerType === 'pen')
                    type = 'pen';
                else if (event.pointerType === 'mouse')
                    type = 'mouse';
                else
                    type = 'touch';
                var pointer = new Pointer(type, event.pointerId);
                this.pointers[event.pointerId] = pointer;
            }
            this.pointers[event.pointerId].setControls(event.altKey, event.ctrlKey, event.shiftKey);
            this.pointers[event.pointerId].down(event.clientX, event.clientY, event.buttons, event.button);
            if (this.pointers[event.pointerId].getIsCaptured())
                event.preventDefault();
        };
        PointerManager.prototype.onPointerMove = function (event) {
            if (this.pointers[event.pointerId] === undefined) {
                var type = void 0;
                if (event.pointerType === 'pen')
                    type = 'pen';
                else if (event.pointerType === 'mouse')
                    type = 'mouse';
                else
                    type = 'touch';
                var pointer = new Pointer(type, event.pointerId);
                this.pointers[event.pointerId] = pointer;
            }
            this.pointers[event.pointerId].setControls(event.altKey, event.ctrlKey, event.shiftKey);
            this.pointers[event.pointerId].move(event.clientX, event.clientY);
            if (this.pointers[event.pointerId].getIsCaptured())
                event.preventDefault();
        };
        PointerManager.prototype.onPointerUp = function (event) {
            event.target.releasePointerCapture(event.pointerId);
            if (this.pointers[event.pointerId] !== undefined) {
                this.pointers[event.pointerId].setControls(event.altKey, event.ctrlKey, event.shiftKey);
                this.pointers[event.pointerId].up();
                if (this.pointers[event.pointerId].getIsCaptured())
                    event.preventDefault();
                if (this.pointers[event.pointerId].getType() == 'touch')
                    delete (this.pointers[event.pointerId]);
            }
        };
        PointerManager.prototype.onPointerCancel = function (event) {
            event.target.releasePointerCapture(event.pointerId);
            if (this.pointers[event.pointerId] !== undefined) {
                this.pointers[event.pointerId].setControls(event.altKey, event.ctrlKey, event.shiftKey);
                this.pointers[event.pointerId].cancel();
                if (this.pointers[event.pointerId].getType() == 'touch')
                    delete (this.pointers[event.pointerId]);
            }
        };
        PointerManager.prototype.updateTouches = function (event) {
            this.lastUpdate = (new Date().getTime()) / 1000;
            var eventTaken = false;
            for (var id in this.pointers) {
                var found = false;
                for (var i = 0; (i < event.touches.length) && !found; i++) {
                    if (parseInt(id) == event.touches[i].identifier) {
                        found = true;
                        this.pointers[id].setControls(event.altKey, event.ctrlKey, event.shiftKey);
                        this.pointers[id].move(event.touches[i].clientX, event.touches[i].clientY);
                        eventTaken = eventTaken || this.pointers[id].getIsCaptured();
                    }
                }
                if (!found) {
                    this.pointers[id].setControls(event.altKey, event.ctrlKey, event.shiftKey);
                    this.pointers[id].up();
                    delete (this.pointers[id]);
                }
            }
            for (var i = 0; i < event.touches.length; i++) {
                this.lastTouchX = event.touches[i].clientX;
                this.lastTouchY = event.touches[i].clientY;
                if (this.pointers[event.touches[i].identifier] == undefined) {
                    var pointer = new Pointer('touch', event.touches[i].identifier);
                    this.pointers[event.touches[i].identifier] = pointer;
                    pointer.setControls(event.altKey, event.ctrlKey, event.shiftKey);
                    pointer.down(event.touches[i].clientX, event.touches[i].clientY, 1, 0);
                    eventTaken = eventTaken || pointer.getIsCaptured();
                }
            }
            if (event.type === 'touchstart') {
                for (var i = 0; i < event.changedTouches.length; i++) {
                    this.lastDownTouchX = event.changedTouches[i].clientX;
                    this.lastDownTouchY = event.changedTouches[i].clientY;
                }
            }
            if (eventTaken) {
                event.preventDefault();
                event.stopPropagation();
            }
        };
        return PointerManager;
    }(Core.Object));
    Ui.PointerManager = PointerManager;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var DragEffectIcon = (function (_super) {
        __extends(DragEffectIcon, _super);
        function DragEffectIcon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DragEffectIcon.prototype.onStyleChange = function () {
            var size = this.getStyleProperty('size');
            this.width = size;
            this.height = size;
        };
        DragEffectIcon.style = {
            fill: '#333333',
            stroke: '#ffffff',
            strokeWidth: 4,
            size: 16
        };
        return DragEffectIcon;
    }(Ui.DualIcon));
    Ui.DragEffectIcon = DragEffectIcon;
    var DragEvent = (function (_super) {
        __extends(DragEvent, _super);
        function DragEvent() {
            var _this = _super.call(this) || this;
            _this.clientX = 0;
            _this.clientY = 0;
            _this.ctrlKey = false;
            _this.altKey = false;
            _this.shiftKey = false;
            _this.metaKey = false;
            _this.dataTransfer = undefined;
            _this.effectAllowed = undefined;
            _this.deltaX = 0;
            _this.deltaY = 0;
            return _this;
        }
        DragEvent.prototype.preventDefault = function () {
        };
        return DragEvent;
    }(Ui.Event));
    Ui.DragEvent = DragEvent;
    var DragNativeData = (function (_super) {
        __extends(DragNativeData, _super);
        function DragNativeData(dataTransfer) {
            var _this = _super.call(this) || this;
            _this.dataTransfer = undefined;
            _this.dataTransfer = dataTransfer;
            return _this;
        }
        DragNativeData.prototype.getTypes = function () {
            return this.dataTransfer.dataTransfer.types;
        };
        DragNativeData.prototype.hasTypes = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var types = this.getTypes();
            for (var i = 0; i < types.length; i++) {
                for (var i2 = 0; i2 < args.length; i2++)
                    if (types[i].toLowerCase() === args[i2].toLowerCase())
                        return true;
            }
            return false;
        };
        DragNativeData.prototype.hasType = function (type) {
            return this.hasTypes(type);
        };
        DragNativeData.prototype.hasFiles = function () {
            return this.hasType('files');
        };
        DragNativeData.prototype.getFiles = function () {
            return this.dataTransfer.dataTransfer.files;
        };
        DragNativeData.prototype.getData = function (type) {
            return this.dataTransfer.dataTransfer.getData(type);
        };
        return DragNativeData;
    }(Core.Object));
    Ui.DragNativeData = DragNativeData;
    var DragWatcher = (function (_super) {
        __extends(DragWatcher, _super);
        function DragWatcher(element, dataTransfer) {
            var _this = _super.call(this) || this;
            _this.effectAllowed = undefined;
            _this.dataTransfer = undefined;
            _this.x = 0;
            _this.y = 0;
            _this.dropped = new Core.Events();
            _this.leaved = new Core.Events();
            _this.moved = new Core.Events();
            _this.dataTransfer = dataTransfer;
            _this.element = element;
            return _this;
        }
        DragWatcher.prototype.getPosition = function () {
            return new Ui.Point(this.x, this.y);
        };
        DragWatcher.prototype.getElement = function () {
            return this.element;
        };
        DragWatcher.prototype.getDataTransfer = function () {
            return this.dataTransfer;
        };
        DragWatcher.prototype.getEffectAllowed = function () {
            return this.effectAllowed;
        };
        DragWatcher.prototype.setEffectAllowed = function (effect) {
            this.effectAllowed = effect;
        };
        DragWatcher.prototype.move = function (x, y) {
            this.x = x;
            this.y = y;
            this.moved.fire({ target: this, x: x, y: y });
        };
        DragWatcher.prototype.leave = function () {
            this.leaved.fire({ target: this });
        };
        DragWatcher.prototype.drop = function (dropEffect) {
            this.dropped.fire({ target: this, effect: dropEffect, x: this.x, y: this.y });
        };
        DragWatcher.prototype.release = function () {
            this.dataTransfer.releaseDragWatcher(this);
        };
        return DragWatcher;
    }(Core.Object));
    Ui.DragWatcher = DragWatcher;
    var DragEmuDataTransfer = (function (_super) {
        __extends(DragEmuDataTransfer, _super);
        function DragEmuDataTransfer(draggable, imageElement, x, y, delayed, pointerEvent, touchEvent, mouseEvent) {
            var _this = _super.call(this) || this;
            _this.startX = 0;
            _this.startY = 0;
            _this.dropX = 0;
            _this.dropY = 0;
            _this.x = 0;
            _this.y = 0;
            _this.hasStarted = false;
            _this.delayed = false;
            _this.started = new Core.Events();
            _this.ended = new Core.Events();
            _this.onKeyUpDown = function (e) {
                _this.pointer.ctrlKey = e.ctrlKey;
                _this.pointer.altKey = e.altKey;
                _this.pointer.shiftKey = e.shiftKey;
                _this.pointer.move(_this.pointer.x, _this.pointer.y);
            };
            _this.onPointerMove = function (e) {
                var deltaX;
                var deltaY;
                var delta;
                var dragEvent;
                var ofs;
                var watcher = e.target;
                if (watcher.getIsCaptured()) {
                    var clientX = watcher.pointer.getX();
                    var clientY = watcher.pointer.getY();
                    _this.x = clientX;
                    _this.y = clientY;
                    document.body.removeChild(_this.image);
                    var overElement = Ui.App.current.elementFromPoint(new Ui.Point(clientX, clientY));
                    document.body.appendChild(_this.image);
                    deltaX = clientX - _this.startX;
                    deltaY = clientY - _this.startY;
                    ofs = _this.delayed ? -10 : 0;
                    _this.image.style.left = (_this.startImagePoint.x + deltaX + ofs) + 'px';
                    _this.image.style.top = (_this.startImagePoint.y + deltaY + ofs) + 'px';
                    if (overElement != undefined) {
                        var oldDropEffectIcon = _this.dropEffectIcon;
                        var dragEvent_1 = new DragEvent();
                        dragEvent_1.setType('dragover');
                        dragEvent_1.clientX = clientX;
                        dragEvent_1.clientY = clientY;
                        dragEvent_1.dataTransfer = _this;
                        var effectAllowed = [];
                        dragEvent_1.dispatchEvent(overElement);
                        if (_this.dragWatcher !== undefined)
                            effectAllowed = _this.dragWatcher.getEffectAllowed();
                        if ((_this.dragWatcher !== undefined) && !overElement.getIsChildOf(_this.dragWatcher.getElement())) {
                            _this.dragWatcher.leave();
                            _this.dragWatcher = undefined;
                        }
                        if (_this.dragWatcher !== undefined)
                            _this.dragWatcher.move(clientX, clientY);
                        _this.dropEffect = DragEmuDataTransfer.getMatchingDropEffect(_this.effectAllowed, effectAllowed, watcher.pointer.getType(), watcher.pointer.getCtrlKey(), watcher.pointer.getAltKey(), watcher.pointer.getShiftKey());
                        if (_this.dropEffect.length > 1)
                            _this.dropEffectIcon = 'dragchoose';
                        else if (_this.dropEffect.length > 0)
                            _this.dropEffectIcon = _this.dropEffect[0].dragicon;
                        else
                            _this.dropEffectIcon = undefined;
                        if (_this.dropEffectIcon !== oldDropEffectIcon) {
                            if (_this.imageEffect !== undefined) {
                                _this.imageEffect.isLoaded = false;
                                _this.image.removeChild(_this.imageEffect.drawing);
                                _this.imageEffect = undefined;
                            }
                            if (_this.dropEffectIcon !== undefined) {
                                _this.imageEffect = new DragEffectIcon();
                                _this.imageEffect.icon = _this.dropEffectIcon;
                                _this.imageEffect.parent = Ui.App.current;
                                _this.imageEffect.isLoaded = true;
                                _this.imageEffect.parentVisible = true;
                                _this.imageEffect.setParentDisabled(false);
                                var size = _this.imageEffect.measure(0, 0);
                                _this.imageEffect.arrange(-size.width + (_this.startX - _this.startImagePoint.x - ofs), -size.height + (_this.startY - _this.startImagePoint.y - ofs), size.width, size.height);
                                _this.image.appendChild(_this.imageEffect.drawing);
                            }
                        }
                        _this.overElement = overElement;
                    }
                    else
                        _this.overElement = undefined;
                }
                else {
                    if (watcher.pointer.getIsMove()) {
                        if (_this.delayed)
                            watcher.cancel();
                        else
                            _this.onTimer();
                    }
                }
            };
            _this.onPointerUp = function (e) {
                if (_this.timer !== undefined) {
                    _this.timer.abort();
                    _this.timer = undefined;
                }
                var watcher = e.target;
                _this.watcher.moved.disconnect(_this.onPointerMove);
                _this.watcher.upped.disconnect(_this.onPointerUp);
                _this.watcher.cancelled.disconnect(_this.onPointerCancel);
                window.removeEventListener('keydown', _this.onKeyUpDown, true);
                window.removeEventListener('keyup', _this.onKeyUpDown, true);
                if (!watcher.getIsCaptured())
                    watcher.cancel();
                else {
                    if (_this.dragWatcher !== undefined) {
                        _this.removeImage();
                        _this.dragWatcher.leave();
                        if (_this.dropEffect.length === 1) {
                            _this.dragWatcher.drop(_this.dropEffect[0].action);
                            _this.ended.fire({ target: _this });
                        }
                        else if (_this.dropEffect.length > 1) {
                            var popup_1 = new Ui.Popup();
                            popup_1.onclosed = function () { return _this.ended.fire({ target: _this }); };
                            var vbox = new Ui.VBox();
                            popup_1.content = vbox;
                            for (var i = 0; i < _this.dropEffect.length; i++) {
                                var button = new Ui.FlatButton();
                                button.text = _this.dropEffect[i].text;
                                button['Ui.DragEvent.dropEffect'] = _this.dropEffect[i];
                                button.pressed.connect(function (e) {
                                    _this.dragWatcher.drop(e.target['Ui.DragEvent.dropEffect'].action);
                                    popup_1.close();
                                });
                                vbox.append(button);
                            }
                            popup_1.openAt(_this.x, _this.y);
                        }
                    }
                    else {
                        _this.dropX = watcher.pointer.getX();
                        _this.dropY = watcher.pointer.getY();
                        _this.dropFailsTimer = new Anim.Clock({
                            duration: 0.25, ease: new Anim.PowerEase({ mode: 'out' }),
                            ontimeupdate: function (e) { return _this.onDropFailsTimerUpdate(e.target, e.progress); }
                        });
                        _this.dropFailsTimer.begin();
                        _this.ended.fire({ target: _this });
                    }
                }
            };
            _this.onPointerCancel = function (e) {
                if (_this.timer !== undefined) {
                    _this.timer.abort();
                    _this.timer = undefined;
                }
            };
            _this.dropEffect = [];
            _this.effectAllowed = [];
            _this.draggable = draggable;
            _this.imageElement = imageElement;
            _this.startX = x;
            _this.startY = y;
            _this.delayed = delayed;
            _this.dragDelta = _this.draggable.pointFromWindow(new Ui.Point(_this.startX, _this.startY));
            var onContextMenu = function (e) {
                e.stopImmediatePropagation();
                e.preventDefault();
            };
            if (pointerEvent) {
                if (pointerEvent.type == 'touch')
                    _this.draggable.drawing.addEventListener('contextmenu', onContextMenu, { capture: true });
                _this.pointer = new Ui.Pointer(pointerEvent.pointerType, pointerEvent.pointerId);
                _this.pointer.setInitialPosition(pointerEvent.clientX, pointerEvent.clientY);
                _this.pointer.ctrlKey = pointerEvent.ctrlKey;
                _this.pointer.altKey = pointerEvent.altKey;
                _this.pointer.shiftKey = pointerEvent.shiftKey;
                _this.pointer.down(pointerEvent.clientX, pointerEvent.clientY, pointerEvent.buttons, pointerEvent.button);
                var onPointerMove_1 = function (e) {
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    _this.pointer.move(e.clientX, e.clientY);
                };
                var onPointerUp_1 = function (e) {
                    if (_this.pointer.getIsCaptured()) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    _this.pointer.up();
                    window.removeEventListener('pointermove', onPointerMove_1, { capture: true });
                    window.removeEventListener('pointerup', onPointerUp_1, { capture: true });
                    window.removeEventListener('pointercancel', onPointerCancel_1, { capture: true });
                    if (pointerEvent.type == 'touch')
                        _this.draggable.drawing.removeEventListener('contextmenu', onContextMenu, { capture: true });
                };
                var onPointerCancel_1 = function (e) {
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    _this.pointer.cancel();
                    window.removeEventListener('pointermove', onPointerMove_1, { capture: true });
                    window.removeEventListener('pointerup', onPointerUp_1, { capture: true });
                    window.removeEventListener('pointercancel', onPointerCancel_1, { capture: true });
                    if (pointerEvent.type == 'touch')
                        _this.draggable.drawing.removeEventListener('contextmenu', onContextMenu, { capture: true });
                };
                window.addEventListener('pointermove', onPointerMove_1, { capture: true, passive: false });
                window.addEventListener('pointerup', onPointerUp_1, { capture: true, passive: false });
                window.addEventListener('pointercancel', onPointerCancel_1, { capture: true, passive: false });
            }
            else if (touchEvent) {
                _this.draggable.drawing.addEventListener('contextmenu', onContextMenu, { capture: true });
                var touch = touchEvent.targetTouches[0];
                _this.pointer = new Ui.Pointer('touch', touch.identifier);
                _this.pointer.setInitialPosition(touch.clientX, touch.clientY);
                _this.pointer.ctrlKey = touchEvent.ctrlKey;
                _this.pointer.altKey = touchEvent.altKey;
                _this.pointer.shiftKey = touchEvent.shiftKey;
                _this.pointer.down(touch.clientX, touch.clientY, 1, 1);
                var onTouchMove_1 = function (e) {
                    var touch;
                    for (var i = 0; touch == undefined && i < e.touches.length; i++)
                        if (e.touches[i].identifier == _this.pointer.id)
                            touch = e.touches[i];
                    if (!touch)
                        return;
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    _this.pointer.move(touch.clientX, touch.clientY);
                    e.stopImmediatePropagation();
                    if (_this.pointer.getIsCaptured())
                        e.preventDefault();
                };
                var onTouchEnd_1 = function (e) {
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    _this.pointer.up();
                    window.removeEventListener('touchmove', onTouchMove_1, { capture: true });
                    window.removeEventListener('touchend', onTouchEnd_1, { capture: true });
                    window.removeEventListener('touchcancel', onTouchCancel_1, { capture: true });
                    _this.draggable.drawing.removeEventListener('contextmenu', onContextMenu, { capture: true });
                    e.stopImmediatePropagation();
                    if (_this.pointer.getIsCaptured())
                        e.preventDefault();
                };
                var onTouchCancel_1 = function (e) {
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    _this.pointer.cancel();
                    window.removeEventListener('touchmove', onTouchMove_1, { capture: true });
                    window.removeEventListener('touchend', onTouchEnd_1, { capture: true });
                    window.removeEventListener('touchcancel', onTouchCancel_1, { capture: true });
                    _this.draggable.drawing.removeEventListener('contextmenu', onContextMenu, { capture: true });
                };
                window.addEventListener('touchmove', onTouchMove_1, { capture: true, passive: false });
                window.addEventListener('touchend', onTouchEnd_1, { capture: true, passive: false });
                window.addEventListener('touchcancel', onTouchCancel_1, { capture: true, passive: false });
            }
            else if (mouseEvent) {
                _this.pointer = new Ui.Pointer(mouseEvent.type, 0);
                _this.pointer.setInitialPosition(mouseEvent.clientX, mouseEvent.clientY);
                _this.pointer.ctrlKey = mouseEvent.ctrlKey;
                _this.pointer.altKey = mouseEvent.altKey;
                _this.pointer.shiftKey = mouseEvent.shiftKey;
                _this.pointer.down(mouseEvent.clientX, mouseEvent.clientY, mouseEvent.buttons, mouseEvent.button);
                var onMouseMove_1 = function (e) {
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    if (e.button == 0)
                        _this.pointer.move(e.clientX, e.clientY);
                };
                var onMouseUp_1 = function (e) {
                    _this.pointer.ctrlKey = e.ctrlKey;
                    _this.pointer.altKey = e.altKey;
                    _this.pointer.shiftKey = e.shiftKey;
                    if (e.button == 0) {
                        if (_this.pointer.getIsCaptured()) {
                            e.preventDefault();
                            e.stopImmediatePropagation();
                        }
                        _this.pointer.up();
                        window.removeEventListener('mousemove', onMouseMove_1, true);
                        window.removeEventListener('mouseup', onMouseUp_1, true);
                    }
                };
                window.addEventListener('mousemove', onMouseMove_1, true);
                window.addEventListener('mouseup', onMouseUp_1, true);
            }
            _this.watcher = _this.pointer.watch(Ui.App.current);
            _this.watcher.moved.connect(_this.onPointerMove);
            _this.watcher.upped.connect(_this.onPointerUp);
            _this.watcher.cancelled.connect(_this.onPointerCancel);
            window.addEventListener('keydown', _this.onKeyUpDown, true);
            window.addEventListener('keyup', _this.onKeyUpDown, true);
            if (_this.delayed)
                _this.timer = new Core.DelayedTask(0.5, function () { return _this.onTimer(); });
            return _this;
        }
        DragEmuDataTransfer.prototype.setData = function (data) {
            this._data = data;
        };
        DragEmuDataTransfer.prototype.getData = function () {
            return this._data;
        };
        DragEmuDataTransfer.prototype.hasData = function () {
            return this._data !== undefined;
        };
        DragEmuDataTransfer.prototype.getPosition = function () {
            return new Ui.Point(this.x, this.y);
        };
        DragEmuDataTransfer.prototype.getDragDelta = function () {
            return this.dragDelta;
        };
        DragEmuDataTransfer.prototype.generateImage = function (element) {
            var res;
            var key;
            var child;
            var i;
            if (('tagName' in element) && (element.tagName.toUpperCase() == 'IMG')) {
                res = element.cloneNode(false);
                res.oncontextmenu = function (e) { e.preventDefault(); };
            }
            else if (('tagName' in element) && (element.tagName.toUpperCase() == 'CANVAS')) {
                res = document.createElement('img');
                res.oncontextmenu = function (e) { e.preventDefault(); };
                for (key in element.style)
                    res.style[key] = element.style[key];
                res.setAttribute('src', element.toDataURL('image/png'));
            }
            else if (!Core.Navigator.isFirefox && (element.toDataURL !== undefined)) {
                res = document.createElement('img');
                res.oncontextmenu = function (e) { e.preventDefault(); };
                for (key in element.style)
                    res.style[key] = element.style[key];
                res.setAttribute('src', element.toDataURL('image/png'));
            }
            else {
                res = element.cloneNode(false);
                if ('style' in res) {
                    res.style.webkitUserSelect = 'none';
                    res.style.webkitUserCallout = 'none';
                }
                for (i = 0; i < element.childNodes.length; i++) {
                    child = element.childNodes[i];
                    res.appendChild(this.generateImage(child));
                }
            }
            if ('setAttribute' in res)
                res.setAttribute('draggable', false);
            res.onselectstart = function (e) {
                e.preventDefault();
                return false;
            };
            if ('style' in res)
                res.style.touchAction = 'none';
            return res;
        };
        DragEmuDataTransfer.prototype.onTimer = function () {
            var _this = this;
            this.timer = undefined;
            this.started.fire({ target: this });
            if (this.hasData()) {
                this.hasStarted = true;
                this.image = document.createElement('div');
                this.image.style.touchAction = 'none';
                this.image.style.zIndex = '100000';
                this.image.style.position = 'absolute';
                var generateImage = function (el) {
                    var image = _this.generateImage(el.drawing);
                    if ('removeProperty' in image.style)
                        image.style.removeProperty('transform');
                    if (Core.Navigator.isIE && ('removeProperty' in image.style))
                        image.style.removeProperty('-ms-transform');
                    else if (Core.Navigator.isGecko)
                        image.style.removeProperty('-moz-transform');
                    else if (Core.Navigator.isWebkit)
                        image.style.removeProperty('-webkit-transform');
                    image.style.left = '0px';
                    image.style.top = '0px';
                    image.style.touchAction = 'none';
                    image.oncontextmenu = function (e) { return e.preventDefault(); };
                    return image;
                };
                if (this._data instanceof Ui.Selection) {
                    var sel = this._data;
                    var els = sel.elements;
                    for (var i = Math.max(0, els.length - 6); i < els.length; i++) {
                        var invPos = els.length - (i + 1);
                        var op = 0.1;
                        if (invPos == 0)
                            op = 1;
                        else if (invPos == 1)
                            op = 0.95;
                        else if (invPos == 2)
                            op = 0.7;
                        else if (invPos == 3)
                            op = 0.5;
                        else if (invPos == 4)
                            op = 0.2;
                        var image = generateImage(els[i]);
                        image.style.left = invPos * 5 + "px";
                        image.style.top = invPos * 5 + "px";
                        image.style.opacity = op.toString();
                        this.image.appendChild(image);
                    }
                }
                else {
                    var image = generateImage(this.imageElement);
                    this.image.appendChild(image);
                }
                if (Core.Navigator.supportOpacity)
                    this.image.style.opacity = '0.8';
                var ofs = this.delayed ? -10 : 0;
                this.startImagePoint = this.imageElement.pointToWindow(new Ui.Point());
                this.image.style.left = (this.startImagePoint.x + ofs) + 'px';
                this.image.style.top = (this.startImagePoint.y + ofs) + 'px';
                document.body.appendChild(this.image);
                this.watcher.capture();
            }
            else {
                this.watcher.cancel();
            }
        };
        DragEmuDataTransfer.prototype.capture = function (element, effect) {
            if ((this.dragWatcher !== undefined) && (this.dragWatcher.getElement() === element))
                throw ('Drag already captured by the given element');
            if (this.dragWatcher !== undefined)
                this.dragWatcher.leave();
            this.dragWatcher = new DragWatcher(element, this);
            this.dragWatcher.setEffectAllowed(effect);
            return this.dragWatcher;
        };
        DragEmuDataTransfer.prototype.releaseDragWatcher = function (dragWatcher) {
            if (this.dragWatcher === dragWatcher) {
                this.dragWatcher.leave();
                this.dragWatcher = undefined;
            }
        };
        DragEmuDataTransfer.prototype.removeImage = function () {
            document.body.removeChild(this.image);
        };
        DragEmuDataTransfer.prototype.onDropFailsTimerUpdate = function (clock, progress) {
            if (progress >= 1)
                this.removeImage();
            else {
                var deltaX = (this.dropX - this.startX) * (1 - progress);
                var deltaY = (this.dropY - this.startY) * (1 - progress);
                this.image.style.left = (this.startImagePoint.x + deltaX) + 'px';
                this.image.style.top = (this.startImagePoint.y + deltaY) + 'px';
            }
        };
        DragEmuDataTransfer.getMergedEffectAllowed = function (effectAllowed1, effectAllowed2) {
            if ((effectAllowed1 === undefined) || (effectAllowed1 === 'all'))
                return effectAllowed2;
            else {
                var effectAllowed = [];
                for (var i = 0; i < effectAllowed1.length; i++) {
                    for (var i2 = 0; i2 < effectAllowed2.length; i2++) {
                        if (effectAllowed1[i] === effectAllowed2[i2].action)
                            effectAllowed.push(effectAllowed2[i2]);
                    }
                }
                return effectAllowed;
            }
        };
        DragEmuDataTransfer.getMatchingDropEffect = function (srcEffectAllowed, dstEffectAllowed, pointerType, ctrlKey, altKey, shiftKey) {
            var effectAllowed = DragEmuDataTransfer.getMergedEffectAllowed(srcEffectAllowed, dstEffectAllowed);
            var dropEffect = effectAllowed;
            if (effectAllowed.length > 1) {
                if (pointerType === 'mouse') {
                    if (!altKey) {
                        if (ctrlKey) {
                            for (var i = 0; i < effectAllowed.length; i++) {
                                if (effectAllowed[i].secondary === true)
                                    dropEffect = [effectAllowed[i]];
                            }
                            if ((dropEffect === effectAllowed) && (effectAllowed.length > 1))
                                dropEffect = [effectAllowed[1]];
                        }
                        else {
                            for (var i = 0; i < effectAllowed.length; i++) {
                                if (effectAllowed[i].primary === true)
                                    dropEffect = [effectAllowed[i]];
                            }
                            if (dropEffect === effectAllowed)
                                dropEffect = [effectAllowed[0]];
                        }
                    }
                }
            }
            return dropEffect;
        };
        return DragEmuDataTransfer;
    }(Core.Object));
    Ui.DragEmuDataTransfer = DragEmuDataTransfer;
    var DragNativeDataTransfer = (function (_super) {
        __extends(DragNativeDataTransfer, _super);
        function DragNativeDataTransfer() {
            var _this = _super.call(this) || this;
            _this.dataTransfer = undefined;
            _this.dragWatcher = undefined;
            _this.nativeData = undefined;
            _this.dropEffect = 'none';
            _this.position = undefined;
            _this.nativeData = new DragNativeData(_this);
            return _this;
        }
        DragNativeDataTransfer.prototype.getPosition = function () {
            return this.position;
        };
        DragNativeDataTransfer.prototype.setPosition = function (position) {
            this.position = position;
        };
        DragNativeDataTransfer.prototype.getData = function () {
            return this.nativeData;
        };
        DragNativeDataTransfer.prototype.setDataTransfer = function (dataTransfer) {
            this.dataTransfer = dataTransfer;
        };
        DragNativeDataTransfer.prototype.capture = function (element, effect) {
            if ((this.dragWatcher !== undefined) && (this.dragWatcher.getElement() === element))
                throw ('Drag already captured by the given element');
            if (this.dragWatcher !== undefined)
                this.dragWatcher.leave();
            this.dragWatcher = new DragWatcher(element, this);
            this.dragWatcher.setEffectAllowed(effect);
            return this.dragWatcher;
        };
        DragNativeDataTransfer.prototype.releaseDragWatcher = function (dragWatcher) {
            if (this.dragWatcher === dragWatcher) {
                this.dragWatcher.leave();
                this.dragWatcher = undefined;
            }
        };
        return DragNativeDataTransfer;
    }(Core.Object));
    Ui.DragNativeDataTransfer = DragNativeDataTransfer;
    var DragNativeManager = (function (_super) {
        __extends(DragNativeManager, _super);
        function DragNativeManager(app) {
            var _this = _super.call(this) || this;
            _this.nativeTarget = undefined;
            _this.app = app;
            _this.dataTransfer = new DragNativeDataTransfer();
            _this.app.drawing.addEventListener('dragover', function (e) { return _this.onDragOver(e); });
            _this.app.drawing.addEventListener('dragenter', function (e) { return _this.onDragEnter(e); });
            _this.app.drawing.addEventListener('dragleave', function (e) { return _this.onDragLeave(e); });
            _this.app.drawing.addEventListener('drop', function (e) { return _this.onDrop(e); });
            return _this;
        }
        DragNativeManager.prototype.onDragOver = function (event) {
            this.dataTransfer.setDataTransfer(event.dataTransfer);
            var point = new Ui.Point(event.clientX, event.clientY);
            this.dataTransfer.setPosition(point);
            var overElement = this.app.elementFromPoint(point);
            if (overElement !== undefined) {
                var dragEvent = new DragEvent();
                dragEvent.setType('dragover');
                dragEvent.clientX = event.clientX;
                dragEvent.clientY = event.clientY;
                dragEvent.dataTransfer = this.dataTransfer;
                dragEvent.dispatchEvent(overElement);
                if ((this.dataTransfer.dragWatcher !== undefined) &&
                    !overElement.getIsChildOf(this.dataTransfer.dragWatcher.getElement())) {
                    this.dataTransfer.dragWatcher.leave();
                    this.dataTransfer.dragWatcher = undefined;
                }
            }
            if (this.dataTransfer.dragWatcher !== undefined) {
                var dropEffect = DragEmuDataTransfer.getMergedEffectAllowed(this.nativeToCustom(event.dataTransfer.effectAllowed), this.dataTransfer.dragWatcher.effectAllowed);
                this.dataTransfer.dragWatcher.move(event.clientX, event.clientY);
                event.dataTransfer.dropEffect = this.customToNative(dropEffect);
            }
            else
                event.dataTransfer.dropEffect = 'none';
            event.stopImmediatePropagation();
            event.preventDefault();
            return false;
        };
        DragNativeManager.prototype.onDragEnter = function (e) {
            this.nativeTarget = e.target;
        };
        DragNativeManager.prototype.onDragLeave = function (e) {
            if (this.nativeTarget !== e.target)
                return;
            this.nativeTarget = undefined;
            if (this.dataTransfer.dragWatcher !== undefined) {
                this.dataTransfer.dragWatcher.leave();
                this.dataTransfer.dragWatcher = undefined;
            }
        };
        DragNativeManager.prototype.onDrop = function (event) {
            this.dataTransfer.setDataTransfer(event.dataTransfer);
            if (this.dataTransfer.dragWatcher !== undefined) {
                this.dataTransfer.dragWatcher.leave();
                var dropEffect = DragEmuDataTransfer.getMergedEffectAllowed(this.nativeToCustom(event.dataTransfer.effectAllowed), this.dataTransfer.dragWatcher.effectAllowed);
                event.dataTransfer.dropEffect = this.customToNative(dropEffect);
                if (dropEffect.length > 0)
                    this.dataTransfer.dragWatcher.drop(dropEffect[0].action);
                this.dataTransfer.dragWatcher = undefined;
            }
            event.stopImmediatePropagation();
            event.preventDefault();
        };
        DragNativeManager.prototype.nativeToCustom = function (effectAllowed) {
            if (effectAllowed === 'copy')
                return ['copy'];
            else if (effectAllowed === 'link')
                return ['link'];
            else if (effectAllowed === 'move')
                return ['move'];
            else if (effectAllowed === 'copyLink')
                return ['copy', 'link'];
            else if (effectAllowed === 'copyMove')
                return ['move', 'copy'];
            else if (effectAllowed === 'linkMove')
                return ['move', 'link'];
            else if (effectAllowed === 'all')
                return ['move', 'copy', 'link'];
        };
        DragNativeManager.prototype.customToNative = function (effectAllowed) {
            var containsLink = false;
            var containsCopy = false;
            var containsMove = false;
            for (var i = 0; i < effectAllowed.length; i++) {
                if (effectAllowed[i].action === 'link')
                    containsLink = true;
                else if (effectAllowed[i].action === 'move')
                    containsMove = true;
                else if (effectAllowed[i].action === 'copy')
                    containsCopy = true;
            }
            if (containsLink && containsCopy && containsMove)
                return 'all';
            else if (containsLink && containsCopy)
                return 'copyLink';
            else if (containsLink && containsMove)
                return 'linkMove';
            else if (containsMove && containsCopy)
                return 'copyMove';
            else if (containsLink)
                return 'link';
            else if (containsMove)
                return 'move';
            else if (containsCopy)
                return 'copy';
            else
                return 'none';
        };
        return DragNativeManager;
    }(Core.Object));
    Ui.DragNativeManager = DragNativeManager;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var WheelEvent = (function (_super) {
        __extends(WheelEvent, _super);
        function WheelEvent() {
            var _this = _super.call(this) || this;
            _this.deltaX = 0;
            _this.deltaY = 0;
            _this.clientX = 0;
            _this.clientY = 0;
            _this.ctrlKey = false;
            _this.altKey = false;
            _this.shiftKey = false;
            _this.metaKey = false;
            _this.setType('wheelchanged');
            return _this;
        }
        WheelEvent.prototype.setClientX = function (clientX) {
            this.clientX = clientX;
        };
        WheelEvent.prototype.setClientY = function (clientY) {
            this.clientY = clientY;
        };
        WheelEvent.prototype.setDeltaX = function (deltaX) {
            this.deltaX = deltaX;
        };
        WheelEvent.prototype.setDeltaY = function (deltaY) {
            this.deltaY = deltaY;
        };
        WheelEvent.prototype.setCtrlKey = function (ctrlKey) {
            this.ctrlKey = ctrlKey;
        };
        WheelEvent.prototype.setAltKey = function (altKey) {
            this.altKey = altKey;
        };
        WheelEvent.prototype.setShiftKey = function (shiftKey) {
            this.shiftKey = shiftKey;
        };
        WheelEvent.prototype.setMetaKey = function (metaKey) {
            this.metaKey = metaKey;
        };
        return WheelEvent;
    }(Ui.Event));
    Ui.WheelEvent = WheelEvent;
    var WheelManager = (function (_super) {
        __extends(WheelManager, _super);
        function WheelManager(app) {
            var _this = _super.call(this) || this;
            _this.app = app;
            _this.app.drawing.addEventListener('mousewheel', function (e) { return _this.onMouseWheel(e); });
            _this.app.drawing.addEventListener('DOMMouseScroll', function (e) { return _this.onMouseWheel(e); });
            return _this;
        }
        WheelManager.prototype.onMouseWheel = function (event) {
            var deltaX = 0;
            var deltaY = 0;
            if ((event.wheelDeltaX != undefined) && (event.wheelDeltaY != undefined)) {
                deltaX = -event.wheelDeltaX / 5;
                deltaY = -event.wheelDeltaY / 5;
            }
            else if (event.wheelDelta != undefined)
                deltaY = -event.wheelDelta / 2;
            else if (event.detail != undefined)
                deltaY = event.detail * 20;
            var target = Ui.App.current.elementFromPoint(new Ui.Point(event.clientX, event.clientY));
            if (target !== undefined) {
                var wheelEvent = new Ui.WheelEvent();
                wheelEvent.setClientX(event.clientX);
                wheelEvent.setClientY(event.clientY);
                wheelEvent.setDeltaX(deltaX);
                wheelEvent.setDeltaY(deltaY);
                wheelEvent.setCtrlKey(event.ctrlKey);
                wheelEvent.setAltKey(event.altKey);
                wheelEvent.setShiftKey(event.shiftKey);
                wheelEvent.setMetaKey(event.metaKey);
                wheelEvent.dispatchEvent(target);
                if (wheelEvent.getIsPropagationStopped())
                    event.preventDefault();
            }
        };
        return WheelManager;
    }(Core.Object));
    Ui.WheelManager = WheelManager;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var LBox = (function (_super) {
        __extends(LBox, _super);
        function LBox(init) {
            var _this = _super.call(this, init) || this;
            _this._paddingTop = 0;
            _this._paddingBottom = 0;
            _this._paddingLeft = 0;
            _this._paddingRight = 0;
            if (init) {
                if (init.padding !== undefined)
                    _this.padding = init.padding;
                if (init.paddingTop !== undefined)
                    _this.paddingTop = init.paddingTop;
                if (init.paddingBottom !== undefined)
                    _this.paddingBottom = init.paddingBottom;
                if (init.paddingLeft !== undefined)
                    _this.paddingLeft = init.paddingLeft;
                if (init.paddingRight !== undefined)
                    _this.paddingRight = init.paddingRight;
                if (init.content !== undefined)
                    _this.content = init.content;
            }
            return _this;
        }
        LBox.prototype.setContent = function (content) {
            if ((this.children.length === 1) && (content === this.firstChild))
                return;
            while (this.firstChild != undefined)
                this.removeChild(this.firstChild);
            if (content != undefined) {
                if (content instanceof Array) {
                    var elements = content;
                    for (var i = 0; i < elements.length; i++)
                        this.append(content[i]);
                }
                else
                    this.append(content);
            }
        };
        Object.defineProperty(LBox.prototype, "content", {
            set: function (content) {
                this.setContent(content);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LBox.prototype, "padding", {
            set: function (padding) {
                this.paddingTop = padding;
                this.paddingBottom = padding;
                this.paddingLeft = padding;
                this.paddingRight = padding;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LBox.prototype, "paddingTop", {
            get: function () {
                return this._paddingTop;
            },
            set: function (paddingTop) {
                if (this._paddingTop != paddingTop) {
                    this._paddingTop = paddingTop;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LBox.prototype, "paddingBottom", {
            get: function () {
                return this._paddingBottom;
            },
            set: function (paddingBottom) {
                if (this._paddingBottom != paddingBottom) {
                    this._paddingBottom = paddingBottom;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LBox.prototype, "paddingLeft", {
            get: function () {
                return this._paddingLeft;
            },
            set: function (paddingLeft) {
                if (this._paddingLeft != paddingLeft) {
                    this._paddingLeft = paddingLeft;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LBox.prototype, "paddingRight", {
            get: function () {
                return this._paddingRight;
            },
            set: function (paddingRight) {
                if (this._paddingRight != paddingRight) {
                    this._paddingRight = paddingRight;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        LBox.prototype.append = function (child) {
            this.appendChild(child);
        };
        LBox.prototype.prepend = function (child) {
            this.prependChild(child);
        };
        LBox.prototype.insertBefore = function (child, beforeChild) {
            this.insertChildBefore(child, beforeChild);
        };
        LBox.prototype.remove = function (child) {
            this.removeChild(child);
        };
        LBox.prototype.measureCore = function (width, height) {
            var left = this.paddingLeft;
            var right = this.paddingRight;
            var top = this.paddingTop;
            var bottom = this.paddingBottom;
            var constraintWidth = Math.max(width - (left + right), 0);
            var constraintHeight = Math.max(height - (top + bottom), 0);
            var minWidth = 0;
            var minHeight = 0;
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var size = child.measure(constraintWidth, constraintHeight);
                if (size.width > minWidth)
                    minWidth = size.width;
                if (size.height > minHeight)
                    minHeight = size.height;
            }
            minWidth += left + right;
            minHeight += top + bottom;
            return { width: minWidth, height: minHeight };
        };
        LBox.prototype.arrangeCore = function (width, height) {
            var left = this.paddingLeft;
            var right = this.paddingRight;
            var top = this.paddingTop;
            var bottom = this.paddingBottom;
            width -= left + right;
            height -= top + bottom;
            for (var i = 0; i < this.children.length; i++)
                this.children[i].arrange(left, top, width, height);
        };
        return LBox;
    }(Ui.Container));
    Ui.LBox = LBox;
    var LPBox = (function (_super) {
        __extends(LPBox, _super);
        function LPBox(init) {
            return _super.call(this, init) || this;
        }
        LPBox.prototype.appendAtLayer = function (child, layer) {
            if (layer === undefined)
                layer = 1;
            child['Ui.LPBox.layer'] = layer;
            var i = 0;
            for (; (i < this.children.length) && (this.children[i]['Ui.LPBox.layer'] <= layer); i++) { }
            this.insertChildAt(child, i);
        };
        LPBox.prototype.prependAtLayer = function (child, layer) {
            if (layer === undefined)
                layer = 1;
            child['Ui.LPBox.layer'] = layer;
            var i = 0;
            for (; (i < this.children.length) && (this.children[i]['Ui.LPBox.layer'] < layer); i++) { }
            i = Math.max(0, i);
            this.insertChildAt(child, i);
        };
        return LPBox;
    }(LBox));
    Ui.LPBox = LPBox;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Box = (function (_super) {
        __extends(Box, _super);
        function Box(init) {
            var _this = _super.call(this, init) || this;
            _this._paddingTop = 0;
            _this._paddingBottom = 0;
            _this._paddingLeft = 0;
            _this._paddingRight = 0;
            _this._uniform = false;
            _this._spacing = 0;
            _this.star = 0;
            _this.vertical = true;
            _this.uniformSize = 0;
            if (init) {
                if (init.orientation !== undefined)
                    _this.orientation = init.orientation;
                if (init.padding !== undefined)
                    _this.padding = init.padding;
                if (init.paddingTop !== undefined)
                    _this.paddingTop = init.paddingTop;
                if (init.paddingBottom !== undefined)
                    _this.paddingBottom = init.paddingBottom;
                if (init.paddingLeft !== undefined)
                    _this.paddingLeft = init.paddingLeft;
                if (init.paddingRight !== undefined)
                    _this.paddingRight = init.paddingRight;
                if (init.uniform !== undefined)
                    _this.uniform = init.uniform;
                if (init.spacing !== undefined)
                    _this.spacing = init.spacing;
                if (init.content !== undefined)
                    _this.content = init.content;
            }
            return _this;
        }
        Object.defineProperty(Box.prototype, "content", {
            set: function (content) {
                while (this.firstChild !== undefined)
                    this.removeChild(this.firstChild);
                if (content != undefined) {
                    if (content instanceof Ui.Element)
                        this.append(content);
                    else {
                        var ar = content;
                        for (var i = 0; i < ar.length; i++)
                            this.append(ar[i]);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "orientation", {
            get: function () {
                if (this.vertical)
                    return 'vertical';
                else
                    return 'horizontal';
            },
            set: function (orientation) {
                var vertical = true;
                if (orientation !== 'vertical')
                    vertical = false;
                if (this.vertical !== vertical) {
                    this.vertical = vertical;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "padding", {
            set: function (padding) {
                this.paddingTop = padding;
                this.paddingBottom = padding;
                this.paddingLeft = padding;
                this.paddingRight = padding;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "paddingTop", {
            get: function () {
                return this._paddingTop;
            },
            set: function (paddingTop) {
                if (this._paddingTop != paddingTop) {
                    this._paddingTop = paddingTop;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "paddingBottom", {
            get: function () {
                return this._paddingBottom;
            },
            set: function (paddingBottom) {
                if (this._paddingBottom != paddingBottom) {
                    this._paddingBottom = paddingBottom;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "paddingLeft", {
            get: function () {
                return this._paddingLeft;
            },
            set: function (paddingLeft) {
                if (this._paddingLeft != paddingLeft) {
                    this._paddingLeft = paddingLeft;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "paddingRight", {
            get: function () {
                return this._paddingRight;
            },
            set: function (paddingRight) {
                if (this._paddingRight != paddingRight) {
                    this._paddingRight = paddingRight;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "uniform", {
            get: function () {
                return this._uniform;
            },
            set: function (uniform) {
                if (this._uniform != uniform) {
                    this._uniform = uniform;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box.prototype, "spacing", {
            get: function () {
                return this._spacing;
            },
            set: function (spacing) {
                if (this._spacing != spacing) {
                    this._spacing = spacing;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Box.prototype.append = function (child, resizable) {
            if (resizable !== undefined)
                child.resizable = resizable === true;
            this.appendChild(child);
        };
        Box.prototype.prepend = function (child, resizable) {
            if (resizable !== undefined)
                child.resizable = resizable === true;
            this.prependChild(child);
        };
        Box.prototype.insertAt = function (child, position, resizable) {
            if (resizable !== undefined)
                child.resizable = resizable === true;
            this.insertChildAt(child, position);
        };
        Box.prototype.insertBefore = function (child, beforeChild) {
            this.insertChildBefore(child, beforeChild);
        };
        Box.prototype.moveAt = function (child, position) {
            this.moveChildAt(child, position);
        };
        Box.prototype.remove = function (child) {
            this.removeChild(child);
        };
        Box.prototype.measureUniform = function (width, height) {
            var constraintSize = this.vertical ? height : width;
            var constraintOpSize = this.vertical ? width : height;
            constraintSize -= this._spacing * (this.children.length - 1);
            var childConstraintSize = constraintSize / this.children.length;
            var countResizable = 0;
            var uniformSize = 0;
            var minOpSize = 0;
            var loop = true;
            while (loop) {
                for (var i = 0; i < this.children.length; i++) {
                    var child = this.children[i];
                    if (child.resizable)
                        countResizable++;
                    var size = void 0;
                    if (this.vertical)
                        size = child.measure(constraintOpSize, childConstraintSize);
                    else
                        size = child.measure(childConstraintSize, constraintOpSize);
                    if ((this.vertical ? size.width : size.height) > minOpSize)
                        minOpSize = this.vertical ? size.width : size.height;
                    if ((this.vertical ? size.height : size.width) > uniformSize)
                        uniformSize = this.vertical ? size.height : size.width;
                }
                if ((minOpSize > constraintOpSize) || (uniformSize > childConstraintSize)) {
                    if (uniformSize > childConstraintSize)
                        childConstraintSize = uniformSize;
                    constraintOpSize = minOpSize;
                    minOpSize = 0;
                    uniformSize = 0;
                    countResizable = 0;
                }
                else
                    loop = false;
            }
            this.uniformSize = uniformSize;
            var minSize = this.uniformSize * this.children.length;
            minSize += this._spacing * (this.children.length - 1);
            if (this.vertical)
                return { width: minOpSize, height: minSize };
            else
                return { width: minSize, height: minOpSize };
        };
        Box.prototype.measureNonUniformVertical = function (width, height) {
            var i;
            var child;
            var size;
            var constraintWidth = width;
            var constraintHeight = height;
            constraintHeight -= this._spacing * (this.children.length - 1);
            var countResizable;
            var minWidth;
            var minHeight;
            var loop = true;
            var star = 0;
            var resizableMinHeight = 0;
            while (loop) {
                countResizable = 0;
                minWidth = 0;
                minHeight = 0;
                for (i = 0; i < this.children.length; i++) {
                    child = this.children[i];
                    if (!child.resizable) {
                        size = child.measure(constraintWidth, 0);
                        if (size.width > minWidth)
                            minWidth = size.width;
                        minHeight += size.height;
                    }
                    else {
                        child.boxStarDone = false;
                        countResizable++;
                    }
                }
                resizableMinHeight = 0;
                if (countResizable > 0) {
                    var remainHeight = constraintHeight - minHeight;
                    var starFound = true;
                    star = remainHeight / countResizable;
                    do {
                        resizableMinHeight = 0;
                        starFound = true;
                        for (i = 0; i < this.children.length; i++) {
                            child = this.children[i];
                            if (child.resizable) {
                                if (!child.boxStarDone) {
                                    size = child.measure(constraintWidth, star);
                                    if (size.width > minWidth)
                                        minWidth = size.width;
                                    if (size.height > star) {
                                        child.boxStarDone = true;
                                        starFound = false;
                                        remainHeight -= size.height;
                                        minHeight += size.height;
                                        countResizable--;
                                        star = remainHeight / countResizable;
                                        break;
                                    }
                                    else
                                        resizableMinHeight += size.height;
                                }
                            }
                        }
                    } while (!starFound);
                }
                if (minWidth > constraintWidth)
                    constraintWidth = minWidth;
                else
                    loop = false;
            }
            minHeight += this._spacing * (this.children.length - 1);
            if (countResizable > 0) {
                minHeight += resizableMinHeight;
                this.star = star;
            }
            else
                this.star = 0;
            return { width: minWidth, height: minHeight };
        };
        Box.prototype.measureNonUniformHorizontal = function (width, height) {
            var i;
            var child;
            var size;
            var constraintWidth = width;
            var constraintHeight = height;
            constraintWidth -= this._spacing * (this.children.length - 1);
            var countResizable;
            var minWidth;
            var minHeight;
            var loop = true;
            var star = 0;
            var resizableMinWidth = 0;
            while (loop) {
                countResizable = 0;
                minWidth = 0;
                minHeight = 0;
                for (i = 0; i < this.children.length; i++) {
                    child = this.children[i];
                    if (!child.resizable) {
                        size = child.measure(0, constraintHeight);
                        if (size.height > minHeight)
                            minHeight = size.height;
                        minWidth += size.width;
                    }
                    else {
                        child.boxStarDone = false;
                        countResizable++;
                    }
                }
                resizableMinWidth = 0;
                if (countResizable > 0) {
                    var remainWidth = constraintWidth - minWidth;
                    var starFound = true;
                    star = remainWidth / countResizable;
                    do {
                        resizableMinWidth = 0;
                        starFound = true;
                        for (i = 0; i < this.children.length; i++) {
                            child = this.children[i];
                            if (child.resizable) {
                                if (!child.boxStarDone) {
                                    size = child.measure(star, constraintHeight);
                                    if (size.height > minHeight)
                                        minHeight = size.height;
                                    if (size.width > star) {
                                        child.boxStarDone = true;
                                        starFound = false;
                                        remainWidth -= size.width;
                                        minWidth += size.width;
                                        countResizable--;
                                        star = remainWidth / countResizable;
                                        break;
                                    }
                                    else
                                        resizableMinWidth += size.width;
                                }
                            }
                        }
                    } while (!starFound);
                }
                if (minHeight > constraintHeight)
                    constraintHeight = minHeight;
                else
                    loop = false;
            }
            minWidth += this._spacing * (this.children.length - 1);
            if (countResizable > 0) {
                minWidth += resizableMinWidth;
                this.star = star;
            }
            else
                this.star = 0;
            return { width: minWidth, height: minHeight };
        };
        Box.prototype.measureCore = function (width, height) {
            var left = this.paddingLeft;
            var right = this.paddingRight;
            var top = this.paddingTop;
            var bottom = this.paddingBottom;
            var constraintWidth = Math.max(0, width - (left + right));
            var constraintHeight = Math.max(0, height - (top + bottom));
            var size;
            if (this._uniform)
                size = this.measureUniform(constraintWidth, constraintHeight);
            else {
                if (this.vertical)
                    size = this.measureNonUniformVertical(constraintWidth, constraintHeight);
                else
                    size = this.measureNonUniformHorizontal(constraintWidth, constraintHeight);
            }
            size.width += left + right;
            size.height += top + bottom;
            return size;
        };
        Box.prototype.arrangeCore = function (width, height) {
            var left = this._paddingLeft;
            var right = this._paddingRight;
            var top = this._paddingTop;
            var bottom = this._paddingBottom;
            width -= left + right;
            height -= top + bottom;
            var offset = this.vertical ? top : left;
            var countResizable = 0;
            var minSize = 0;
            var maxSize = 0;
            var count = this.children.length;
            var countVisible = 0;
            for (var i = 0; i < count; i++) {
                var child = this.children[i];
                var size = this.vertical ? child.measureHeight : child.measureWidth;
                if (child.resizable) {
                    countVisible++;
                    countResizable++;
                    child['Ui.Box.StarDone'] = false;
                }
                else {
                    if (size > 0)
                        countVisible++;
                    minSize += size;
                }
                if (size > maxSize)
                    maxSize = size;
            }
            minSize += Math.max(0, countVisible - 1) * this._spacing;
            var star = 0;
            var uniformSize = 0;
            if (countResizable > 0) {
                if (this._uniform)
                    uniformSize = ((this.vertical ? height : width) - (this._spacing * (countVisible - 1))) / countVisible;
                else {
                    var remainSize = (this.vertical ? height : width) - minSize;
                    var starFound = true;
                    star = remainSize / countResizable;
                    do {
                        starFound = true;
                        for (var i = 0; i < count; i++) {
                            var child = this.children[i];
                            if (child.resizable) {
                                var size = this.vertical ? child.measureHeight : child.measureWidth;
                                if (!child['Ui.Box.StarDone']) {
                                    if (size > star) {
                                        child['Ui.Box.StarDone'] = true;
                                        starFound = false;
                                        remainSize -= size;
                                        minSize += size;
                                        countResizable--;
                                        star = remainSize / countResizable;
                                        break;
                                    }
                                }
                            }
                        }
                    } while (!starFound);
                }
            }
            else {
                if (this._uniform)
                    uniformSize = maxSize;
            }
            var isFirst = true;
            for (var i = 0; i < count; i++) {
                var child = this.children[i];
                var size = this.vertical ? child.measureHeight : child.measureWidth;
                if (this._uniform) {
                    if (isFirst)
                        isFirst = false;
                    else
                        offset += this._spacing;
                    if (this.vertical)
                        child.arrange(left, offset, width, uniformSize);
                    else
                        child.arrange(offset, top, uniformSize, height);
                    offset += uniformSize;
                }
                else {
                    if (child.resizable && ((this.vertical ? child.measureHeight : child.measureWidth) < star)) {
                        if (isFirst)
                            isFirst = false;
                        else
                            offset += this._spacing;
                        if (this.vertical)
                            child.arrange(left, offset, width, star);
                        else
                            child.arrange(offset, top, star, height);
                        offset += star;
                    }
                    else if (size > 0) {
                        if (isFirst)
                            isFirst = false;
                        else
                            offset += this._spacing;
                        if (this.vertical) {
                            child.arrange(left, offset, width, child.measureHeight);
                            offset += child.measureHeight;
                        }
                        else {
                            child.arrange(offset, top, child.measureWidth, height);
                            offset += child.measureWidth;
                        }
                    }
                }
            }
        };
        return Box;
    }(Ui.Container));
    Ui.Box = Box;
    var VBox = (function (_super) {
        __extends(VBox, _super);
        function VBox(init) {
            var _this = _super.call(this, init) || this;
            _this.orientation = 'vertical';
            return _this;
        }
        return VBox;
    }(Box));
    Ui.VBox = VBox;
    var HBox = (function (_super) {
        __extends(HBox, _super);
        function HBox(init) {
            var _this = _super.call(this, init) || this;
            _this.orientation = 'horizontal';
            return _this;
        }
        return HBox;
    }(Box));
    Ui.HBox = HBox;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var OverWatcher = (function (_super) {
        __extends(OverWatcher, _super);
        function OverWatcher(init) {
            var _this = _super.call(this) || this;
            _this._isOver = false;
            if (init.onentered)
                _this.enter = init.onentered;
            if (init.onleaved)
                _this.leave = init.onleaved;
            _this.element = init.element;
            _this.element.drawing.addEventListener('mouseenter', function (e) {
                if (_this._isOver || _this.element.isDisabled)
                    return;
                _this._isOver = true;
                if (_this.enter)
                    _this.enter(_this);
            });
            _this.element.drawing.addEventListener('mouseleave', function (e) {
                if (e.target != _this.element.drawing || !_this._isOver)
                    return;
                _this._isOver = false;
                if (_this.leave)
                    _this.leave(_this);
            });
            return _this;
        }
        Object.defineProperty(OverWatcher.prototype, "isOver", {
            get: function () {
                return this._isOver;
            },
            enumerable: true,
            configurable: true
        });
        return OverWatcher;
    }(Core.Object));
    Ui.OverWatcher = OverWatcher;
    var Overable = (function (_super) {
        __extends(Overable, _super);
        function Overable(init) {
            var _this = _super.call(this, init) || this;
            _this.entered = new Core.Events();
            _this.leaved = new Core.Events();
            _this.watcher = new OverWatcher({
                element: _this,
                onentered: function () { return _this.entered.fire({ target: _this }); },
                onleaved: function () { return _this.leaved.fire({ target: _this }); }
            });
            if (init) {
                if (init.onentered)
                    _this.entered.connect(init.onentered);
                if (init.onleaved)
                    _this.leaved.connect(init.onleaved);
            }
            return _this;
        }
        Object.defineProperty(Overable.prototype, "onentered", {
            set: function (value) { this.entered.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Overable.prototype, "onleaved", {
            set: function (value) { this.leaved.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Overable.prototype, "isOver", {
            get: function () {
                return this.watcher.isOver;
            },
            enumerable: true,
            configurable: true
        });
        return Overable;
    }(Ui.LBox));
    Ui.Overable = Overable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var RippleEffect = (function (_super) {
        __extends(RippleEffect, _super);
        function RippleEffect(element) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.isAnimated = false;
            _this.element.drawing.style.overflow = 'hidden';
            _this.ripple = document.createElement('div');
            _this.ripple.style.transformOrigin = 'center center';
            _this.ripple.style.transform = 'scale(0) translate3d(0,0,0)';
            _this.ripple.style.position = 'absolute';
            _this.ripple.style.display = 'block';
            _this.ripple.style.margin = '0';
            _this.ripple.style.padding = '0';
            _this.ripple.style.borderRadius = '100%';
            _this.ripple.style.width = '10px';
            _this.ripple.style.height = '10px';
            _this.fill = Ui.Color.create('rgba(0,0,0,0.1)');
            return _this;
        }
        RippleEffect.prototype.anim = function (x, y) {
            return __awaiter(this, void 0, void 0, function () {
                var upPromise, scale;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.isAnimated)
                                return [2];
                            this.isAnimated = true;
                            if (x == undefined)
                                x = this.element.layoutWidth / 2;
                            if (y == undefined)
                                y = this.element.layoutHeight / 2;
                            upPromise = new Promise(function (resolve) { return _this.upResolve = resolve; });
                            this.element.drawing.appendChild(this.ripple);
                            this.ripple.style.transform = 'scale(0) translate3d(0,0,0)';
                            return [4, new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, 0); })];
                        case 1:
                            _a.sent();
                            scale = 2.5 * Math.ceil(Math.max(this.element.layoutWidth, this.element.layoutHeight) / 10);
                            this.ripple.style.left = Math.round(x - 5) + "px";
                            this.ripple.style.top = Math.round(y - 5) + "px";
                            this.ripple.style.transition = 'transform 0.5s ease-out, opacity 0.1s';
                            this.ripple.style.transform = "scale(" + scale + ") translate3d(0,0,0)";
                            return [4, new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, 500); })];
                        case 2:
                            _a.sent();
                            return [4, upPromise];
                        case 3:
                            _a.sent();
                            this.ripple.style.opacity = '0';
                            return [4, new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, 100); })];
                        case 4:
                            _a.sent();
                            this.ripple.style.transition = '';
                            this.ripple.style.opacity = '1';
                            this.ripple.style.transform = 'scale(0) translate3d(0,0,0)';
                            this.element.drawing.removeChild(this.ripple);
                            this.isAnimated = false;
                            return [2];
                    }
                });
            });
        };
        RippleEffect.prototype.down = function (x, y) {
            this.anim(x, y);
        };
        RippleEffect.prototype.up = function () {
            if (this.upResolve)
                this.upResolve();
        };
        RippleEffect.prototype.press = function (x, y) {
            if (!this.isAnimated) {
                this.down(x, y);
                this.up();
            }
        };
        Object.defineProperty(RippleEffect.prototype, "fill", {
            set: function (fill) {
                this.ripple.style.background = Ui.Color.create(fill).getCssRgba();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RippleEffect.prototype, "pressable", {
            set: function (pressable) {
                var _this = this;
                pressable.pressed.connect(function (e) {
                    if (e.x && e.y) {
                        var p = _this.element.pointFromWindow(new Ui.Point(e.x, e.y));
                        _this.press(p.x, p.y);
                    }
                    else
                        _this.press();
                });
                pressable.downed.connect(function (e) {
                    if (e.x && e.y) {
                        var p = _this.element.pointFromWindow(new Ui.Point(e.x, e.y));
                        _this.down(p.x, p.y);
                    }
                    else
                        _this.down();
                });
                pressable.upped.connect(function () { return _this.up(); });
            },
            enumerable: true,
            configurable: true
        });
        return RippleEffect;
    }(Core.Object));
    Ui.RippleEffect = RippleEffect;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var PressWatcher = (function (_super) {
        __extends(PressWatcher, _super);
        function PressWatcher(init) {
            var _this = _super.call(this) || this;
            _this._isDown = false;
            _this.lastTime = undefined;
            _this.lock = false;
            _this.allowMiddleButton = false;
            _this.element = init.element;
            if (init.onpressed)
                _this.press = init.onpressed;
            if (init.ondowned)
                _this.down = init.ondowned;
            if (init.onupped)
                _this.up = init.onupped;
            if (init.onactivated)
                _this.activate = init.onactivated;
            if (init.ondelayedpress)
                _this.delayedpress = init.ondelayedpress;
            if ('PointerEvent' in window)
                _this.element.drawing.addEventListener('pointerdown', function (e) { return _this.onPointerDown(e); }, { passive: true });
            _this.element.drawing.addEventListener('click', function (e) {
                if (_this.lock || _this.element.isDisabled)
                    return;
                e.stopImmediatePropagation();
                _this.x = e.clientX;
                _this.y = e.clientY;
                _this.onPress(e.clientX, e.clientY, e.altKey, e.shiftKey, e.ctrlKey);
            });
            _this.element.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            _this.element.drawing.addEventListener('keyup', function (e) { return _this.onKeyUp(e); });
            return _this;
        }
        Object.defineProperty(PressWatcher.prototype, "isDown", {
            get: function () {
                return this._isDown;
            },
            enumerable: true,
            configurable: true
        });
        PressWatcher.prototype.onPointerDown = function (event) {
            var _this = this;
            if (this.lock || this.element.isDisabled || this._isDown)
                return;
            if (event.pointerType == 'touch')
                return;
            if (event.pointerType == 'mouse' && !(event.button == 0 || (this.allowMiddleButton && event.button == 1)))
                return;
            this._pointerId = event.pointerId;
            this._isDown = true;
            this.x = event.clientX;
            this.y = event.clientY;
            var onPointerCancel = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                window.removeEventListener('pointercancel', onPointerCancel, true);
                window.removeEventListener('pointerup', onPointerUp, true);
                _this._pointerId = undefined;
                e.stopPropagation();
                _this.onUp();
            };
            var onPointerUp = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                window.removeEventListener('pointercancel', onPointerCancel, true);
                window.removeEventListener('pointerup', onPointerUp, true);
                _this._pointerId = undefined;
                _this.x = e.clientX;
                _this.y = e.clientY;
                e.stopPropagation();
                _this.onUp();
                if (e.pointerType == 'mouse' && event.button == 1 && _this.allowMiddleButton)
                    _this.onPress(e.clientX, e.clientY, e.altKey, e.shiftKey, e.ctrlKey, true);
            };
            window.addEventListener('pointercancel', onPointerCancel, true);
            window.addEventListener('pointerup', onPointerUp, true);
            event.stopPropagation();
            this.onDown();
        };
        PressWatcher.prototype.onKeyDown = function (event) {
            var key = event.which;
            if (!this.lock && !this.element.isDisabled && (key == 13 || key == 32)) {
                event.preventDefault();
                event.stopImmediatePropagation();
                this.x = undefined;
                this.y = undefined;
                this.onDown();
            }
        };
        PressWatcher.prototype.onKeyUp = function (event) {
            var key = event.which;
            if (!this.lock && !this.element.isDisabled && this._isDown && (key == 13 || key == 32)) {
                event.preventDefault();
                event.stopImmediatePropagation();
                this.x = undefined;
                this.y = undefined;
                this.onUp();
                this.onPress(undefined, undefined, event.altKey, event.shiftKey, event.ctrlKey);
            }
        };
        PressWatcher.prototype.onDown = function () {
            this._isDown = true;
            if (this.down)
                this.down(this);
        };
        PressWatcher.prototype.onUp = function () {
            this._isDown = false;
            if (this.up)
                this.up(this);
        };
        PressWatcher.prototype.onPress = function (x, y, altKey, shiftKey, ctrlKey, middleButton) {
            var _this = this;
            this.x = x;
            this.y = y;
            this.altKey = altKey;
            this.shiftKey = shiftKey;
            this.ctrlKey = ctrlKey;
            this.middleButton = middleButton;
            if (this.press)
                this.press(this);
            var currentTime = (new Date().getTime()) / 1000;
            if ((this.lastTime !== undefined) && (currentTime - this.lastTime < 0.30)) {
                this.onActivate(x, y);
                if (this.delayedTimer != undefined) {
                    this.delayedTimer.abort();
                    this.delayedTimer = undefined;
                }
            }
            else {
                this.delayedTimer = new Core.DelayedTask(0.30, function () {
                    _this.onDelayedPress(x, y, altKey, shiftKey, ctrlKey, middleButton);
                });
            }
            this.lastTime = currentTime;
        };
        PressWatcher.prototype.onActivate = function (x, y) {
            if (this.activate)
                this.activate(this);
        };
        PressWatcher.prototype.onDelayedPress = function (x, y, altKey, shiftKey, ctrlKey, middleButton) {
            this.x = x;
            this.y = y;
            this.altKey = altKey;
            this.shiftKey = shiftKey;
            this.ctrlKey = ctrlKey;
            this.middleButton = middleButton;
            if (this.delayedTimer) {
                if (!this.delayedTimer.isDone)
                    this.delayedTimer.abort();
                this.delayedTimer = undefined;
            }
            if (this.delayedpress)
                this.delayedpress(this);
        };
        return PressWatcher;
    }(Core.Object));
    Ui.PressWatcher = PressWatcher;
    var Pressable = (function (_super) {
        __extends(Pressable, _super);
        function Pressable(init) {
            var _this = _super.call(this, init) || this;
            _this.downed = new Core.Events();
            _this.upped = new Core.Events();
            _this.pressed = new Core.Events();
            _this.activated = new Core.Events();
            _this.delayedpress = new Core.Events();
            _this.drawing.style.cursor = 'pointer';
            _this.focusable = true;
            _this.role = 'button';
            _this.pressWatcher = new PressWatcher({
                element: _this,
                onpressed: function (watcher) { return _this.onPress(watcher.x, watcher.y, watcher.altKey, watcher.shiftKey, watcher.ctrlKey, watcher.middleButton); },
                ondowned: function (watcher) { return _this.onDown(watcher.x, watcher.y); },
                onupped: function (watcher) { return _this.onUp(watcher.x, watcher.y); },
                onactivated: function (watcher) { return _this.onActivate(watcher.x, watcher.y); },
                ondelayedpress: function (watcher) { return _this.onDelayedPress(watcher.x, watcher.y, watcher.altKey, watcher.shiftKey, watcher.ctrlKey, watcher.middleButton); }
            });
            if (init) {
                if (init.lock !== undefined)
                    _this.lock = init.lock;
                if (init.onpressed !== undefined)
                    _this.pressed.connect(init.onpressed);
                if (init.ondowned !== undefined)
                    _this.downed.connect(init.ondowned);
                if (init.onupped !== undefined)
                    _this.upped.connect(init.onupped);
                if (init.onactivated !== undefined)
                    _this.activated.connect(init.onactivated);
                if (init.ondelayedpress !== undefined)
                    _this.delayedpress.connect(init.ondelayedpress);
                if (init.allowMiddleButton !== undefined)
                    _this.allowMiddleButton = init.allowMiddleButton;
            }
            return _this;
        }
        Object.defineProperty(Pressable.prototype, "ondowned", {
            set: function (value) { this.downed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pressable.prototype, "onupped", {
            set: function (value) { this.upped.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pressable.prototype, "onpressed", {
            set: function (value) { this.pressed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pressable.prototype, "onactivated", {
            set: function (value) { this.activated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pressable.prototype, "ondelayedpress", {
            set: function (value) { this.delayedpress.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pressable.prototype, "isDown", {
            get: function () {
                return this.pressWatcher.isDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pressable.prototype, "lock", {
            get: function () {
                return this.pressWatcher.lock;
            },
            set: function (lock) {
                this.pressWatcher.lock = lock;
                if (lock)
                    this.drawing.style.cursor = '';
                else
                    this.drawing.style.cursor = 'pointer';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pressable.prototype, "allowMiddleButton", {
            get: function () {
                return this.pressWatcher.allowMiddleButton;
            },
            set: function (value) {
                this.pressWatcher.allowMiddleButton = value;
            },
            enumerable: true,
            configurable: true
        });
        Pressable.prototype.onDown = function (x, y) {
            this.downed.fire({ target: this, x: x, y: y });
        };
        Pressable.prototype.onUp = function (x, y) {
            this.upped.fire({ target: this, x: x, y: y });
        };
        Pressable.prototype.press = function () {
            if (!this.isDisabled && !this.lock)
                this.onPress();
        };
        Pressable.prototype.onPress = function (x, y, altKey, shiftKey, ctrlKey, middleButton) {
            this.pressed.fire({ target: this, x: x, y: y, altKey: altKey, shiftKey: shiftKey, ctrlKey: ctrlKey, middleButton: middleButton });
        };
        Pressable.prototype.onActivate = function (x, y) {
            this.activated.fire({ target: this, x: x, y: y });
        };
        Pressable.prototype.onDelayedPress = function (x, y, altKey, shiftKey, ctrlKey, middleButton) {
            this.delayedpress.fire({ target: this, x: x, y: y, altKey: altKey, shiftKey: shiftKey, ctrlKey: ctrlKey, middleButton: middleButton });
        };
        Pressable.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.drawing.style.cursor = '';
        };
        Pressable.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            if (this.lock)
                this.drawing.style.cursor = '';
            else
                this.drawing.style.cursor = 'pointer';
        };
        return Pressable;
    }(Ui.Overable));
    Ui.Pressable = Pressable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var DraggableWatcher = (function (_super) {
        __extends(DraggableWatcher, _super);
        function DraggableWatcher(init) {
            var _this = _super.call(this) || this;
            _this.allowedMode = 'all';
            _this.onDraggablePointerDown = function (event) {
                if (_this.element.isDisabled || (_this.data === undefined))
                    return;
                if (event.pointerType == 'mouse' && event.button != 0)
                    return;
                if (event.pointerType == 'touch')
                    return;
                event.stopImmediatePropagation();
                var delayed = false;
                var dataTransfer = new Ui.DragEmuDataTransfer(_this.element, _this.image ? _this.image : _this.element, event.clientX, event.clientY, delayed, event);
                _this.dataTransfer = dataTransfer;
                _this._dragDelta = _this.element.pointFromWindow(new Ui.Point(event.clientX, event.clientY));
                dataTransfer.started.connect(function (e) { return _this.onDragStart(dataTransfer); });
                dataTransfer.ended.connect(function (e) { return _this.onDragEnd(dataTransfer); });
            };
            _this.onDraggableMouseDown = function (event) {
                if (_this.element.isDisabled || (_this.data === undefined) || event.button != 0)
                    return;
                event.stopImmediatePropagation();
                var delayed = false;
                var dataTransfer = new Ui.DragEmuDataTransfer(_this.element, _this.image ? _this.image : _this.element, event.clientX, event.clientY, delayed, undefined, undefined, event);
                _this.dataTransfer = dataTransfer;
                _this._dragDelta = _this.element.pointFromWindow(new Ui.Point(event.clientX, event.clientY));
                dataTransfer.started.connect(function (e) { return _this.onDragStart(dataTransfer); });
                dataTransfer.ended.connect(function (e) { return _this.onDragEnd(dataTransfer); });
            };
            _this.onDraggableTouchStart = function (event) {
                if (_this.element.isDisabled || (_this.data === undefined) || (event.targetTouches.length != 1))
                    return;
                var delayed = true;
                var dataTransfer = new Ui.DragEmuDataTransfer(_this.element, _this.image ? _this.image : _this.element, event.targetTouches[0].clientX, event.targetTouches[0].clientY, delayed, undefined, event);
                _this.dataTransfer = dataTransfer;
                _this._dragDelta = _this.element.pointFromWindow(new Ui.Point(event.targetTouches[0].clientX, event.targetTouches[0].clientY));
                dataTransfer.started.connect(function (e) { return _this.onDragStart(dataTransfer); });
                dataTransfer.ended.connect(function (e) { return _this.onDragEnd(dataTransfer); });
            };
            _this.element = init.element;
            _this.data = init.data;
            if (init.image)
                _this.image = init.image;
            if (init.start !== undefined)
                _this.start = init.start;
            if (init.end !== undefined)
                _this.end = init.end;
            if ('PointerEvent' in window)
                _this.element.drawing.addEventListener('pointerdown', _this.onDraggablePointerDown, { passive: false });
            if ('TouchEvent' in window)
                _this.element.drawing.addEventListener('touchstart', _this.onDraggableTouchStart, { passive: false });
            if (!('PointerEvent' in window) && !('TouchEvent' in window))
                _this.element.drawing.addEventListener('mousedown', _this.onDraggableMouseDown);
            return _this;
        }
        Object.defineProperty(DraggableWatcher.prototype, "dragDelta", {
            get: function () {
                return this._dragDelta;
            },
            enumerable: true,
            configurable: true
        });
        DraggableWatcher.prototype.dispose = function () {
            if ('PointerEvent' in window)
                this.element.drawing.removeEventListener('pointerdown', this.onDraggablePointerDown);
            if ('TouchEvent' in window)
                this.element.drawing.removeEventListener('touchstart', this.onDraggableTouchStart);
            if (!('PointerEvent' in window) && !('TouchEvent' in window))
                this.element.drawing.removeEventListener('mousedown', this.onDraggableMouseDown);
        };
        DraggableWatcher.prototype.onDragStart = function (dataTransfer) {
            var selection = Ui.Selectionable.getParentSelectionHandler(this.element);
            if (selection && (selection.elements.indexOf(this.image) != -1))
                dataTransfer.setData(selection);
            else if (selection && (selection.elements.indexOf(this.element) != -1))
                dataTransfer.setData(selection);
            else
                dataTransfer.setData(this.data);
            dataTransfer.effectAllowed = this.allowedMode;
            if (this.start)
                this.start(this);
        };
        DraggableWatcher.prototype.onDragEnd = function (dataTransfer) {
            var action = 'none';
            if (dataTransfer.dropEffect && dataTransfer.dropEffect.length > 0)
                action = dataTransfer.dropEffect[0].action;
            if (this.end)
                this.end(this, action);
        };
        return DraggableWatcher;
    }(Core.Object));
    Ui.DraggableWatcher = DraggableWatcher;
    var Draggable = (function (_super) {
        __extends(Draggable, _super);
        function Draggable(init) {
            var _this = _super.call(this, init) || this;
            _this.allowedMode = 'all';
            _this.dragstarted = new Core.Events();
            _this.dragended = new Core.Events();
            _this.drawing.oncontextmenu = function (e) { return e.preventDefault(); };
            _this.draggableWatcher = new DraggableWatcher({
                element: _this,
                data: _this.draggableData,
                start: function (watcher) { return _this.onDragStart(watcher.dataTransfer); },
                end: function (watcher) { return _this.onDragEnd(watcher.dataTransfer); }
            });
            if (init) {
                if (init.ondragstarted)
                    _this.dragstarted.connect(init.ondragstarted);
                if (init.ondragended)
                    _this.dragended.connect(init.ondragended);
            }
            return _this;
        }
        Object.defineProperty(Draggable.prototype, "ondragstarted", {
            set: function (value) { this.dragstarted.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Draggable.prototype, "ondragended", {
            set: function (value) { this.dragended.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Draggable.prototype, "draggableData", {
            get: function () {
                return this.draggableWatcher ? this.draggableWatcher.data : undefined;
            },
            set: function (data) {
                this.draggableWatcher.data = data;
            },
            enumerable: true,
            configurable: true
        });
        Draggable.prototype.setAllowedMode = function (allowedMode) {
            this.allowedMode = allowedMode;
        };
        Object.defineProperty(Draggable.prototype, "dragDelta", {
            get: function () {
                return this._dragDelta;
            },
            enumerable: true,
            configurable: true
        });
        Draggable.prototype.onDragStart = function (dataTransfer) {
            this.dragstarted.fire({ target: this, dataTransfer: dataTransfer });
        };
        Draggable.prototype.onDragEnd = function (dataTransfer) {
            this.dragended.fire({ target: this, effect: dataTransfer.dropEffect });
        };
        return Draggable;
    }(Ui.Pressable));
    Ui.Draggable = Draggable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var SelectionableWatcher = (function (_super) {
        __extends(SelectionableWatcher, _super);
        function SelectionableWatcher(init) {
            var _this = _super.call(this) || this;
            _this._isSelected = false;
            _this.element = init.element;
            _this.element.focusable = true;
            if (init.selectionActions)
                _this.selectionActions = init.selectionActions;
            _this.element['Ui.SelectionableWatcher.watcher'] = _this;
            if (init.draggableElement)
                _this.draggableElement = init.draggableElement;
            if (init.onselected)
                _this.select = init.onselected;
            if (init.onunselected)
                _this.unselect = init.onunselected;
            new Ui.PressWatcher({
                element: init.pressElement ? init.pressElement : _this.element,
                ondelayedpress: function (w) { return _this.onDelayedPress(w); },
                onactivated: function (w) { return _this.onSelectionableActivate(w); }
            });
            if (init.draggable === true)
                _this.draggable = init.draggable;
            return _this;
        }
        SelectionableWatcher.getSelectionableWatcher = function (element) {
            return element['Ui.SelectionableWatcher.watcher'];
        };
        SelectionableWatcher.getIsSelectionableItem = function (element) {
            return (element instanceof Selectionable) || (SelectionableWatcher.getSelectionableWatcher(element) != undefined);
        };
        Object.defineProperty(SelectionableWatcher.prototype, "draggableElement", {
            get: function () {
                return this._draggableElement;
            },
            set: function (element) {
                var _this = this;
                this._draggableElement = element;
                if (this.draggableWatcher) {
                    this.draggableWatcher.dispose();
                    this.draggableWatcher = new Ui.DraggableWatcher({
                        element: this._draggableElement,
                        data: this.element,
                        image: this.element,
                        start: function (w) { return _this.onSelectionableDragStart(w); },
                        end: function (w) { return _this.onSelectionableDragEnd(w); }
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectionableWatcher.prototype, "draggable", {
            get: function () {
                return this.draggableWatcher !== undefined;
            },
            set: function (value) {
                var _this = this;
                if (value !== this.draggable) {
                    if (value)
                        this.draggableWatcher = new Ui.DraggableWatcher({
                            element: this._draggableElement ? this._draggableElement : this.element,
                            data: this.element,
                            image: this.element,
                            start: function (w) { return _this.onSelectionableDragStart(w); },
                            end: function (w) { return _this.onSelectionableDragEnd(w); }
                        });
                    else {
                        this.draggableWatcher.dispose();
                        this.draggableWatcher = undefined;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SelectionableWatcher.prototype, "isSelected", {
            get: function () {
                return this._isSelected;
            },
            set: function (value) {
                if (this._isSelected != value) {
                    var selection = this.getParentSelectionHandler();
                    if (selection) {
                        if (value)
                            selection.append(this);
                        else
                            selection.remove(this);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        SelectionableWatcher.prototype.onSelect = function (selection) {
            this._isSelected = true;
            this.handler = selection;
            if (this.select)
                this.select(selection);
        };
        SelectionableWatcher.prototype.onUnselect = function (selection) {
            this._isSelected = false;
            this.handler = undefined;
            if (this.unselect)
                this.unselect(selection);
        };
        SelectionableWatcher.prototype.onDelayedPress = function (watcher) {
            var selection = this.getParentSelectionHandler();
            if (selection) {
                if (watcher.ctrlKey) {
                    if (this.isSelected)
                        selection.remove(this);
                    else
                        selection.append([this]);
                }
                else if (watcher.shiftKey)
                    selection.extend(this);
                else
                    selection.watchers = [this];
            }
        };
        SelectionableWatcher.prototype.getParentSelectionHandler = function () {
            return Selectionable.getParentSelectionHandler(this.element);
        };
        SelectionableWatcher.prototype.onSelectionableDragStart = function (watcher) {
            var selection = this.getParentSelectionHandler();
            if (selection && (selection.watchers.indexOf(this) == -1))
                selection.watchers = [this];
        };
        SelectionableWatcher.prototype.onSelectionableDragEnd = function (watcher) {
            if (this.isSelected) {
                var handler = this.getParentSelectionHandler();
                if (handler !== undefined)
                    handler.clear();
            }
        };
        SelectionableWatcher.prototype.onSelectionableActivate = function (watcher) {
            if (this.element.isLoaded) {
                var handler = this.getParentSelectionHandler();
                if (handler !== undefined) {
                    handler.elements = [this.element];
                    if (handler.getDefaultAction() !== undefined)
                        handler.executeDefaultAction();
                    else
                        handler.clear();
                }
            }
        };
        return SelectionableWatcher;
    }(Core.Object));
    Ui.SelectionableWatcher = SelectionableWatcher;
    var Selectionable = (function (_super) {
        __extends(Selectionable, _super);
        function Selectionable(init) {
            var _this = _super.call(this, init) || this;
            _this.selected = new Core.Events();
            _this.unselected = new Core.Events();
            _this.selectionWatcher = new SelectionableWatcher({
                element: _this,
                selectionActions: _this.getSelectionActions(),
                onselected: function (s) { return _this.onSelect(s); },
                onunselected: function (s) { return _this.onUnselect(s); }
            });
            return _this;
        }
        Object.defineProperty(Selectionable.prototype, "onselected", {
            set: function (value) { this.selected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Selectionable.prototype, "onunselected", {
            set: function (value) { this.unselected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Selectionable.prototype, "isSelected", {
            get: function () {
                return this.selectionWatcher.isSelected;
            },
            set: function (isSelected) {
                this.selectionWatcher.isSelected = isSelected;
            },
            enumerable: true,
            configurable: true
        });
        Selectionable.prototype.onSelect = function (selection) {
            this.selected.fire({ target: this });
        };
        Selectionable.prototype.onUnselect = function (selection) {
            this.unselected.fire({ target: this });
        };
        Selectionable.prototype.getSelectionActions = function () {
            return {};
        };
        Selectionable.prototype.getParentSelectionHandler = function () {
            return Selectionable.getParentSelectionHandler(this);
        };
        Selectionable.getParentSelectionHandler = function (element) {
            var parent = element.parent;
            while (parent !== undefined) {
                if ('getSelectionHandler' in parent)
                    return parent.getSelectionHandler();
                parent = parent.parent;
            }
            return undefined;
        };
        return Selectionable;
    }(Ui.LBox));
    Ui.Selectionable = Selectionable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Selection = (function (_super) {
        __extends(Selection, _super);
        function Selection() {
            var _this = _super.call(this) || this;
            _this.changed = new Core.Events();
            _this.onElementUnload = function (e) {
                var watcher = Ui.SelectionableWatcher.getSelectionableWatcher(e.target);
                _this.remove(watcher);
            };
            _this._watchers = [];
            return _this;
        }
        Object.defineProperty(Selection.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Selection.prototype.clear = function () {
            var change = false;
            while (this._watchers.length > 0) {
                if (this.internalRemove(this._watchers[0]))
                    change = true;
            }
            if (change)
                this.changed.fire({ target: this });
        };
        Selection.prototype.appendRange = function (start, end) {
            var _this = this;
            var change = false;
            var res = this.findRangeElements(start, end);
            res.forEach(function (el) { if (_this.internalAppend(el))
                change = true; });
            if (change)
                this.changed.fire({ target: this });
        };
        Selection.prototype.append = function (elements) {
            var _this = this;
            var change = false;
            if (elements instanceof Ui.SelectionableWatcher) {
                if (this.internalAppend(elements))
                    change = true;
            }
            else
                elements.forEach(function (el) { if (_this.internalAppend(el))
                    change = true; });
            if (change)
                this.changed.fire({ target: this });
        };
        Selection.prototype.extend = function (end) {
            if (this._watchers.length == 0)
                this.append(end);
            else {
                var focusElement = this._watchers.find(function (el) { return el.element.hasFocus; });
                if (!focusElement)
                    focusElement = this._watchers[0];
                this.watchers = this.findRangeElements(focusElement, end);
            }
        };
        Selection.prototype.findRangeElements = function (start, end) {
            var start_parents = new Array();
            var parent = start.element.parent;
            while (parent) {
                start_parents.push(parent);
                parent = parent.parent;
            }
            var common_parent;
            parent = end.element.parent;
            while (parent && !common_parent) {
                var pos = start_parents.indexOf(parent);
                if (pos != -1)
                    common_parent = parent;
                parent = parent.parent;
            }
            var all = new Array();
            var add_selectionable = function (el) {
                var w = Ui.SelectionableWatcher.getSelectionableWatcher(el);
                if (w)
                    all.push(w);
                else if (el instanceof Ui.Container)
                    el.children.forEach(function (el2) { return add_selectionable(el2); });
            };
            add_selectionable(common_parent);
            var start_pos = all.indexOf(start);
            var end_pos = all.indexOf(end);
            var res = new Array();
            for (var i = Math.min(start_pos, end_pos); i <= Math.max(start_pos, end_pos); i++)
                res.push(all[i]);
            return res;
        };
        Selection.prototype.internalAppend = function (watcher) {
            if (this._watchers.indexOf(watcher) != -1)
                return false;
            this._watchers.push(watcher);
            watcher.element.unloaded.connect(this.onElementUnload);
            watcher.onSelect(this);
            return true;
        };
        Selection.prototype.remove = function (watcher) {
            var _this = this;
            var change = false;
            if (watcher instanceof Ui.SelectionableWatcher) {
                if (this.internalRemove(watcher))
                    change = true;
            }
            else
                watcher.forEach(function (w) { if (_this.internalRemove(w))
                    change = true; });
            if (change)
                this.changed.fire({ target: this });
        };
        Selection.prototype.internalRemove = function (watcher) {
            var foundPos = this._watchers.indexOf(watcher);
            if (foundPos != -1) {
                this._watchers.splice(foundPos, 1);
                watcher.element.unloaded.disconnect(this.onElementUnload);
                watcher.onUnselect(this);
                return true;
            }
            return false;
        };
        Object.defineProperty(Selection.prototype, "watchers", {
            get: function () {
                return this._watchers.slice();
            },
            set: function (watchers) {
                var _this = this;
                var removeList = new Array();
                var addList = new Array();
                watchers.forEach(function (w) {
                    if (_this._watchers.indexOf(w) == -1)
                        addList.push(w);
                });
                this._watchers.forEach(function (w) {
                    if (watchers.indexOf(w) == -1)
                        removeList.push(w);
                });
                removeList.forEach(function (el) { return _this.internalRemove(el); });
                addList.forEach(function (el) { return _this.internalAppend(el); });
                if (addList.length > 0 || removeList.length > 0)
                    this.changed.fire({ target: this });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Selection.prototype, "elements", {
            get: function () {
                return this._watchers.map(function (w) { return w.element; });
            },
            set: function (elements) {
                this.watchers = elements.map(function (el) { return Ui.SelectionableWatcher.getSelectionableWatcher(el); });
            },
            enumerable: true,
            configurable: true
        });
        Selection.prototype.getElementActions = function (watcher) {
            var actions = Core.Util.clone(watcher.selectionActions);
            var current = watcher.element.parent;
            while (current != undefined) {
                if ('getContextActions' in current)
                    actions = current.getContextActions(watcher.element, actions);
                current = current.parent;
            }
            return actions;
        };
        Selection.prototype.getActions = function () {
            var actions;
            if (this._watchers.length === 0)
                return undefined;
            else {
                if (this._watchers.length === 1) {
                    actions = {};
                    var allActions = this.getElementActions(this._watchers[0]);
                    for (var actionName in allActions) {
                        var action = allActions[actionName];
                        if ((!action.testRight || action.testRight(this._watchers[0])) &&
                            (!action.testMultipleRight || action.testMultipleRight(this._watchers)))
                            actions[actionName] = allActions[actionName];
                    }
                    return actions;
                }
                else {
                    actions = {};
                    var allActions = this.getElementActions(this._watchers[0]);
                    for (var actionName in allActions) {
                        var action = allActions[actionName];
                        if (action.multiple === true) {
                            var compat = true;
                            for (var i = 1; compat && (i < this._watchers.length); i++) {
                                var otherCompat = false;
                                var otherActions = this.getElementActions(this._watchers[i]);
                                for (var otherActionKey in otherActions) {
                                    var otherAction = otherActions[otherActionKey];
                                    if ((otherAction.multiple === true) && (otherAction.callback === action.callback)) {
                                        otherCompat = true;
                                        break;
                                    }
                                }
                                compat = compat && otherCompat;
                            }
                            if (compat) {
                                var allowed = true;
                                if (action.testRight) {
                                    for (var i = 0; allowed && (i < this._watchers.length); i++) {
                                        allowed = allowed && action.testRight(this._watchers[i]);
                                    }
                                }
                                if (allowed && action.testMultipleRight) {
                                    allowed = action.testMultipleRight(this._watchers);
                                }
                                if (allowed)
                                    actions[actionName] = allActions[actionName];
                            }
                        }
                    }
                    return actions;
                }
            }
        };
        Selection.prototype.getDefaultAction = function () {
            var actions = this.getActions();
            for (var actionName in actions) {
                if (actions[actionName]['default'] === true)
                    return actions[actionName];
            }
            return undefined;
        };
        Selection.prototype.executeDefaultAction = function () {
            var action = this.getDefaultAction();
            if (action !== undefined) {
                action.callback(this);
                this.clear();
                return true;
            }
            else {
                return false;
            }
        };
        Selection.prototype.getDeleteAction = function () {
            var actions = this.getActions();
            if ('delete' in actions)
                return actions['delete'];
            else if (actions.suppress !== undefined)
                return actions.suppress;
            else
                return undefined;
        };
        Selection.prototype.executeDeleteAction = function () {
            var action = this.getDeleteAction();
            if (action !== undefined) {
                action.callback(this);
                this.clear();
                return true;
            }
            else {
                return false;
            }
        };
        return Selection;
    }(Core.Object));
    Ui.Selection = Selection;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ContextMenuWatcher = (function (_super) {
        __extends(ContextMenuWatcher, _super);
        function ContextMenuWatcher(init) {
            var _this = _super.call(this) || this;
            _this.lock = false;
            _this.onContextMenu = function (e) {
                if (!_this.lock && !_this.element.isDisabled) {
                    _this.onPress(e.clientX, e.clientY, e.altKey, e.shiftKey, e.ctrlKey);
                    e.stopImmediatePropagation();
                    e.preventDefault();
                }
            };
            _this.element = init.element;
            if (init.press !== undefined)
                _this.press = init.press;
            if (init.lock !== undefined)
                _this.lock = init.lock;
            _this.element.drawing.addEventListener('contextmenu', _this.onContextMenu);
            return _this;
        }
        ContextMenuWatcher.prototype.onPress = function (x, y, altKey, shiftKey, ctrlKey) {
            this.x = x;
            this.y = y;
            this.altKey = altKey;
            this.shiftKey = shiftKey;
            this.ctrlKey = ctrlKey;
            if (this.press)
                this.press(this);
        };
        ContextMenuWatcher.prototype.dispose = function () {
            this.element.drawing.removeEventListener('contextmenu', this.onContextMenu);
        };
        return ContextMenuWatcher;
    }(Core.Object));
    Ui.ContextMenuWatcher = ContextMenuWatcher;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Label = (function (_super) {
        __extends(Label, _super);
        function Label(init) {
            var _this = _super.call(this, init) || this;
            _this._text = '';
            _this._orientation = 'horizontal';
            _this.textMeasureValid = false;
            _this.textWidth = 0;
            _this.textHeight = 0;
            if (!init || init.verticalAlign == undefined)
                _this.verticalAlign = 'center';
            if (!init || init.horizontalAlign == undefined)
                _this.horizontalAlign = 'center';
            if (!init || init.selectable == undefined)
                _this.selectable = false;
            if (init) {
                if (init.text !== undefined)
                    _this.text = init.text;
                if (init.fontSize !== undefined)
                    _this.fontSize = init.fontSize;
                if (init.fontFamily !== undefined)
                    _this.fontFamily = init.fontFamily;
                if (init.fontWeight !== undefined)
                    _this.fontWeight = init.fontWeight;
                if (init.color !== undefined)
                    _this.color = init.color;
                if (init.orientation !== undefined)
                    _this.orientation = init.orientation;
                if (init.textTransform !== undefined)
                    _this.textTransform = init.textTransform;
                if (init.textAlign !== undefined)
                    _this.textAlign = init.textAlign;
            }
            return _this;
        }
        Object.defineProperty(Label.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (this._text != text) {
                    this._text = text;
                    if ('textContent' in this.labelDrawing)
                        this.labelDrawing.textContent = this._text;
                    else
                        this.labelDrawing.innerText = this._text;
                    this.textMeasureValid = false;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "fontSize", {
            get: function () {
                if (this._fontSize !== undefined)
                    return this._fontSize;
                else
                    return this.getStyleProperty('fontSize');
            },
            set: function (fontSize) {
                if (this._fontSize !== fontSize) {
                    this._fontSize = fontSize;
                    this.labelDrawing.style.fontSize = this.fontSize + 'px';
                    this.labelDrawing.style.lineHeight = this.fontSize + 'px';
                    this.textMeasureValid = false;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "fontFamily", {
            get: function () {
                if (this._fontFamily !== undefined)
                    return this._fontFamily;
                else
                    return this.getStyleProperty('fontFamily');
            },
            set: function (fontFamily) {
                if (this._fontFamily !== fontFamily) {
                    this._fontFamily = fontFamily;
                    this.labelDrawing.style.fontFamily = this.fontFamily;
                    this.textMeasureValid = false;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "fontWeight", {
            get: function () {
                if (this._fontWeight !== undefined)
                    return this._fontWeight;
                else
                    return this.getStyleProperty('fontWeight');
            },
            set: function (fontWeight) {
                if (this._fontWeight !== fontWeight) {
                    this._fontWeight = fontWeight;
                    this.labelDrawing.style.fontWeight = this.fontWeight;
                    this.textMeasureValid = false;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "textTransform", {
            get: function () {
                if (this._textTransform !== undefined)
                    return this._textTransform;
                else
                    return this.getStyleProperty('textTransform');
            },
            set: function (textTransform) {
                if (this._textTransform !== textTransform) {
                    this._textTransform = textTransform;
                    this.labelDrawing.style.textTransform = this.textTransform;
                    this.textMeasureValid = false;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "textAlign", {
            get: function () {
                if (this._textAlign !== undefined)
                    return this._textAlign;
                else
                    return this.getStyleProperty('textAlign');
            },
            set: function (textAlign) {
                if (this._textAlign !== textAlign) {
                    this._textAlign = textAlign;
                    this.drawing.style.textAlign = this.textAlign;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "color", {
            set: function (color) {
                if (this._color !== color) {
                    this._color = Ui.Color.create(color);
                    if (Core.Navigator.supportRgba)
                        this.labelDrawing.style.color = this.getColor().getCssRgba();
                    else
                        this.labelDrawing.style.color = this.getColor().getCssHtml();
                }
            },
            enumerable: true,
            configurable: true
        });
        Label.prototype.getColor = function () {
            if (this._color !== undefined)
                return this._color;
            else
                return Ui.Color.create(this.getStyleProperty('color'));
        };
        Object.defineProperty(Label.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            set: function (orientation) {
                if (this._orientation != orientation) {
                    this._orientation = orientation;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Label.prototype.onStyleChange = function () {
            this.labelDrawing.style.fontSize = this.fontSize + 'px';
            this.labelDrawing.style.lineHeight = this.fontSize + 'px';
            this.labelDrawing.style.fontFamily = this.fontFamily;
            this.labelDrawing.style.fontWeight = this.fontWeight;
            this.labelDrawing.style.textTransform = this.textTransform;
            this.labelDrawing.style.textAlign = this.textAlign;
            if (Core.Navigator.supportRgba)
                this.labelDrawing.style.color = this.getColor().getCssRgba();
            else
                this.labelDrawing.style.color = this.getColor().getCssHtml();
            this.textMeasureValid = false;
            this.invalidateMeasure();
        };
        Label.prototype.renderDrawing = function () {
            this.labelDrawing = document.createElement('div');
            this.labelDrawing.style.whiteSpace = 'nowrap';
            this.labelDrawing.style.display = 'inline';
            this.labelDrawing.style.position = 'absolute';
            this.labelDrawing.style.left = '0px';
            this.labelDrawing.style.top = '0px';
            return this.labelDrawing;
        };
        Label.prototype.invalidateTextMeasure = function () {
            if (this.textMeasureValid) {
                this.textMeasureValid = false;
                this.invalidateMeasure();
            }
        };
        Label.prototype.measureCore = function (width, height) {
            if (!this.textMeasureValid) {
                this.textMeasureValid = true;
                var text = this._text;
                if (this.textTransform == 'uppercase')
                    text = text.toUpperCase();
                else if (this.textTransform == 'lowercase')
                    text = text.toLowerCase();
                var size = Ui.Label.measureText(text, this.fontSize, this.fontFamily, this.fontWeight);
                this.textWidth = size.width;
                this.textHeight = size.height;
            }
            if (this._orientation === 'vertical')
                return { width: this.textHeight, height: this.textWidth };
            else
                return { width: this.textWidth, height: this.textHeight };
        };
        Label.prototype.arrangeCore = function (width, height) {
            var matrix;
            if (this._orientation == 'vertical') {
                matrix = Ui.Matrix.createTranslate(this.labelDrawing.offsetHeight, 0);
                matrix.rotate(90);
                if (Core.Navigator.isIE) {
                    this.labelDrawing.style.msTransform = matrix.toString();
                    this.labelDrawing.style.msTransformOrigin = '0% 0%';
                }
                else if (Core.Navigator.isGecko) {
                    this.labelDrawing.style.MozTransform = 'matrix(' + matrix.svgMatrix.a.toFixed(4) + ', ' + matrix.svgMatrix.b.toFixed(4) + ', ' + matrix.svgMatrix.c.toFixed(4) + ', ' + matrix.svgMatrix.d.toFixed(4) + ', ' + matrix.svgMatrix.e.toFixed(0) + 'px, ' + matrix.svgMatrix.f.toFixed(0) + 'px)';
                    this.labelDrawing.style.MozTransformOrigin = '0% 0%';
                }
                else if (Core.Navigator.isWebkit) {
                    this.labelDrawing.style.webkitTransform = matrix.toString();
                    this.labelDrawing.style.webkitTransformOrigin = '0% 0%';
                }
            }
            else {
                if (Core.Navigator.isIE && ('removeProperty' in this.labelDrawing.style))
                    this.labelDrawing.style.removeProperty('-ms-transform');
                else if (Core.Navigator.isGecko)
                    this.labelDrawing.style.removeProperty('-moz-transform');
                else if (Core.Navigator.isWebkit)
                    this.labelDrawing.style.removeProperty('-webkit-transform');
            }
        };
        Label.measureTextCanvas = function (text, fontSize, fontFamily, fontWeight) {
            if (Ui.Label.measureBox === undefined)
                this.createMeasureCanvas();
            Ui.Label.measureContext.font = 'normal ' + fontWeight + ' ' + fontSize + 'px ' + fontFamily;
            var res = Ui.Label.measureContext.measureText(text);
            res.height = fontSize;
            return res;
        };
        Label.createMeasureCanvas = function () {
            var measureWindow = window;
            if (Core.Navigator.isIE || Core.Navigator.isGecko)
                measureWindow = Ui.App.getRootWindow();
            if (measureWindow.document.body === undefined) {
                var body = measureWindow.document.createElement('body');
                measureWindow.document.body = body;
            }
            Ui.Label.measureBox = measureWindow.document.createElement('canvas');
            Ui.Label.measureBox.style.visibility = 'hidden';
            Ui.Label.measureBox.style.position = 'absolute';
            Ui.Label.measureBox.style.left = '0px';
            Ui.Label.measureBox.style.top = '0px';
            Ui.Label.measureBox.style.outline = 'none';
            Ui.Label.measureBox.setAttribute('width', '10');
            Ui.Label.measureBox.setAttribute('height', '10');
            measureWindow.document.body.appendChild(Ui.Label.measureBox);
            Ui.Label.measureContext = Ui.Label.measureBox.getContext('2d');
        };
        Label.isFontAvailable = function (fontFamily, fontWeight) {
            var i;
            if (!Core.Navigator.supportCanvas)
                return true;
            if (Ui.Label.measureBox === undefined)
                Ui.Label.createMeasureCanvas();
            var ctx = Ui.Label.measureContext;
            ctx.fillStyle = 'rgba(0,0,0,0)';
            ctx.clearRect(0, 0, 10, 10);
            ctx.textBaseline = 'top';
            ctx.font = 'normal ' + fontWeight + ' 10px ' + fontFamily;
            ctx.fillStyle = 'rgba(255,255,255,1)';
            ctx.fillText('@', 0, 0);
            var wantedImageData = ctx.getImageData(0, 0, 10, 10);
            var empty = true;
            for (i = 0; empty && (i < wantedImageData.data.length); i += 4) {
                if (wantedImageData.data[i + 3] !== 0)
                    empty = false;
            }
            if (empty)
                return false;
            ctx.fillStyle = 'rgba(0,0,0,0)';
            ctx.clearRect(0, 0, 10, 10);
            ctx.fillStyle = 'rgba(255,255,255,1)';
            ctx.font = 'normal ' + fontWeight + ' 10px Sans-Serif';
            ctx.fillText('@', 0, 0);
            var refImageData = ctx.getImageData(0, 0, 10, 10);
            ctx.fillStyle = 'rgba(0,0,0,0)';
            ctx.clearRect(0, 0, 10, 10);
            ctx.fillStyle = 'rgba(255,255,255,1)';
            ctx.font = 'normal ' + fontWeight + ' 10px ' + fontFamily + ',Sans-Serif';
            ctx.fillText('@', 0, 0);
            var imageData = ctx.getImageData(0, 0, 10, 10);
            for (i = 0; i < imageData.data.length; i += 4) {
                if (imageData.data[i + 3] !== refImageData.data[i + 3])
                    return true;
            }
            return false;
        };
        Label.measureTextHtml = function (text, fontSize, fontFamily, fontWeight) {
            if (Ui.Label.measureBox === undefined)
                this.createMeasureHtml();
            Ui.Label.measureBox.style.fontSize = fontSize + 'px';
            Ui.Label.measureBox.style.fontFamily = fontFamily;
            Ui.Label.measureBox.style.fontWeight = fontWeight;
            if ('textContent' in Ui.Label.measureBox)
                Ui.Label.measureBox.textContent = text;
            else
                Ui.Label.measureBox.innerText = text;
            return { width: Ui.Label.measureBox.offsetWidth, height: Ui.Label.measureBox.offsetHeight };
        };
        Label.createMeasureHtml = function () {
            var measureWindow = window;
            if (Core.Navigator.isIE || Core.Navigator.isGecko)
                measureWindow = Ui.App.getRootWindow();
            if (measureWindow.document.body === undefined) {
                var body = measureWindow.document.createElement('body');
                measureWindow.document.body = body;
            }
            Ui.Label.measureBox = measureWindow.document.createElement('div');
            Ui.Label.measureBox.style.whiteSpace = 'nowrap';
            Ui.Label.measureBox.style.position = 'absolute';
            Ui.Label.measureBox.style.left = '0px';
            Ui.Label.measureBox.style.top = '0px';
            Ui.Label.measureBox.style.position = 'absolute';
            Ui.Label.measureBox.style.display = 'inline';
            Ui.Label.measureBox.style.visibility = 'hidden';
            measureWindow.document.body.appendChild(Ui.Label.measureBox);
        };
        Label.measureText = function (text, fontSize, fontFamily, fontWeight) {
            if ((text === '') || (text === undefined))
                return { width: 0, height: 0 };
            if (Core.Navigator.supportCanvas)
                return Ui.Label.measureTextCanvas(text, fontSize, fontFamily, fontWeight);
            else
                return Ui.Label.measureTextHtml(text, fontSize, fontFamily, fontWeight);
        };
        Label.measureBox = undefined;
        Label.measureContext = undefined;
        Label.style = {
            color: Ui.Color.create('#444444'),
            fontSize: 16,
            fontFamily: 'Sans-serif',
            fontWeight: 'normal',
            textTransform: 'none',
            textAlign: 'left'
        };
        return Label;
    }(Ui.Element));
    Ui.Label = Label;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var MovableBase = (function (_super) {
        __extends(MovableBase, _super);
        function MovableBase(init) {
            var _this = _super.call(this, init) || this;
            _this._moveHorizontal = true;
            _this._moveVertical = true;
            _this.posX = 0;
            _this.posY = 0;
            _this.speedX = 0;
            _this.speedY = 0;
            _this.startPosX = 0;
            _this.startPosY = 0;
            _this._inertia = false;
            _this._isDown = false;
            _this._lock = false;
            _this.isInMoveEvent = false;
            _this.cumulMove = 0;
            _this.history = [];
            _this.upped = new Core.Events();
            _this.downed = new Core.Events();
            _this.moved = new Core.Events();
            _this.drawing.style.touchAction = 'none';
            if ('PointerEvent' in window)
                _this.drawing.addEventListener('pointerdown', function (e) { return _this.onPointerDown(e); }, { passive: false });
            else if ('TouchEvent' in window)
                _this.drawing.addEventListener('touchstart', function (e) { return _this.onTouchStart(e); });
            else
                _this.drawing.addEventListener('mousedown', function (e) { return _this.onMouseDown(e); });
            _this.drawing.addEventListener('click', function (e) { e.stopImmediatePropagation(); e.preventDefault(); });
            if (init) {
                if (init.lock !== undefined)
                    _this.lock = init.lock;
                if (init.inertia !== undefined)
                    _this.inertia = init.inertia;
                if (init.moveHorizontal !== undefined)
                    _this.moveHorizontal = init.moveHorizontal;
                if (init.moveVertical !== undefined)
                    _this.moveVertical = init.moveVertical;
                if (init.onupped)
                    _this.upped.connect(init.onupped);
                if (init.ondowned)
                    _this.downed.connect(init.ondowned);
                if (init.onmoved)
                    _this.moved.connect(init.onmoved);
            }
            return _this;
        }
        Object.defineProperty(MovableBase.prototype, "onupped", {
            set: function (value) { this.upped.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "ondowned", {
            set: function (value) { this.downed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "onmoved", {
            set: function (value) { this.moved.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "lock", {
            get: function () {
                return this._lock;
            },
            set: function (lock) {
                this._lock = lock;
                if (lock)
                    this.stopInertia();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "isDown", {
            get: function () {
                return this._isDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "inertia", {
            get: function () {
                return this._inertia;
            },
            set: function (inertiaActive) {
                this._inertia = inertiaActive;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "moveHorizontal", {
            get: function () {
                return this._moveHorizontal;
            },
            set: function (moveHorizontal) {
                this._moveHorizontal = moveHorizontal;
                this.updateTouchAction();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "moveVertical", {
            get: function () {
                return this._moveVertical;
            },
            set: function (moveVertical) {
                this._moveVertical = moveVertical;
                this.updateTouchAction();
            },
            enumerable: true,
            configurable: true
        });
        MovableBase.prototype.updateTouchAction = function () {
            if (this._moveHorizontal && this._moveVertical)
                this.drawing.style.touchAction = 'none';
            else if (this._moveHorizontal)
                this.drawing.style.touchAction = 'pan-y';
            else if (this._moveVertical)
                this.drawing.style.touchAction = 'pan-x';
            else
                this.drawing.style.touchAction = 'auto';
        };
        MovableBase.prototype.getSpeed = function () {
            if (this.history.length < 2)
                return { x: 0, y: 0 };
            else {
                var measure = void 0;
                var i = this.history.length;
                var now = this.history[--i];
                do {
                    measure = this.history[--i];
                } while ((i > 0) && ((now.time - measure.time) < 0.08));
                var deltaTime = now.time - measure.time;
                return {
                    x: (now.x - measure.x) / deltaTime,
                    y: (now.y - measure.y) / deltaTime
                };
            }
        };
        MovableBase.prototype.setPosition = function (x, y, dontSignal) {
            if (dontSignal === void 0) { dontSignal = false; }
            if ((x !== undefined) && (this._moveHorizontal)) {
                if (isNaN(x))
                    this.posX = 0;
                else
                    this.posX = x;
            }
            if ((y !== undefined) && (this._moveVertical)) {
                if (isNaN(y))
                    this.posY = 0;
                else
                    this.posY = y;
            }
            if (!this.isInMoveEvent && !dontSignal) {
                this.isInMoveEvent = true;
                this.moved.fire({ target: this });
                this.onMove(this.posX, this.posY);
                this.isInMoveEvent = false;
            }
        };
        Object.defineProperty(MovableBase.prototype, "positionX", {
            get: function () {
                return this.posX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MovableBase.prototype, "positionY", {
            get: function () {
                return this.posY;
            },
            enumerable: true,
            configurable: true
        });
        MovableBase.prototype.onMove = function (x, y) {
        };
        MovableBase.prototype.onDown = function () {
            this.history = [];
            this.cumulMove = 0;
            this._isDown = true;
            this.downed.fire({ target: this });
        };
        MovableBase.prototype.onUp = function (abort) {
            this._isDown = false;
            this.upped.fire({
                target: this, speedX: this.speedX, speedY: this.speedY,
                deltaX: (this.posX - this.startPosX),
                deltaY: (this.posY - this.startPosY),
                cumulMove: this.cumulMove,
                abort: abort
            });
        };
        MovableBase.prototype.onTouchStart = function (event) {
            var _this = this;
            if (this._isDown || this.isDisabled || this._lock)
                return;
            if (event.targetTouches.length != 1)
                return;
            var initialPosition = new Ui.Point(event.targetTouches[0].clientX, event.targetTouches[0].clientY);
            this._pointerId = event.targetTouches[0].identifier;
            this.stopInertia();
            this.startPosX = this.posX;
            this.startPosY = this.posY;
            this.onDown();
            var onTouchMove = function (e) {
                var touch;
                for (var i = 0; touch == undefined && i < e.touches.length; i++)
                    if (e.touches[i].identifier == _this._pointerId)
                        touch = e.touches[i];
                if (!touch)
                    return;
                e.stopPropagation();
                e.preventDefault();
                var initial = _this.pointFromWindow(initialPosition);
                var current = _this.pointFromWindow(new Ui.Point(touch.clientX, touch.clientY));
                var delta = { x: current.x - initial.x, y: current.y - initial.y };
                var time = (new Date().getTime()) / 1000;
                _this.history.push({ time: time, x: _this.startPosX + delta.x, y: _this.startPosY + delta.y });
                while ((_this.history.length > 2) && (time - _this.history[0].time > Ui.Pointer.HISTORY_TIMELAPS)) {
                    _this.history.shift();
                }
                _this.setPosition(_this.startPosX + delta.x, _this.startPosY + delta.y);
            };
            var onTouchCancel = function (e) {
                _this.drawing.removeEventListener('touchmove', onTouchMove);
                _this.drawing.removeEventListener('touchend', onTouchEnd);
                _this.drawing.removeEventListener('touchcancel', onTouchCancel);
                _this._pointerId = undefined;
                _this.onUp(true);
            };
            var onTouchEnd = function (e) {
                _this.drawing.removeEventListener('touchmove', onTouchMove);
                _this.drawing.removeEventListener('touchend', onTouchEnd);
                _this.drawing.removeEventListener('touchcancel', onTouchCancel);
                _this._pointerId = undefined;
                e.stopPropagation();
                e.preventDefault();
                if (_this.history.length > 0) {
                    var time = (new Date().getTime()) / 1000;
                    _this.history.push({ time: time, x: _this.history[_this.history.length - 1].x, y: _this.history[_this.history.length - 1].y });
                }
                var speed = _this.getSpeed();
                _this.speedX = speed.x;
                _this.speedY = speed.y;
                if (_this.inertia)
                    _this.startInertia();
                _this.onUp(false);
            };
            this.drawing.addEventListener('touchmove', onTouchMove, { passive: false });
            this.drawing.addEventListener('touchend', onTouchEnd, { passive: false });
            this.drawing.addEventListener('touchcancel', onTouchCancel, { passive: false });
        };
        MovableBase.prototype.onPointerDown = function (event) {
            var _this = this;
            if (this._isDown || this.isDisabled || this._lock)
                return;
            if (event.pointerType == 'mouse' && event.button != 0)
                return;
            var initialPosition = new Ui.Point(event.clientX, event.clientY);
            this.stopInertia();
            this.startPosX = this.posX;
            this.startPosY = this.posY;
            this.onDown();
            this._pointerId = event.pointerId;
            this.drawing.setPointerCapture(event.pointerId);
            var onPointerMove = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                e.stopImmediatePropagation();
                e.preventDefault();
                var initial = _this.pointFromWindow(initialPosition);
                var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                var delta = { x: current.x - initial.x, y: current.y - initial.y };
                var time = (new Date().getTime()) / 1000;
                _this.history.push({ time: time, x: _this.startPosX + delta.x, y: _this.startPosY + delta.y });
                while ((_this.history.length > 2) && (time - _this.history[0].time > Ui.Pointer.HISTORY_TIMELAPS)) {
                    _this.history.shift();
                }
                _this.setPosition(_this.startPosX + delta.x, _this.startPosY + delta.y);
            };
            var onPointerCancel = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                _this.drawing.removeEventListener('pointermove', onPointerMove);
                _this.drawing.removeEventListener('pointercancel', onPointerCancel);
                _this.drawing.removeEventListener('pointerup', onPointerUp);
                _this.drawing.releasePointerCapture(event.pointerId);
                _this._pointerId = undefined;
                e.stopImmediatePropagation();
                e.preventDefault();
                _this.onUp(true);
            };
            var onPointerUp = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                _this.drawing.removeEventListener('pointermove', onPointerMove);
                _this.drawing.removeEventListener('pointercancel', onPointerCancel);
                _this.drawing.removeEventListener('pointerup', onPointerUp);
                _this.drawing.releasePointerCapture(event.pointerId);
                _this._pointerId = undefined;
                e.stopImmediatePropagation();
                e.preventDefault();
                var initial = _this.pointFromWindow(initialPosition);
                var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                var delta = { x: current.x - initial.x, y: current.y - initial.y };
                var time = (new Date().getTime()) / 1000;
                _this.history.push({ time: time, x: _this.startPosX + delta.x, y: _this.startPosY + delta.y });
                var speed = _this.getSpeed();
                _this.speedX = speed.x;
                _this.speedY = speed.y;
                if (_this.inertia)
                    _this.startInertia();
                _this.onUp(false);
            };
            this.drawing.addEventListener('pointermove', onPointerMove);
            this.drawing.addEventListener('pointercancel', onPointerCancel);
            this.drawing.addEventListener('pointerup', onPointerUp);
            event.stopImmediatePropagation();
            event.preventDefault();
        };
        MovableBase.prototype.onMouseDown = function (event) {
            var _this = this;
            if (this._isDown || this.isDisabled || this._lock || event.button != 0)
                return;
            var initialPosition = new Ui.Point(event.clientX, event.clientY);
            this.stopInertia();
            this.startPosX = this.posX;
            this.startPosY = this.posY;
            this.onDown();
            var onMouseMove = function (e) {
                if (e.button != 0)
                    return;
                e.stopPropagation();
                e.preventDefault();
                var initial = _this.pointFromWindow(initialPosition);
                var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                var delta = { x: current.x - initial.x, y: current.y - initial.y };
                var time = (new Date().getTime()) / 1000;
                _this.history.push({ time: time, x: _this.startPosX + delta.x, y: _this.startPosY + delta.y });
                while ((_this.history.length > 2) && (time - _this.history[0].time > Ui.Pointer.HISTORY_TIMELAPS)) {
                    _this.history.shift();
                }
                _this.setPosition(_this.startPosX + delta.x, _this.startPosY + delta.y);
            };
            var onMouseUp = function (e) {
                if (e.button != 0)
                    return;
                window.removeEventListener('mousemove', onMouseMove, true);
                window.removeEventListener('mouseup', onMouseUp, true);
                _this._pointerId = undefined;
                e.stopPropagation();
                e.preventDefault();
                var initial = _this.pointFromWindow(initialPosition);
                var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                var delta = { x: current.x - initial.x, y: current.y - initial.y };
                var time = (new Date().getTime()) / 1000;
                _this.history.push({ time: time, x: _this.startPosX + delta.x, y: _this.startPosY + delta.y });
                var speed = _this.getSpeed();
                _this.speedX = speed.x;
                _this.speedY = speed.y;
                if (_this.inertia)
                    _this.startInertia();
                _this.onUp(false);
            };
            window.addEventListener('mousemove', onMouseMove, true);
            window.addEventListener('mouseup', onMouseUp, true);
        };
        MovableBase.prototype.startInertia = function () {
            var _this = this;
            if (this.inertiaClock == undefined) {
                this.inertiaClock = new Anim.Clock({ duration: 'forever', target: this });
                this.inertiaClock.timeupdate.connect(function (e) {
                    if (e.deltaTick === 0)
                        return;
                    var oldPosX = _this.posX;
                    var oldPosY = _this.posY;
                    var posX = _this.posX + (_this.speedX * e.deltaTick);
                    var posY = _this.posY + (_this.speedY * e.deltaTick);
                    _this.setPosition(posX, posY);
                    if ((_this.posX == oldPosX) && (_this.posY == oldPosY)) {
                        _this.stopInertia();
                        return;
                    }
                    _this.speedX -= _this.speedX * e.deltaTick * 3;
                    _this.speedY -= _this.speedY * e.deltaTick * 3;
                    if (Math.abs(_this.speedX) < 0.1)
                        _this.speedX = 0;
                    if (Math.abs(_this.speedY) < 0.1)
                        _this.speedY = 0;
                    if ((_this.speedX === 0) && (_this.speedY === 0))
                        _this.stopInertia();
                });
                this.inertiaClock.begin();
            }
        };
        MovableBase.prototype.stopInertia = function () {
            if (this.inertiaClock !== undefined) {
                this.inertiaClock.stop();
                this.inertiaClock = undefined;
            }
        };
        return MovableBase;
    }(Ui.Container));
    Ui.MovableBase = MovableBase;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Movable = (function (_super) {
        __extends(Movable, _super);
        function Movable(init) {
            var _this = _super.call(this, init) || this;
            _this._cursor = 'inherit';
            _this.focusable = true;
            _this.drawing.style.cursor = _this._cursor;
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            if (init) {
                if (init.cursor !== undefined)
                    _this.cursor = init.cursor;
                if (init.content)
                    _this.content = init.content;
            }
            return _this;
        }
        Object.defineProperty(Movable.prototype, "cursor", {
            set: function (cursor) {
                if (this._cursor != cursor && !this.isDisabled) {
                    this._cursor = cursor;
                    this.drawing.style.cursor = this._cursor;
                }
            },
            enumerable: true,
            configurable: true
        });
        Movable.prototype.onKeyDown = function (event) {
            if (this.isDisabled)
                return;
            var key = event.which;
            if (((key == 37) || (key == 39)) && this.moveHorizontal) {
                event.preventDefault();
                event.stopPropagation();
                if (key == 37)
                    this.setPosition(this.posX - 10, undefined);
                if (key == 39)
                    this.setPosition(this.posX + 10, undefined);
            }
            if (((key == 38) || (key == 40)) && this.moveVertical) {
                event.preventDefault();
                event.stopPropagation();
                if (key == 38)
                    this.setPosition(undefined, this.posY - 10);
                if (key == 40)
                    this.setPosition(undefined, this.posY + 10);
            }
        };
        Movable.prototype.onMove = function (x, y) {
            this.transform = Ui.Matrix.createTranslate(this.posX, this.posY);
        };
        Movable.prototype.measureCore = function (width, height) {
            if (this._content)
                return this._content.measure(width, height);
            else
                return { width: 0, height: 0 };
        };
        Movable.prototype.arrangeCore = function (width, height) {
            if (this._content)
                this._content.arrange(0, 0, width, height);
        };
        Object.defineProperty(Movable.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (this._content)
                    this.removeChild(this._content);
                this._content = content;
                if (this._content)
                    this.appendChild(this._content);
            },
            enumerable: true,
            configurable: true
        });
        Movable.prototype.onDisable = function () {
            this.drawing.style.cursor = 'inherit';
        };
        Movable.prototype.onEnable = function () {
            this.drawing.style.cursor = this._cursor;
        };
        return Movable;
    }(Ui.MovableBase));
    Ui.Movable = Movable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var TransformableWatcher = (function (_super) {
        __extends(TransformableWatcher, _super);
        function TransformableWatcher(init) {
            var _this = _super.call(this) || this;
            _this._inertia = false;
            _this._isDown = false;
            _this.transformLock = false;
            _this._angle = 0;
            _this._scale = 1;
            _this._translateX = 0;
            _this._translateY = 0;
            _this.startAngle = 0;
            _this.startScale = 0;
            _this.startTranslateX = 0;
            _this.startTranslateY = 0;
            _this._allowScale = true;
            _this._minScale = 0.1;
            _this._maxScale = 10;
            _this._allowRotate = true;
            _this._allowTranslate = true;
            _this._allowLeftMouse = true;
            _this.speedX = 0;
            _this.speedY = 0;
            _this.element = init.element;
            _this.element.drawing.style.touchAction = 'none';
            if (init.transform != undefined)
                _this.transform = init.transform;
            if (init.inertiastart != undefined)
                _this.inertiastart = init.inertiastart;
            if (init.inertiaend != undefined)
                _this.inertiaend = init.inertiaend;
            if (init.down != undefined)
                _this.down = init.down;
            if (init.up != undefined)
                _this.up = init.up;
            if (init.allowLeftMouse != undefined)
                _this.allowLeftMouse = init.allowLeftMouse;
            if (init.allowScale != undefined)
                _this.allowScale = init.allowScale;
            if (init.minScale != undefined)
                _this.minScale = init.minScale;
            if (init.maxScale != undefined)
                _this.maxScale = init.maxScale;
            if (init.allowRotate != undefined)
                _this.allowRotate = init.allowRotate;
            if (init.allowTranslate != undefined)
                _this.allowTranslate = init.allowTranslate;
            if (init.angle != undefined)
                _this.angle = init.angle;
            if (init.scale != undefined)
                _this.scale = init.scale;
            if (init.translateX != undefined)
                _this.translateX = init.translateX;
            if (init.translateY != undefined)
                _this.translateY = init.translateY;
            if (init.inertia != undefined)
                _this.inertia = init.inertia;
            _this.element.setTransformOrigin(0, 0, true);
            _this.element.ptrdowned.connect(function (e) { return _this.onPointerDown(e); });
            _this.element.wheelchanged.connect(function (e) { return _this.onWheel(e); });
            return _this;
        }
        Object.defineProperty(TransformableWatcher.prototype, "allowLeftMouse", {
            set: function (value) {
                this._allowLeftMouse = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "allowScale", {
            set: function (allow) {
                this._allowScale = allow;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "minScale", {
            set: function (minScale) {
                this._minScale = minScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "maxScale", {
            set: function (maxScale) {
                this._maxScale = maxScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "allowRotate", {
            set: function (allow) {
                this._allowRotate = allow;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "allowTranslate", {
            set: function (allow) {
                this._allowTranslate = allow;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "isDown", {
            get: function () {
                return this._isDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "isInertia", {
            get: function () {
                return this.inertiaClock !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "angle", {
            get: function () {
                return this._angle;
            },
            set: function (angle) {
                this.setContentTransform(undefined, undefined, undefined, angle);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "scale", {
            get: function () {
                return this._scale;
            },
            set: function (scale) {
                this.setContentTransform(undefined, undefined, scale, undefined);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "translateX", {
            get: function () {
                return this._translateX;
            },
            set: function (translateX) {
                this.setContentTransform(translateX, undefined, undefined, undefined);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransformableWatcher.prototype, "translateY", {
            get: function () {
                return this._translateY;
            },
            set: function (translateY) {
                this.setContentTransform(undefined, translateY, undefined, undefined);
            },
            enumerable: true,
            configurable: true
        });
        TransformableWatcher.prototype.buildMatrix = function (translateX, translateY, scale, angle) {
            if (translateX === undefined)
                translateX = this._translateX;
            if (translateY === undefined)
                translateY = this._translateY;
            if (scale === undefined)
                scale = this._scale;
            if (angle === undefined)
                angle = this._angle;
            return Ui.Matrix.createTranslate(this.element.layoutWidth * this.element.transformOriginX, this.element.layoutHeight * this.element.transformOriginX).
                translate(translateX, translateY).
                scale(scale, scale).
                rotate(angle).
                translate(-this.element.layoutWidth * this.element.transformOriginX, -this.element.layoutHeight * this.element.transformOriginX);
        };
        Object.defineProperty(TransformableWatcher.prototype, "matrix", {
            get: function () {
                return ((new Ui.Matrix()).
                    translate(this._translateX, this._translateY).
                    scale(this._scale, this._scale).
                    rotate(this._angle));
            },
            enumerable: true,
            configurable: true
        });
        TransformableWatcher.prototype.getBoundaryBox = function (matrix) {
            if (matrix === undefined)
                matrix = this.matrix;
            var p1 = (new Ui.Point(0, 0)).multiply(matrix);
            var p2 = (new Ui.Point(this.element.layoutWidth, 0)).multiply(matrix);
            var p3 = (new Ui.Point(this.element.layoutWidth, this.element.layoutHeight)).multiply(matrix);
            var p4 = (new Ui.Point(0, this.element.layoutHeight)).multiply(matrix);
            var minX = Math.min(p1.x, Math.min(p2.x, Math.min(p3.x, p4.x)));
            var minY = Math.min(p1.y, Math.min(p2.y, Math.min(p3.y, p4.y)));
            var maxX = Math.max(p1.x, Math.max(p2.x, Math.max(p3.x, p4.x)));
            var maxY = Math.max(p1.y, Math.max(p2.y, Math.max(p3.y, p4.y)));
            return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
        };
        TransformableWatcher.prototype.setContentTransform = function (translateX, translateY, scale, angle) {
            if (translateX === undefined)
                translateX = this._translateX;
            if (translateY === undefined)
                translateY = this._translateY;
            if (scale === undefined)
                scale = this._scale;
            if (angle === undefined)
                angle = this._angle;
            this._translateX = translateX;
            this._translateY = translateY;
            this._scale = scale;
            this._angle = angle;
            if (!this.transformLock) {
                this.transformLock = true;
                var testOnly = !(((this.watcher1 === undefined) || this.watcher1.getIsCaptured()) &&
                    ((this.watcher2 === undefined) || this.watcher2.getIsCaptured()));
                if (this.transform)
                    this.transform(this, testOnly);
                this.transformLock = false;
            }
        };
        Object.defineProperty(TransformableWatcher.prototype, "inertia", {
            get: function () {
                return this._inertia;
            },
            set: function (inertiaActive) {
                this._inertia = inertiaActive;
            },
            enumerable: true,
            configurable: true
        });
        TransformableWatcher.prototype.onDown = function () {
            this._isDown = true;
            if (this.down)
                this.down(this);
        };
        TransformableWatcher.prototype.onUp = function () {
            this._isDown = false;
            if (this.up)
                this.up(this);
        };
        TransformableWatcher.prototype.onPointerDown = function (event) {
            var _this = this;
            if (!this._allowLeftMouse && event.pointerType == 'mouse' && event.pointer.button == 0)
                return;
            this.stopInertia();
            if (this.watcher1 === undefined) {
                if (this._allowTranslate)
                    this.onDown();
                var watcher = event.pointer.watch(this);
                this.watcher1 = watcher;
                watcher.moved.connect(function (e) { return _this.onPointerMove(e.target); });
                watcher.upped.connect(function (e) { return _this.onPointerUp(e.target); });
                watcher.cancelled.connect(function (e) { return _this.onPointerCancel(e.target); });
                this.startAngle = this._angle;
                this.startScale = this._scale;
                this.startTranslateX = this._translateX;
                this.startTranslateY = this._translateY;
            }
            else if (this.watcher2 === undefined) {
                if (!this._allowTranslate)
                    this.onDown();
                this.watcher1.pointer.setInitialPosition(this.watcher1.pointer.getX(), this.watcher1.pointer.getY());
                var watcher = event.pointer.watch(this);
                this.watcher2 = watcher;
                watcher.moved.connect(function (e) { return _this.onPointerMove(e.target); });
                watcher.upped.connect(function (e) { return _this.onPointerUp(e.target); });
                watcher.cancelled.connect(function (e) { return _this.onPointerUp(e.target); });
                this.startAngle = this._angle;
                this.startScale = this._scale;
                this.startTranslateX = this._translateX;
                this.startTranslateY = this._translateY;
            }
        };
        TransformableWatcher.prototype.onPointerMove = function (watcher) {
            var pos1;
            var pos2;
            var start1;
            var start2;
            if ((this.watcher1 !== undefined) && (this.watcher2 !== undefined)) {
                if (!this.watcher1.getIsCaptured() && this.watcher1.pointer.getIsMove())
                    this.watcher1.capture();
                if (!this.watcher2.getIsCaptured() && this.watcher2.pointer.getIsMove())
                    this.watcher2.capture();
                pos1 = this.element.parent.pointFromWindow(new Ui.Point(this.watcher1.pointer.getX(), this.watcher1.pointer.getY()));
                pos2 = this.element.parent.pointFromWindow(new Ui.Point(this.watcher2.pointer.getX(), this.watcher2.pointer.getY()));
                start1 = this.element.parent.pointFromWindow(new Ui.Point(this.watcher1.pointer.getInitialX(), this.watcher1.pointer.getInitialY()));
                start2 = this.element.parent.pointFromWindow(new Ui.Point(this.watcher2.pointer.getInitialX(), this.watcher2.pointer.getInitialY()));
                var startVector = { x: start2.x - start1.x, y: start2.y - start1.y };
                var endVector = { x: pos2.x - pos1.x, y: pos2.y - pos1.y };
                startVector.norm = Math.sqrt((startVector.x * startVector.x) + (startVector.y * startVector.y));
                endVector.norm = Math.sqrt((endVector.x * endVector.x) + (endVector.y * endVector.y));
                var scale = endVector.norm / startVector.norm;
                startVector.x /= startVector.norm;
                startVector.y /= startVector.norm;
                endVector.x /= endVector.norm;
                endVector.y /= endVector.norm;
                var divVector = {
                    x: (startVector.x * endVector.x + startVector.y * endVector.y),
                    y: (startVector.y * endVector.x - startVector.x * endVector.y)
                };
                var angle = -(Math.atan2(divVector.y, divVector.x) * 180.0) / Math.PI;
                var deltaMatrix = Ui.Matrix.createTranslate(pos1.x - start1.x, pos1.y - start1.y).translate(start1.x, start1.y);
                if (this._allowScale) {
                    if ((this._minScale !== undefined) || (this._maxScale !== undefined)) {
                        var totalScale = this.startScale * scale;
                        if ((this._minScale !== undefined) && (totalScale < this._minScale))
                            totalScale = this._minScale;
                        if ((this._maxScale !== undefined) && (totalScale > this._maxScale))
                            totalScale = this._maxScale;
                        scale = totalScale / this.startScale;
                    }
                    deltaMatrix = deltaMatrix.scale(scale, scale);
                }
                else
                    scale = 1;
                if (this._allowRotate)
                    deltaMatrix = deltaMatrix.rotate(angle);
                else
                    angle = 0;
                deltaMatrix = deltaMatrix.translate(-start1.x, -start1.y);
                var origin_1 = new Ui.Point(this.element.layoutWidth * this.element.transformOriginX, this.element.layoutHeight * this.element.transformOriginX);
                deltaMatrix = deltaMatrix.translate(origin_1.x, origin_1.y).
                    translate(this.startTranslateX, this.startTranslateY).
                    scale(this.startScale, this.startScale).
                    rotate(this.startAngle).
                    translate(-origin_1.x, -origin_1.y);
                origin_1 = origin_1.multiply(deltaMatrix);
                this.setContentTransform(origin_1.x - this.element.layoutWidth * this.element.transformOriginX, origin_1.y - this.element.layoutHeight * this.element.transformOriginY, this.startScale * scale, this.startAngle + angle);
            }
            else if ((this.watcher1 !== undefined) && this._allowTranslate) {
                pos1 = this.element.parent.pointFromWindow(new Ui.Point(this.watcher1.pointer.getX(), this.watcher1.pointer.getY()));
                start1 = this.element.parent.pointFromWindow(new Ui.Point(this.watcher1.pointer.getInitialX(), this.watcher1.pointer.getInitialY()));
                var deltaX = pos1.x - start1.x;
                var deltaY = pos1.y - start1.y;
                var delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                this.setContentTransform(this.startTranslateX + (pos1.x - start1.x), this.startTranslateY + (pos1.y - start1.y), this.startScale, this.startAngle);
                var takenDeltaX = (this._translateX - this.startTranslateX);
                var takenDeltaY = (this._translateY - this.startTranslateY);
                var takenDelta = Math.sqrt(takenDeltaX * takenDeltaX + takenDeltaY * takenDeltaY);
                var test = 0;
                if (delta > 0)
                    test = (takenDelta / delta);
                if (!this.watcher1.getIsCaptured() && this.watcher1.pointer.getIsMove() && (test > 0.7))
                    this.watcher1.capture();
            }
        };
        TransformableWatcher.prototype.onPointerCancel = function (watcher) {
            this.onPointerUp(watcher);
            this.stopInertia();
            this._angle = this.startAngle;
            this._scale = this.startScale;
            this._translateX = this.startTranslateX;
            this._translateY = this.startTranslateY;
        };
        TransformableWatcher.prototype.onPointerUp = function (watcher) {
            if ((this.watcher1 !== undefined) && (this.watcher1 === watcher)) {
                if (this.watcher2 !== undefined) {
                    this.watcher1.unwatch();
                    this.watcher1 = this.watcher2;
                    delete (this.watcher2);
                    this.watcher1.pointer.setInitialPosition(this.watcher1.pointer.getX(), this.watcher1.pointer.getY());
                    this.startAngle = this._angle;
                    this.startScale = this._scale;
                    this.startTranslateX = this._translateX;
                    this.startTranslateY = this._translateY;
                    if (!this._allowTranslate)
                        this.onUp();
                }
                else {
                    if (this._allowTranslate)
                        this.onUp();
                    var speed = this.watcher1.getSpeed();
                    this.speedX = speed.x;
                    this.speedY = speed.y;
                    this.watcher1.unwatch();
                    delete (this.watcher1);
                    this.startInertia();
                }
            }
            if ((this.watcher2 !== undefined) && (this.watcher2 === watcher)) {
                this.watcher2.unwatch();
                delete (this.watcher2);
                this.watcher1.pointer.setInitialPosition(this.watcher1.pointer.getX(), this.watcher1.pointer.getY());
                this.startAngle = this._angle;
                this.startScale = this._scale;
                this.startTranslateX = this._translateX;
                this.startTranslateY = this._translateY;
                if (!this._allowTranslate)
                    this.onUp();
            }
        };
        TransformableWatcher.prototype.onWheel = function (event) {
            var delta = 0;
            delta = event.deltaX + event.deltaY;
            if (event.altKey) {
                if (this._allowRotate) {
                    var angle = delta / 5;
                    var pos = this.element.parent.pointFromWindow(new Ui.Point(event.clientX, event.clientY));
                    var origin_2 = new Ui.Point(this.element.layoutX + this.element.layoutWidth * this.element.transformOriginX, this.element.layoutY + this.element.layoutHeight * this.element.transformOriginY);
                    var deltaMatrix = Ui.Matrix.createTranslate(pos.x, pos.y).
                        rotate(angle).
                        translate(origin_2.x, origin_2.y).
                        translate(-pos.x, -pos.y).
                        translate(this._translateX, this._translateY).
                        scale(this._scale, this._scale).
                        rotate(this._angle).
                        translate(-origin_2.x, -origin_2.y);
                    var newOrigin = origin_2.multiply(deltaMatrix);
                    this.setContentTransform(newOrigin.x - origin_2.x, newOrigin.y - origin_2.y, this._scale, this._angle + angle);
                }
            }
            else if (event.ctrlKey) {
                if (this._allowScale) {
                    var scale = Math.pow(2, (Math.log(this._scale) / Math.log(2)) - delta / 60);
                    if ((this._minScale !== undefined) && (scale < this._minScale))
                        scale = this._minScale;
                    if ((this._maxScale !== undefined) && (scale > this._maxScale))
                        scale = this._maxScale;
                    var deltaScale = scale / this._scale;
                    var pos = this.element.parent.pointFromWindow(new Ui.Point(event.clientX, event.clientY));
                    var origin_3 = new Ui.Point(this.element.layoutX + this.element.layoutWidth * this.element.transformOriginX, this.element.layoutY + this.element.layoutHeight * this.element.transformOriginY);
                    var deltaMatrix = Ui.Matrix.createTranslate(pos.x, pos.y).
                        scale(deltaScale, deltaScale).
                        translate(-pos.x, -pos.y).
                        translate(origin_3.x, origin_3.y).
                        translate(this._translateX, this._translateY).
                        scale(this._scale, this._scale).
                        rotate(this._angle).
                        translate(-origin_3.x, -origin_3.y);
                    var newOrigin = origin_3.multiply(deltaMatrix);
                    this.setContentTransform(newOrigin.x - origin_3.x, newOrigin.y - origin_3.y, scale, this._angle);
                }
            }
            else
                return;
            event.stopPropagation();
        };
        TransformableWatcher.prototype.startInertia = function () {
            var _this = this;
            if ((this.inertiaClock === undefined) && this.inertia) {
                this.inertiaClock = new Anim.Clock({ duration: 'forever', target: this.element });
                this.inertiaClock.timeupdate.connect(function (e) { return _this.onTimeupdate(e.target, e.progress, e.deltaTick); });
                this.inertiaClock.begin();
                if (this.inertiastart)
                    this.inertiastart(this);
            }
        };
        TransformableWatcher.prototype.onTimeupdate = function (clock, progress, delta) {
            if (delta === 0)
                return;
            var oldTranslateX = this._translateX;
            var oldTranslateY = this._translateY;
            var translateX = this._translateX + (this.speedX * delta);
            var translateY = this._translateY + (this.speedY * delta);
            this.setContentTransform(translateX, translateY, undefined, undefined);
            if ((this._translateX === oldTranslateX) && (this._translateY === oldTranslateY)) {
                this.stopInertia();
                return;
            }
            this.speedX -= this.speedX * delta * 3;
            this.speedY -= this.speedY * delta * 3;
            if (Math.abs(this.speedX) < 0.1)
                this.speedX = 0;
            if (Math.abs(this.speedY) < 0.1)
                this.speedY = 0;
            if ((this.speedX === 0) && (this.speedY === 0))
                this.stopInertia();
        };
        TransformableWatcher.prototype.stopInertia = function () {
            if (this.inertiaClock !== undefined) {
                this.inertiaClock.stop();
                delete (this.inertiaClock);
                this.setContentTransform(Math.round(this._translateX), Math.round(this._translateY), undefined, undefined);
                if (this.inertiaend)
                    this.inertiaend(this);
            }
        };
        return TransformableWatcher;
    }(Core.Object));
    Ui.TransformableWatcher = TransformableWatcher;
    var Transformable = (function (_super) {
        __extends(Transformable, _super);
        function Transformable(init) {
            var _this = _super.call(this) || this;
            _this._inertia = false;
            _this._isDown = false;
            _this.transformLock = false;
            _this._angle = 0;
            _this._scale = 1;
            _this._translateX = 0;
            _this._translateY = 0;
            _this.startAngle = 0;
            _this.startScale = 0;
            _this.startTranslateX = 0;
            _this.startTranslateY = 0;
            _this._allowScale = true;
            _this._minScale = 0.1;
            _this._maxScale = 10;
            _this._allowRotate = true;
            _this._allowTranslate = true;
            _this._allowLeftMouse = true;
            _this.speedX = 0;
            _this.speedY = 0;
            _this.downed = new Core.Events();
            _this.upped = new Core.Events();
            _this.transformed = new Core.Events();
            _this.inertiastarted = new Core.Events();
            _this.inertiaended = new Core.Events();
            _this.focusable = true;
            _this.drawing.style.touchAction = 'none';
            _this.contentBox = new Ui.LBox();
            _this.contentBox.setTransformOrigin(0, 0, true);
            _this.appendChild(_this.contentBox);
            _this.ptrdowned.connect(function (e) { return _this.onPointerDown(e); });
            _this.wheelchanged.connect(function (e) { return _this.onWheel(e); });
            if (init) {
                if (init.inertia !== undefined)
                    _this.inertia = init.inertia;
                if (init.allowLeftMouse !== undefined)
                    _this.allowLeftMouse = init.allowLeftMouse;
                if (init.allowScale !== undefined)
                    _this.allowScale = init.allowScale;
                if (init.minScale !== undefined)
                    _this.minScale = init.minScale;
                if (init.maxScale !== undefined)
                    _this.maxScale = init.maxScale;
                if (init.allowRotate !== undefined)
                    _this.allowRotate = init.allowRotate;
                if (init.allowTranslate !== init.allowTranslate)
                    _this.allowTranslate = init.allowTranslate;
                if (init.angle !== undefined)
                    _this.angle = init.angle;
                if (init.scale !== undefined)
                    _this.scale = init.scale;
                if (init.translateX !== undefined)
                    _this.translateX = init.translateX;
                if (init.translateY !== undefined)
                    _this.translateY = init.translateY;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.ondowned)
                    _this.downed.connect(init.ondowned);
                if (init.onupped)
                    _this.upped.connect(init.onupped);
                if (init.ontransformed)
                    _this.transformed.connect(init.ontransformed);
                if (init.oninertiastarted)
                    _this.inertiastarted.connect(init.oninertiastarted);
                if (init.oninertiaended)
                    _this.inertiaended.connect(init.oninertiaended);
            }
            return _this;
        }
        Object.defineProperty(Transformable.prototype, "ondowned", {
            set: function (value) { this.downed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "onupped", {
            set: function (value) { this.upped.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "ontransformed", {
            set: function (value) { this.transformed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "oninertiastarted", {
            set: function (value) { this.inertiastarted.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "oninertiaended", {
            set: function (value) { this.inertiaended.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "allowLeftMouse", {
            set: function (value) {
                this._allowLeftMouse = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "allowScale", {
            set: function (allow) {
                this._allowScale = allow;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "minScale", {
            set: function (minScale) {
                this._minScale = minScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "maxScale", {
            set: function (maxScale) {
                this._maxScale = maxScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "allowRotate", {
            set: function (allow) {
                this._allowRotate = allow;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "allowTranslate", {
            set: function (allow) {
                this._allowTranslate = allow;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "isDown", {
            get: function () {
                return this._isDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "isInertia", {
            get: function () {
                return this.inertiaClock !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "angle", {
            get: function () {
                return this._angle;
            },
            set: function (angle) {
                this.setContentTransform(undefined, undefined, undefined, angle);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "scale", {
            get: function () {
                return this._scale;
            },
            set: function (scale) {
                this.setContentTransform(undefined, undefined, scale, undefined);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "translateX", {
            get: function () {
                return this._translateX;
            },
            set: function (translateX) {
                this.setContentTransform(translateX, undefined, undefined, undefined);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Transformable.prototype, "translateY", {
            get: function () {
                return this._translateY;
            },
            set: function (translateY) {
                this.setContentTransform(undefined, translateY, undefined, undefined);
            },
            enumerable: true,
            configurable: true
        });
        Transformable.prototype.buildMatrix = function (translateX, translateY, scale, angle) {
            if (translateX === undefined)
                translateX = this._translateX;
            if (translateY === undefined)
                translateY = this._translateY;
            if (scale === undefined)
                scale = this._scale;
            if (angle === undefined)
                angle = this._angle;
            return Ui.Matrix.createTranslate(this.layoutWidth * this.transformOriginX, this.layoutHeight * this.transformOriginX).
                translate(translateX, translateY).
                scale(scale, scale).
                rotate(angle).
                translate(-this.layoutWidth * this.transformOriginX, -this.layoutHeight * this.transformOriginX);
        };
        Object.defineProperty(Transformable.prototype, "matrix", {
            get: function () {
                return Ui.Matrix.createTranslate(this.layoutWidth * this.transformOriginX, this.layoutHeight * this.transformOriginX).
                    translate(this._translateX, this._translateY).
                    scale(this._scale, this._scale).
                    rotate(this._angle).
                    translate(-this.layoutWidth * this.transformOriginX, -this.layoutHeight * this.transformOriginX);
            },
            enumerable: true,
            configurable: true
        });
        Transformable.prototype.getBoundaryBox = function (matrix) {
            if (matrix === undefined)
                matrix = this.matrix;
            var p1 = (new Ui.Point(0, 0)).multiply(matrix);
            var p2 = (new Ui.Point(this.layoutWidth, 0)).multiply(matrix);
            var p3 = (new Ui.Point(this.layoutWidth, this.layoutHeight)).multiply(matrix);
            var p4 = (new Ui.Point(0, this.layoutHeight)).multiply(matrix);
            var minX = Math.min(p1.x, Math.min(p2.x, Math.min(p3.x, p4.x)));
            var minY = Math.min(p1.y, Math.min(p2.y, Math.min(p3.y, p4.y)));
            var maxX = Math.max(p1.x, Math.max(p2.x, Math.max(p3.x, p4.x)));
            var maxY = Math.max(p1.y, Math.max(p2.y, Math.max(p3.y, p4.y)));
            return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
        };
        Transformable.prototype.setContentTransform = function (translateX, translateY, scale, angle) {
            if (translateX === undefined)
                translateX = this._translateX;
            if (translateY === undefined)
                translateY = this._translateY;
            if (scale === undefined)
                scale = this._scale;
            if (angle === undefined)
                angle = this._angle;
            this._translateX = translateX;
            this._translateY = translateY;
            this._scale = scale;
            this._angle = angle;
            if (!this.transformLock) {
                this.transformLock = true;
                this.transformed.fire({ target: this });
                var testOnly = !(((this.watcher1 === undefined) || this.watcher1.getIsCaptured()) &&
                    ((this.watcher2 === undefined) || this.watcher2.getIsCaptured()));
                this.onContentTransform(testOnly);
                this.transformLock = false;
            }
        };
        Object.defineProperty(Transformable.prototype, "inertia", {
            get: function () {
                return this._inertia;
            },
            set: function (inertiaActive) {
                this._inertia = inertiaActive;
            },
            enumerable: true,
            configurable: true
        });
        Transformable.prototype.onContentTransform = function (testOnly) {
            if (testOnly === void 0) { testOnly = false; }
            if (testOnly !== true)
                this.contentBox.transform = this.matrix;
        };
        Transformable.prototype.onDown = function () {
            this._isDown = true;
            this.downed.fire({ target: this });
        };
        Transformable.prototype.onUp = function () {
            this._isDown = false;
            this.upped.fire({ target: this });
        };
        Transformable.prototype.onPointerDown = function (event) {
            var _this = this;
            if (!this._allowLeftMouse && event.pointerType == 'mouse' && event.pointer.button == 0)
                return;
            this.stopInertia();
            if (this.watcher1 === undefined) {
                if (this._allowTranslate)
                    this.onDown();
                var watcher = event.pointer.watch(this);
                this.watcher1 = watcher;
                watcher.moved.connect(function (e) { return _this.onPointerMove(e.target); });
                watcher.upped.connect(function (e) { return _this.onPointerUp(e.target); });
                watcher.cancelled.connect(function (e) { return _this.onPointerCancel(e.target); });
                this.startAngle = this._angle;
                this.startScale = this._scale;
                this.startTranslateX = this._translateX;
                this.startTranslateY = this._translateY;
            }
            else if (this.watcher2 === undefined) {
                if (!this._allowTranslate)
                    this.onDown();
                this.watcher1.pointer.setInitialPosition(this.watcher1.pointer.getX(), this.watcher1.pointer.getY());
                var watcher = event.pointer.watch(this);
                this.watcher2 = watcher;
                watcher.moved.connect(function (e) { return _this.onPointerMove(e.target); });
                watcher.upped.connect(function (e) { return _this.onPointerUp(e.target); });
                watcher.cancelled.connect(function (e) { return _this.onPointerUp(e.target); });
                this.startAngle = this._angle;
                this.startScale = this._scale;
                this.startTranslateX = this._translateX;
                this.startTranslateY = this._translateY;
            }
        };
        Transformable.prototype.onPointerMove = function (watcher) {
            var pos1;
            var pos2;
            var start1;
            var start2;
            if ((this.watcher1 !== undefined) && (this.watcher2 !== undefined)) {
                if (!this.watcher1.getIsCaptured() && this.watcher1.pointer.getIsMove())
                    this.watcher1.capture();
                if (!this.watcher2.getIsCaptured() && this.watcher2.pointer.getIsMove())
                    this.watcher2.capture();
                pos1 = this.pointFromWindow(new Ui.Point(this.watcher1.pointer.getX(), this.watcher1.pointer.getY()));
                pos2 = this.pointFromWindow(new Ui.Point(this.watcher2.pointer.getX(), this.watcher2.pointer.getY()));
                start1 = this.pointFromWindow(new Ui.Point(this.watcher1.pointer.getInitialX(), this.watcher1.pointer.getInitialY()));
                start2 = this.pointFromWindow(new Ui.Point(this.watcher2.pointer.getInitialX(), this.watcher2.pointer.getInitialY()));
                var startVector = { x: start2.x - start1.x, y: start2.y - start1.y };
                var endVector = { x: pos2.x - pos1.x, y: pos2.y - pos1.y };
                startVector.norm = Math.sqrt((startVector.x * startVector.x) + (startVector.y * startVector.y));
                endVector.norm = Math.sqrt((endVector.x * endVector.x) + (endVector.y * endVector.y));
                var scale = endVector.norm / startVector.norm;
                startVector.x /= startVector.norm;
                startVector.y /= startVector.norm;
                endVector.x /= endVector.norm;
                endVector.y /= endVector.norm;
                var divVector = {
                    x: (startVector.x * endVector.x + startVector.y * endVector.y),
                    y: (startVector.y * endVector.x - startVector.x * endVector.y)
                };
                var angle = -(Math.atan2(divVector.y, divVector.x) * 180.0) / Math.PI;
                var deltaMatrix = Ui.Matrix.createTranslate(pos1.x - start1.x, pos1.y - start1.y).translate(start1.x, start1.y);
                if (this._allowScale) {
                    if ((this._minScale !== undefined) || (this._maxScale !== undefined)) {
                        var totalScale = this.startScale * scale;
                        if ((this._minScale !== undefined) && (totalScale < this._minScale))
                            totalScale = this._minScale;
                        if ((this._maxScale !== undefined) && (totalScale > this._maxScale))
                            totalScale = this._maxScale;
                        scale = totalScale / this.startScale;
                    }
                    deltaMatrix = deltaMatrix.scale(scale, scale);
                }
                else
                    scale = 1;
                if (this._allowRotate)
                    deltaMatrix = deltaMatrix.rotate(angle);
                else
                    angle = 0;
                deltaMatrix = deltaMatrix.translate(-start1.x, -start1.y);
                var origin_4 = new Ui.Point(this.layoutWidth * this.transformOriginX, this.layoutHeight * this.transformOriginX);
                deltaMatrix = deltaMatrix.translate(origin_4.x, origin_4.y).
                    translate(this.startTranslateX, this.startTranslateY).
                    scale(this.startScale, this.startScale).
                    rotate(this.startAngle).
                    translate(-origin_4.x, -origin_4.y);
                origin_4 = origin_4.multiply(deltaMatrix);
                this.setContentTransform(origin_4.x - this.layoutWidth * this.transformOriginX, origin_4.y - this.layoutHeight * this.transformOriginY, this.startScale * scale, this.startAngle + angle);
            }
            else if ((this.watcher1 !== undefined) && this._allowTranslate) {
                pos1 = this.pointFromWindow(new Ui.Point(this.watcher1.pointer.getX(), this.watcher1.pointer.getY()));
                start1 = this.pointFromWindow(new Ui.Point(this.watcher1.pointer.getInitialX(), this.watcher1.pointer.getInitialY()));
                var deltaX = pos1.x - start1.x;
                var deltaY = pos1.y - start1.y;
                var delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                this.setContentTransform(this.startTranslateX + (pos1.x - start1.x), this.startTranslateY + (pos1.y - start1.y), this.startScale, this.startAngle);
                var takenDeltaX = (this._translateX - this.startTranslateX);
                var takenDeltaY = (this._translateY - this.startTranslateY);
                var takenDelta = Math.sqrt(takenDeltaX * takenDeltaX + takenDeltaY * takenDeltaY);
                var test = 0;
                if (delta > 0)
                    test = (takenDelta / delta);
                if (!this.watcher1.getIsCaptured() && this.watcher1.pointer.getIsMove() && (test > 0.7))
                    this.watcher1.capture();
            }
        };
        Transformable.prototype.onPointerCancel = function (watcher) {
            this.onPointerUp(watcher);
            this.stopInertia();
            this._angle = this.startAngle;
            this._scale = this.startScale;
            this._translateX = this.startTranslateX;
            this._translateY = this.startTranslateY;
        };
        Transformable.prototype.onPointerUp = function (watcher) {
            if ((this.watcher1 !== undefined) && (this.watcher1 === watcher)) {
                if (this.watcher2 !== undefined) {
                    this.watcher1.unwatch();
                    this.watcher1 = this.watcher2;
                    delete (this.watcher2);
                    this.watcher1.pointer.setInitialPosition(this.watcher1.pointer.getX(), this.watcher1.pointer.getY());
                    this.startAngle = this._angle;
                    this.startScale = this._scale;
                    this.startTranslateX = this._translateX;
                    this.startTranslateY = this._translateY;
                    if (!this._allowTranslate)
                        this.onUp();
                }
                else {
                    if (this._allowTranslate)
                        this.onUp();
                    var speed = this.watcher1.getSpeed();
                    this.speedX = speed.x;
                    this.speedY = speed.y;
                    this.watcher1.unwatch();
                    delete (this.watcher1);
                    this.startInertia();
                }
            }
            if ((this.watcher2 !== undefined) && (this.watcher2 === watcher)) {
                this.watcher2.unwatch();
                delete (this.watcher2);
                this.watcher1.pointer.setInitialPosition(this.watcher1.pointer.getX(), this.watcher1.pointer.getY());
                this.startAngle = this._angle;
                this.startScale = this._scale;
                this.startTranslateX = this._translateX;
                this.startTranslateY = this._translateY;
                if (!this._allowTranslate)
                    this.onUp();
            }
        };
        Transformable.prototype.onWheel = function (event) {
            var delta = 0;
            delta = event.deltaX + event.deltaY;
            if (event.altKey) {
                if (this._allowRotate) {
                    var angle = delta / 5;
                    var pos = this.pointFromWindow(new Ui.Point(event.clientX, event.clientY));
                    var origin_5 = new Ui.Point(this.layoutWidth * this.transformOriginX, this.layoutHeight * this.transformOriginX);
                    var deltaMatrix = Ui.Matrix.createTranslate(pos.x, pos.y).
                        rotate(angle).
                        translate(-pos.x, -pos.y).
                        translate(origin_5.x, origin_5.y).
                        translate(this._translateX, this._translateY).
                        scale(this._scale, this._scale).
                        rotate(this._angle).
                        translate(-origin_5.x, -origin_5.y);
                    origin_5 = origin_5.multiply(deltaMatrix);
                    this.setContentTransform(origin_5.x - this.layoutWidth * this.transformOriginX, origin_5.y - this.layoutHeight * this.transformOriginY, this._scale, this._angle + angle);
                }
            }
            else if (event.ctrlKey) {
                if (this._allowScale) {
                    var scale = Math.pow(2, (Math.log(this._scale) / Math.log(2)) - delta / 60);
                    if ((this._minScale !== undefined) && (scale < this._minScale))
                        scale = this._minScale;
                    if ((this._maxScale !== undefined) && (scale > this._maxScale))
                        scale = this._maxScale;
                    var deltaScale = scale / this._scale;
                    var pos = this.pointFromWindow(new Ui.Point(event.clientX, event.clientY));
                    var origin_6 = new Ui.Point(this.layoutWidth * this.transformOriginX, this.layoutHeight * this.transformOriginX);
                    var deltaMatrix = Ui.Matrix.createTranslate(pos.x, pos.y).
                        scale(deltaScale, deltaScale).
                        translate(-pos.x, -pos.y).
                        translate(origin_6.x, origin_6.y).
                        translate(this._translateX, this._translateY).
                        scale(this._scale, this._scale).
                        rotate(this._angle).
                        translate(-origin_6.x, -origin_6.y);
                    origin_6 = origin_6.multiply(deltaMatrix);
                    this.setContentTransform(origin_6.x - this.layoutWidth * this.transformOriginX, origin_6.y - this.layoutHeight * this.transformOriginY, scale, this._angle);
                }
            }
            else
                return;
            event.stopPropagation();
        };
        Transformable.prototype.startInertia = function () {
            var _this = this;
            if ((this.inertiaClock === undefined) && this.inertia) {
                this.inertiaClock = new Anim.Clock({ duration: 'forever', target: this });
                this.inertiaClock.timeupdate.connect(function (e) { return _this.onTimeupdate(e.target, e.progress, e.deltaTick); });
                this.inertiaClock.begin();
                this.inertiastarted.fire({ target: this });
            }
        };
        Transformable.prototype.onTimeupdate = function (clock, progress, delta) {
            if (delta === 0)
                return;
            var oldTranslateX = this._translateX;
            var oldTranslateY = this._translateY;
            var translateX = this._translateX + (this.speedX * delta);
            var translateY = this._translateY + (this.speedY * delta);
            this.setContentTransform(translateX, translateY, undefined, undefined);
            if ((this._translateX === oldTranslateX) && (this._translateY === oldTranslateY)) {
                this.stopInertia();
                return;
            }
            this.speedX -= this.speedX * delta * 3;
            this.speedY -= this.speedY * delta * 3;
            if (Math.abs(this.speedX) < 0.1)
                this.speedX = 0;
            if (Math.abs(this.speedY) < 0.1)
                this.speedY = 0;
            if ((this.speedX === 0) && (this.speedY === 0))
                this.stopInertia();
        };
        Transformable.prototype.stopInertia = function () {
            if (this.inertiaClock !== undefined) {
                this.inertiaClock.stop();
                delete (this.inertiaClock);
                this.setContentTransform(Math.round(this._translateX), Math.round(this._translateY), undefined, undefined);
                this.inertiaended.fire({ target: this });
            }
        };
        Object.defineProperty(Transformable.prototype, "content", {
            get: function () {
                return this.contentBox.firstChild;
            },
            set: function (content) {
                this.contentBox.content = content;
            },
            enumerable: true,
            configurable: true
        });
        Transformable.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, width, height);
            this.onContentTransform();
        };
        return Transformable;
    }(Ui.LBox));
    Ui.Transformable = Transformable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Scrollable = (function (_super) {
        __extends(Scrollable, _super);
        function Scrollable(init) {
            var _this = _super.call(this, init) || this;
            _this.contentBox = undefined;
            _this._scrollHorizontal = true;
            _this._scrollVertical = true;
            _this.showShadows = false;
            _this.lock = false;
            _this.isOver = false;
            _this.showClock = undefined;
            _this.offsetX = 0;
            _this.offsetY = 0;
            _this.relativeOffsetX = 0;
            _this.relativeOffsetY = 0;
            _this.viewWidth = 0;
            _this.viewHeight = 0;
            _this.contentWidth = 0;
            _this.contentHeight = 0;
            _this.scrollLock = false;
            _this.scrollbarVerticalNeeded = false;
            _this.scrollbarHorizontalNeeded = false;
            _this.scrollbarVerticalHeight = 0;
            _this.scrollbarHorizontalWidth = 0;
            _this.scrolled = new Core.Events();
            _this.autoShowScrollbars = function () {
                if (_this.showClock === undefined) {
                    _this.showClock = new Anim.Clock({ duration: 'forever' });
                    _this.showClock.timeupdate.connect(function (e) { return _this.onShowBarsTick(e.target, e.progress, e.deltaTick); });
                    _this.showClock.begin();
                }
            };
            _this.autoHideScrollbars = function () {
                if (_this.contentBox.isDown || _this.contentBox.isInertia || _this.isOver)
                    return;
                if (_this.showClock === undefined) {
                    _this.showClock = new Anim.Clock({ duration: 'forever' });
                    _this.showClock.timeupdate.connect(function (e) { return _this.onShowBarsTick(e.target, e.progress, e.deltaTick); });
                    _this.showClock.begin();
                }
            };
            _this.onScrollbarHorizontalMove = function () {
                if (_this.scrollLock)
                    return;
                var totalWidth = _this.viewWidth - _this.scrollbarHorizontalBox.layoutWidth;
                var offsetX = Math.min(1, Math.max(0, _this.scrollbarHorizontalBox.positionX / totalWidth));
                _this.setOffset(offsetX, undefined, false, true);
                _this.scrollbarHorizontalBox.setPosition(offsetX * totalWidth, undefined);
            };
            _this.onScrollbarVerticalMove = function () {
                if (_this.scrollLock)
                    return;
                var totalHeight = _this.viewHeight - _this.scrollbarVerticalBox.layoutHeight;
                var offsetY = Math.min(1, Math.max(0, _this.scrollbarVerticalBox.positionY / totalHeight));
                _this.setOffset(undefined, offsetY, false, true);
                _this.scrollbarVerticalBox.setPosition(undefined, offsetY * totalHeight);
            };
            _this.contentBox = new Ui.ScrollableContent();
            _this.contentBox.scrolled.connect(function () { return _this.onScroll(); });
            _this.contentBox.downed.connect(_this.autoShowScrollbars);
            _this.contentBox.inertiaended.connect(_this.autoHideScrollbars);
            _this.appendChild(_this.contentBox);
            new Ui.OverWatcher({
                element: _this,
                onentered: function () {
                    _this.isOver = true;
                    _this.autoShowScrollbars();
                },
                onleaved: function () {
                    _this.isOver = false;
                    _this.autoHideScrollbars();
                }
            });
            _this.wheelchanged.connect(function (e) { return _this.onWheel(e); });
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            _this.setScrollbarHorizontal(new Ui.Movable());
            _this.setScrollbarVertical(new Ui.Movable());
            if (init) {
                if (init.maxScale !== undefined)
                    _this.maxScale = init.maxScale;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.inertia !== undefined)
                    _this.inertia = init.inertia;
                if (init.scrollHorizontal !== undefined)
                    _this.scrollHorizontal = init.scrollHorizontal;
                if (init.scrollVertical !== undefined)
                    _this.scrollVertical = init.scrollVertical;
                if (init.scale !== undefined)
                    _this.scale = init.scale;
                if (init.onscrolled)
                    _this.scrolled.connect(init.onscrolled);
            }
            return _this;
        }
        Object.defineProperty(Scrollable.prototype, "onscrolled", {
            set: function (value) { this.scrolled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scrollable.prototype, "maxScale", {
            set: function (maxScale) {
                this.contentBox.maxScale = maxScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scrollable.prototype, "content", {
            get: function () {
                return this.contentBox.content;
            },
            set: function (content) {
                this.setContent(content);
            },
            enumerable: true,
            configurable: true
        });
        Scrollable.prototype.setContent = function (content) {
            this.contentBox.content = content;
        };
        Object.defineProperty(Scrollable.prototype, "inertia", {
            get: function () {
                return this.contentBox.inertia;
            },
            set: function (inertiaActive) {
                this.contentBox.inertia = inertiaActive;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scrollable.prototype, "scrollHorizontal", {
            get: function () {
                return this._scrollHorizontal;
            },
            set: function (scroll) {
                if (scroll !== this._scrollHorizontal) {
                    this._scrollHorizontal = scroll;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scrollable.prototype, "scrollVertical", {
            get: function () {
                return this._scrollVertical;
            },
            set: function (scroll) {
                if (scroll !== this._scrollVertical) {
                    this._scrollVertical = scroll;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Scrollable.prototype.setScrollbarVertical = function (scrollbarVertical) {
            if (this.scrollbarVerticalBox) {
                this.scrollbarVerticalBox.downed.disconnect(this.autoShowScrollbars);
                this.scrollbarVerticalBox.upped.disconnect(this.autoHideScrollbars);
                this.scrollbarVerticalBox.moved.disconnect(this.onScrollbarVerticalMove);
                this.removeChild(this.scrollbarVerticalBox);
            }
            if (scrollbarVertical) {
                this.scrollbarVerticalBox = scrollbarVertical;
                this.scrollbarVerticalBox.opacity = 0;
                this.scrollbarVerticalBox.moveHorizontal = false;
                this.scrollbarVerticalBox.downed.connect(this.autoShowScrollbars);
                this.scrollbarVerticalBox.upped.connect(this.autoHideScrollbars);
                this.scrollbarVerticalBox.moved.connect(this.onScrollbarVerticalMove);
                this.appendChild(this.scrollbarVerticalBox);
            }
        };
        Scrollable.prototype.setScrollbarHorizontal = function (scrollbarHorizontal) {
            if (this.scrollbarHorizontalBox) {
                this.scrollbarHorizontalBox.downed.disconnect(this.autoShowScrollbars);
                this.scrollbarHorizontalBox.upped.disconnect(this.autoHideScrollbars);
                this.scrollbarHorizontalBox.moved.disconnect(this.onScrollbarHorizontalMove);
                this.removeChild(this.scrollbarHorizontalBox);
            }
            if (scrollbarHorizontal) {
                this.scrollbarHorizontalBox = scrollbarHorizontal;
                this.scrollbarHorizontalBox.opacity = 0;
                this.scrollbarHorizontalBox.moveVertical = false;
                this.scrollbarHorizontalBox.downed.connect(this.autoShowScrollbars);
                this.scrollbarHorizontalBox.upped.connect(this.autoHideScrollbars);
                this.scrollbarHorizontalBox.moved.connect(this.onScrollbarHorizontalMove);
                this.appendChild(this.scrollbarHorizontalBox);
            }
        };
        Scrollable.prototype.setOffset = function (offsetX, offsetY, absolute, align) {
            if (absolute === void 0) { absolute = false; }
            if (align === void 0) { align = false; }
            if (absolute === undefined)
                absolute = false;
            if (offsetX === undefined)
                offsetX = this.offsetX;
            else if (!absolute)
                offsetX *= this.contentWidth - this.viewWidth;
            if (offsetY === undefined)
                offsetY = this.offsetY;
            else if (!absolute)
                offsetY *= this.contentHeight - this.viewHeight;
            if (offsetX < 0)
                offsetX = 0;
            else if (this.viewWidth + offsetX > this.contentWidth)
                offsetX = this.contentWidth - this.viewWidth;
            if (offsetY < 0)
                offsetY = 0;
            else if (this.viewHeight + offsetY > this.contentHeight)
                offsetY = this.contentHeight - this.viewHeight;
            if (this.contentWidth <= this.viewWidth)
                this.relativeOffsetX = 0;
            else
                this.relativeOffsetX = offsetX / (this.contentWidth - this.viewWidth);
            if (this.contentHeight <= this.viewHeight)
                this.relativeOffsetY = 0;
            else
                this.relativeOffsetY = offsetY / (this.contentHeight - this.viewHeight);
            if (align) {
                offsetX = Math.round(offsetX);
                offsetY = Math.round(offsetY);
            }
            if ((this.offsetX !== offsetX) || (this.offsetY !== offsetY)) {
                this.offsetX = offsetX;
                this.offsetY = offsetY;
                this.contentBox.setOffset(offsetX, offsetY);
                return true;
            }
            else
                return false;
        };
        Scrollable.prototype.getOffsetX = function () {
            return this.contentBox.offsetX;
        };
        Scrollable.prototype.getRelativeOffsetX = function () {
            return this.relativeOffsetX;
        };
        Scrollable.prototype.getOffsetY = function () {
            return this.contentBox.offsetY;
        };
        Scrollable.prototype.getRelativeOffsetY = function () {
            return this.relativeOffsetY;
        };
        Object.defineProperty(Scrollable.prototype, "scale", {
            get: function () {
                return this.contentBox.scale;
            },
            set: function (scale) {
                this.contentBox.scale = scale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scrollable.prototype, "isDown", {
            get: function () {
                return this.contentBox.isDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scrollable.prototype, "isInertia", {
            get: function () {
                return this.contentBox.isInertia;
            },
            enumerable: true,
            configurable: true
        });
        Scrollable.prototype.onWheel = function (event) {
            var deltaX = event.deltaX;
            var deltaY = event.deltaY;
            if (event.shiftKey) {
                deltaX = event.deltaY;
                deltaY = event.deltaX;
            }
            if (this.setOffset(this.contentBox.offsetX + deltaX * 3, this.contentBox.offsetY + deltaY * 3, true)) {
                event.stopPropagation();
            }
        };
        Scrollable.prototype.onKeyDown = function (event) {
            if (this.isDisabled)
                return;
            var key = event.which;
            if (key == 34 && this.setOffset(undefined, this.contentBox.offsetY + this.layoutHeight, true)) {
                event.stopPropagation();
                event.preventDefault();
            }
            else if (key == 33 && this.setOffset(undefined, this.contentBox.offsetY - this.layoutHeight, true)) {
                event.stopPropagation();
                event.preventDefault();
            }
        };
        Scrollable.prototype.onShowBarsTick = function (clock, progress, delta) {
            var show = this.contentBox.isDown || this.contentBox.isInertia || this.isOver;
            if (this.scrollbarVerticalBox)
                show = show || this.scrollbarVerticalBox.isDown;
            if (this.scrollbarHorizontalBox)
                show = show || this.scrollbarHorizontalBox.isDown;
            var stop = false;
            var speed = 2;
            var opacity = this.scrollbarHorizontalBox.opacity;
            if (show) {
                opacity += (delta * speed);
                if (opacity >= 1) {
                    opacity = 1;
                    stop = true;
                }
            }
            else {
                opacity -= (delta * speed);
                if (opacity <= 0) {
                    opacity = 0;
                    stop = true;
                }
            }
            if (this.scrollbarHorizontalBox)
                this.scrollbarHorizontalBox.opacity = opacity;
            if (this.scrollbarVerticalBox)
                this.scrollbarVerticalBox.opacity = opacity;
            if (stop) {
                this.showClock.stop();
                this.showClock = undefined;
            }
        };
        Scrollable.prototype.onScroll = function () {
            this.updateOffset();
            this.scrolled.fire({ target: this, offsetX: this.offsetX, offsetY: this.offsetY });
        };
        Scrollable.prototype.updateOffset = function () {
            if (this.contentBox === undefined)
                return;
            this.offsetX = this.contentBox.offsetX;
            this.offsetY = this.contentBox.offsetY;
            this.viewWidth = this.layoutWidth;
            this.viewHeight = this.layoutHeight;
            this.contentWidth = this.contentBox.contentWidth;
            this.contentHeight = this.contentBox.contentHeight;
            if (this.contentWidth <= this.viewWidth)
                this.relativeOffsetX = 0;
            else
                this.relativeOffsetX = this.offsetX / (this.contentWidth - this.viewWidth);
            if (this.contentHeight <= this.viewHeight)
                this.relativeOffsetY = 0;
            else
                this.relativeOffsetY = this.offsetY / (this.contentHeight - this.viewHeight);
            if (this.contentHeight > this.viewHeight)
                this.scrollbarVerticalNeeded = true;
            else
                this.scrollbarVerticalNeeded = false;
            if (this.contentWidth > this.viewWidth)
                this.scrollbarHorizontalNeeded = true;
            else
                this.scrollbarHorizontalNeeded = false;
            if (this.scrollbarVerticalNeeded) {
                if (this.scrollbarVerticalBox) {
                    this.scrollbarVerticalHeight = Math.max((this.viewHeight / this.contentHeight) * this.viewHeight, this.scrollbarVerticalBox.measureHeight);
                    this.scrollbarVerticalBox.arrange(this.layoutWidth - this.scrollbarVerticalBox.measureWidth, 0, this.scrollbarVerticalBox.measureWidth, this.scrollbarVerticalHeight);
                    this.scrollbarVerticalBox.show();
                }
            }
            else {
                if (this.scrollbarVerticalBox)
                    this.scrollbarVerticalBox.hide();
                this.offsetY = 0;
            }
            if (this.scrollbarHorizontalNeeded) {
                if (this.scrollbarHorizontalBox) {
                    this.scrollbarHorizontalWidth = Math.max((this.viewWidth / this.contentWidth) * this.viewWidth, this.scrollbarHorizontalBox.measureWidth);
                    this.scrollbarHorizontalBox.arrange(0, this.layoutHeight - this.scrollbarHorizontalBox.measureHeight, this.scrollbarHorizontalWidth, this.scrollbarHorizontalBox.measureHeight);
                    this.scrollbarHorizontalBox.show();
                }
            }
            else {
                if (this.scrollbarHorizontalBox)
                    this.scrollbarHorizontalBox.hide();
                this.offsetX = 0;
            }
            this.scrollLock = true;
            if (this.scrollbarHorizontalNeeded) {
                var relOffsetX = this.offsetX / (this.contentWidth - this.viewWidth);
                if (relOffsetX > 1) {
                    relOffsetX = 1;
                    this.setOffset(relOffsetX, undefined);
                }
                if (this.scrollbarHorizontalBox)
                    this.scrollbarHorizontalBox.setPosition((this.viewWidth - this.scrollbarHorizontalWidth) * relOffsetX, undefined);
            }
            if (this.scrollbarVerticalNeeded) {
                var relOffsetY = this.offsetY / (this.contentHeight - this.viewHeight);
                if (relOffsetY > 1) {
                    relOffsetY = 1;
                    this.setOffset(undefined, relOffsetY);
                }
                if (this.scrollbarVerticalBox)
                    this.scrollbarVerticalBox.setPosition(undefined, (this.viewHeight - this.scrollbarVerticalHeight) * relOffsetY);
            }
            this.scrollLock = false;
        };
        Scrollable.prototype.onScrollIntoView = function (el) {
            var matrix = Ui.Matrix.createTranslate(this.offsetX, this.offsetY).multiply(el.transformToElement(this));
            var p0 = (new Ui.Point(0, 0)).multiply(matrix);
            var p1 = (new Ui.Point(el.layoutWidth, el.layoutHeight)).multiply(matrix);
            if ((p0.y < this.offsetY) || (p0.y > this.offsetY + this.viewHeight) ||
                (p1.y > this.offsetY + this.viewHeight)) {
                if (Math.abs(this.offsetY + this.viewHeight - p1.y) < Math.abs(this.offsetY - p0.y))
                    this.setOffset(this.offsetX, p1.y - this.viewHeight, true);
                else
                    this.setOffset(this.offsetX, p0.y, true);
                this.contentBox.stopInertia();
            }
            if ((p0.x < this.offsetX) || (p0.x > this.offsetX + this.viewWidth) ||
                (p1.x > this.offsetX + this.viewWidth)) {
                if (Math.abs(this.offsetX + this.viewWidth - p1.x) < Math.abs(this.offsetX - p0.x))
                    this.setOffset(p1.x - this.viewWidth, this.offsetY, true);
                else
                    this.setOffset(p0.x, this.offsetY, true);
                this.contentBox.stopInertia();
            }
            _super.prototype.onScrollIntoView.call(this, el);
        };
        Scrollable.prototype.measureCore = function (width, height) {
            var size = { width: 0, height: 0 };
            if (this.scrollbarHorizontalBox)
                this.scrollbarHorizontalBox.measure(width, height);
            if (this.scrollbarVerticalBox)
                this.scrollbarVerticalBox.measure(width, height);
            var contentSize = this.contentBox.measure(width, height);
            if (contentSize.width < width)
                size.width = contentSize.width;
            else
                size.width = width;
            if (contentSize.height < height)
                size.height = contentSize.height;
            else
                size.height = height;
            if (!this.scrollVertical)
                size.height = contentSize.height;
            if (!this.scrollHorizontal)
                size.width = contentSize.width;
            return size;
        };
        Scrollable.prototype.arrangeCore = function (width, height) {
            this.viewWidth = width;
            this.viewHeight = height;
            this.contentBox.arrange(0, 0, this.viewWidth, this.viewHeight);
            this.contentWidth = this.contentBox.contentWidth;
            this.contentHeight = this.contentBox.contentHeight;
            this.updateOffset();
        };
        return Scrollable;
    }(Ui.Container));
    Ui.Scrollable = Scrollable;
    var ScrollableContent = (function (_super) {
        __extends(ScrollableContent, _super);
        function ScrollableContent() {
            var _this = _super.call(this) || this;
            _this._contentWidth = 0;
            _this._contentHeight = 0;
            _this.scrolled = new Core.Events();
            _this.allowLeftMouse = false;
            _this.clipToBounds = true;
            _this.focusable = false;
            _this.drawing.addEventListener('scroll', function () {
                _this.translateX -= _this.drawing.scrollLeft;
                _this.translateY -= _this.drawing.scrollTop;
                _this.drawing.scrollLeft = 0;
                _this.drawing.scrollTop = 0;
                _this.onContentTransform();
            });
            _this.allowTranslate = true;
            _this.allowRotate = false;
            _this.minScale = 1;
            _this.maxScale = 1;
            _this.setTransformOrigin(0, 0);
            _this.inertia = true;
            return _this;
        }
        Object.defineProperty(ScrollableContent.prototype, "onscrolled", {
            set: function (value) { this.scrolled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollableContent.prototype, "offsetX", {
            get: function () {
                return -this.translateX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollableContent.prototype, "offsetY", {
            get: function () {
                return -this.translateY;
            },
            enumerable: true,
            configurable: true
        });
        ScrollableContent.prototype.setOffset = function (x, y) {
            this.setContentTransform(-x, -y, undefined, undefined);
        };
        Object.defineProperty(ScrollableContent.prototype, "contentWidth", {
            get: function () {
                return this._contentWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScrollableContent.prototype, "contentHeight", {
            get: function () {
                return this._contentHeight;
            },
            enumerable: true,
            configurable: true
        });
        ScrollableContent.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, Math.max(width, this.measureWidth), Math.max(height, this.measureHeight));
            this.onContentTransform();
        };
        ScrollableContent.prototype.onContentTransform = function (testOnly) {
            if (testOnly === void 0) { testOnly = false; }
            var scale = this.scale;
            if (this.translateX > 0)
                this.translateX = 0;
            if (this.translateY > 0)
                this.translateY = 0;
            var viewWidth = this.layoutWidth;
            var viewHeight = this.layoutHeight;
            this._contentWidth = this.firstChild.layoutWidth * scale;
            this._contentHeight = this.firstChild.layoutHeight * scale;
            this.translateX = Math.max(this.translateX, -(this._contentWidth - viewWidth));
            this.translateY = Math.max(this.translateY, -(this._contentHeight - viewHeight));
            _super.prototype.onContentTransform.call(this, testOnly);
            this._contentWidth = this.firstChild.layoutWidth * scale;
            this._contentHeight = this.firstChild.layoutHeight * scale;
            if (testOnly !== true)
                this.scrolled.fire({ target: this, offsetX: this.offsetX, offsetY: this.offsetY });
        };
        return ScrollableContent;
    }(Ui.Transformable));
    Ui.ScrollableContent = ScrollableContent;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var NativeScrollableContent = (function (_super) {
        __extends(NativeScrollableContent, _super);
        function NativeScrollableContent() {
            var _this = _super.call(this) || this;
            _this.scrolled = new Core.Events();
            _this.focusable = false;
            _this.containerDrawing = _this.scrollDiv;
            return _this;
        }
        Object.defineProperty(NativeScrollableContent.prototype, "onscrolled", {
            set: function (value) { this.scrolled.connect(value); },
            enumerable: true,
            configurable: true
        });
        NativeScrollableContent.prototype.renderDrawing = function () {
            var _this = this;
            var drawing = _super.prototype.renderDrawing.call(this);
            drawing.style.overflow = 'hidden';
            this.scrollDiv = document.createElement('div');
            this.scrollDiv.style.position = 'absolute';
            this.scrollDiv.style.top = '0px';
            this.scrollDiv.style.left = '0px';
            this.scrollDiv.style.right = "-" + NativeScrollableContent.nativeScrollBarWidth + "px";
            this.scrollDiv.style.bottom = "-" + NativeScrollableContent.nativeScrollBarHeight + "px";
            this.scrollDiv.style.overflow = 'scroll';
            this.scrollDiv.style.setProperty('will-change', 'transform');
            this.scrollDiv.style.setProperty('transform', 'translateZ(0)');
            this.scrollDiv.style.setProperty('-webkit-overflow-scrolling', 'touch');
            this.scrollDiv.onscroll = function () { return _this.onScroll(); };
            drawing.appendChild(this.scrollDiv);
            return drawing;
        };
        Object.defineProperty(NativeScrollableContent.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (value) {
                if (value !== this._content) {
                    if (this._content !== undefined)
                        this.removeChild(this._content);
                    this._content = value;
                    if (this._content)
                        this.appendChild(this._content);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NativeScrollableContent.prototype, "offsetX", {
            get: function () {
                return this.scrollDiv.scrollLeft;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NativeScrollableContent.prototype, "offsetY", {
            get: function () {
                return this.scrollDiv.scrollTop;
            },
            enumerable: true,
            configurable: true
        });
        NativeScrollableContent.prototype.stopInertia = function () {
        };
        NativeScrollableContent.prototype.setOffset = function (x, y) {
            this.scrollDiv.scrollLeft = x;
            this.scrollDiv.scrollTop = y;
        };
        Object.defineProperty(NativeScrollableContent.prototype, "contentWidth", {
            get: function () {
                return this._content ? this._content.layoutWidth + this._content.marginLeft + this._content.marginRight : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NativeScrollableContent.prototype, "contentHeight", {
            get: function () {
                return this._content ? this._content.layoutHeight + this._content.marginTop + this._content.marginBottom : 0;
            },
            enumerable: true,
            configurable: true
        });
        NativeScrollableContent.prototype.measureCore = function (width, height) {
            var size = { width: 0, height: 0 };
            if (this._content)
                size = this._content.measure(width, height);
            return size;
        };
        NativeScrollableContent.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, Math.max(width, this.measureWidth), Math.max(height, this.measureHeight));
            if (this._content)
                this._content.arrange(0, 0, Math.max(width, this._content.measureWidth), Math.max(height, this._content.measureHeight));
        };
        NativeScrollableContent.prototype.onScroll = function () {
            this.scrolled.fire({ target: this, offsetX: this.offsetX, offsetY: this.offsetY });
        };
        NativeScrollableContent.prototype.getInverseLayoutTransform = function () {
            return Ui.Matrix.createTranslate(-this.scrollDiv.scrollLeft, -this.scrollDiv.scrollTop).multiply(_super.prototype.getInverseLayoutTransform.call(this));
        };
        NativeScrollableContent.prototype.getLayoutTransform = function () {
            return _super.prototype.getLayoutTransform.call(this).multiply(Ui.Matrix.createTranslate(this.scrollDiv.scrollLeft, this.scrollDiv.scrollTop));
        };
        NativeScrollableContent.initialize = function () {
            var div = document.createElement('div');
            div.style.position = 'absolute';
            div.style.display = 'block';
            div.style.opacity = '0';
            div.style.width = '100px';
            div.style.height = '100px';
            div.style.overflow = 'scroll';
            if (document.body == null)
                document.body = document.createElement('body');
            document.body.appendChild(div);
            NativeScrollableContent.nativeScrollBarWidth = 100 - div.clientWidth;
            NativeScrollableContent.nativeScrollBarHeight = 100 - div.clientHeight;
            document.body.removeChild(div);
        };
        NativeScrollableContent.nativeScrollBarWidth = 0;
        NativeScrollableContent.nativeScrollBarHeight = 0;
        return NativeScrollableContent;
    }(Ui.Container));
    Ui.NativeScrollableContent = NativeScrollableContent;
    NativeScrollableContent.initialize();
    var NativeScrollable = (function (_super) {
        __extends(NativeScrollable, _super);
        function NativeScrollable(init) {
            var _this = _super.call(this, init) || this;
            _this._scrollHorizontal = true;
            _this._scrollVertical = true;
            _this.showShadows = false;
            _this.lock = false;
            _this.isOver = false;
            _this.offsetX = 0;
            _this.offsetY = 0;
            _this.relativeOffsetX = 0;
            _this.relativeOffsetY = 0;
            _this.viewWidth = 0;
            _this.viewHeight = 0;
            _this.contentWidth = 0;
            _this.contentHeight = 0;
            _this.scrollLock = false;
            _this.scrollbarVerticalNeeded = false;
            _this.scrollbarHorizontalNeeded = false;
            _this.scrollbarVerticalHeight = 0;
            _this.scrollbarHorizontalWidth = 0;
            _this.scrolled = new Core.Events();
            _this.autoShowScrollbars = function () {
                if (_this.showClock === undefined) {
                    _this.showClock = new Anim.Clock({ duration: 'forever' });
                    _this.showClock.timeupdate.connect(function (e) { return _this.onShowBarsTick(e.target, e.progress, e.deltaTick); });
                    _this.showClock.begin();
                }
            };
            _this.autoHideScrollbars = function () {
                if (_this.isOver)
                    return;
                if (_this.showClock === undefined) {
                    _this.showClock = new Anim.Clock({ duration: 'forever' });
                    _this.showClock.timeupdate.connect(function (e) { return _this.onShowBarsTick(e.target, e.progress, e.deltaTick); });
                    _this.showClock.begin();
                }
            };
            _this.onScrollbarHorizontalMove = function () {
                if (_this.scrollLock)
                    return;
                var totalWidth = _this.viewWidth - _this.scrollbarHorizontalBox.layoutWidth;
                var offsetX = Math.min(1, Math.max(0, _this.scrollbarHorizontalBox.positionX / totalWidth));
                _this.setOffset(offsetX, undefined, false, true);
                _this.scrollbarHorizontalBox.setPosition(offsetX * totalWidth, undefined);
            };
            _this.onScrollbarVerticalMove = function () {
                if (_this.scrollLock)
                    return;
                var totalHeight = _this.viewHeight - _this.scrollbarVerticalBox.layoutHeight;
                var offsetY = Math.min(1, Math.max(0, _this.scrollbarVerticalBox.positionY / totalHeight));
                _this.setOffset(undefined, offsetY, false, true);
                _this.scrollbarVerticalBox.setPosition(undefined, offsetY * totalHeight);
            };
            _this.clipToBounds = true;
            _this.contentBox = new NativeScrollableContent();
            _this.contentBox.scrolled.connect(function () { return _this.onScroll(); });
            _this.appendChild(_this.contentBox);
            new Ui.OverWatcher({
                element: _this,
                onentered: function () {
                    _this.isOver = true;
                    _this.autoShowScrollbars();
                },
                onleaved: function () {
                    _this.isOver = false;
                    _this.autoHideScrollbars();
                }
            });
            _this.setScrollbarHorizontal(new Ui.Movable());
            _this.setScrollbarVertical(new Ui.Movable());
            if (init) {
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.scrollHorizontal !== undefined)
                    _this.scrollHorizontal = init.scrollHorizontal;
                if (init.scrollVertical !== undefined)
                    _this.scrollVertical = init.scrollVertical;
            }
            return _this;
        }
        Object.defineProperty(NativeScrollable.prototype, "onscrolled", {
            set: function (value) { this.scrolled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NativeScrollable.prototype, "content", {
            get: function () {
                return this.contentBox.content;
            },
            set: function (content) {
                this.contentBox.content = content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NativeScrollable.prototype, "scrollHorizontal", {
            get: function () {
                return this._scrollHorizontal;
            },
            set: function (scroll) {
                if (scroll !== this._scrollHorizontal) {
                    this._scrollHorizontal = scroll;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NativeScrollable.prototype, "scrollVertical", {
            get: function () {
                return this._scrollVertical;
            },
            set: function (scroll) {
                if (scroll !== this._scrollVertical) {
                    this._scrollVertical = scroll;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        NativeScrollable.prototype.setScrollbarVertical = function (scrollbarVertical) {
            if (this.scrollbarVerticalBox) {
                this.scrollbarVerticalBox.downed.disconnect(this.autoShowScrollbars);
                this.scrollbarVerticalBox.upped.disconnect(this.autoHideScrollbars);
                this.scrollbarVerticalBox.moved.disconnect(this.onScrollbarVerticalMove);
                this.removeChild(this.scrollbarVerticalBox);
            }
            if (scrollbarVertical) {
                this.scrollbarVerticalBox = scrollbarVertical;
                this.scrollbarVerticalBox.opacity = 0;
                this.scrollbarVerticalBox.moveHorizontal = false;
                this.scrollbarVerticalBox.downed.connect(this.autoShowScrollbars);
                this.scrollbarVerticalBox.upped.connect(this.autoHideScrollbars);
                this.scrollbarVerticalBox.moved.connect(this.onScrollbarVerticalMove);
                this.appendChild(this.scrollbarVerticalBox);
                if (NativeScrollableContent.nativeScrollBarHeight == 0)
                    this.scrollbarVerticalBox.hide(true);
            }
        };
        NativeScrollable.prototype.setScrollbarHorizontal = function (scrollbarHorizontal) {
            if (this.scrollbarHorizontalBox) {
                this.scrollbarHorizontalBox.downed.disconnect(this.autoShowScrollbars);
                this.scrollbarHorizontalBox.upped.disconnect(this.autoHideScrollbars);
                this.scrollbarHorizontalBox.moved.disconnect(this.onScrollbarHorizontalMove);
                this.removeChild(this.scrollbarHorizontalBox);
            }
            if (scrollbarHorizontal) {
                this.scrollbarHorizontalBox = scrollbarHorizontal;
                this.scrollbarHorizontalBox.opacity = 0;
                this.scrollbarHorizontalBox.moveVertical = false;
                this.scrollbarHorizontalBox.downed.connect(this.autoShowScrollbars);
                this.scrollbarHorizontalBox.upped.connect(this.autoHideScrollbars);
                this.scrollbarHorizontalBox.moved.connect(this.onScrollbarHorizontalMove);
                this.appendChild(this.scrollbarHorizontalBox);
                if (NativeScrollableContent.nativeScrollBarWidth == 0)
                    this.scrollbarHorizontalBox.hide(true);
            }
        };
        NativeScrollable.prototype.setOffset = function (offsetX, offsetY, absolute, align) {
            if (absolute === void 0) { absolute = false; }
            if (align === void 0) { align = false; }
            if (absolute === undefined)
                absolute = false;
            if (offsetX === undefined)
                offsetX = this.offsetX;
            else if (!absolute)
                offsetX *= this.contentWidth - this.viewWidth;
            if (offsetY === undefined)
                offsetY = this.offsetY;
            else if (!absolute)
                offsetY *= this.contentHeight - this.viewHeight;
            if (offsetX < 0)
                offsetX = 0;
            else if (this.viewWidth + offsetX > this.contentWidth)
                offsetX = this.contentWidth - this.viewWidth;
            if (offsetY < 0)
                offsetY = 0;
            else if (this.viewHeight + offsetY > this.contentHeight)
                offsetY = this.contentHeight - this.viewHeight;
            if (this.contentWidth <= this.viewWidth)
                this.relativeOffsetX = 0;
            else
                this.relativeOffsetX = offsetX / (this.contentWidth - this.viewWidth);
            if (this.contentHeight <= this.viewHeight)
                this.relativeOffsetY = 0;
            else
                this.relativeOffsetY = offsetY / (this.contentHeight - this.viewHeight);
            if (align) {
                offsetX = Math.round(offsetX);
                offsetY = Math.round(offsetY);
            }
            if ((this.offsetX !== offsetX) || (this.offsetY !== offsetY)) {
                this.offsetX = offsetX;
                this.offsetY = offsetY;
                this.contentBox.setOffset(offsetX, offsetY);
                return true;
            }
            else
                return false;
        };
        NativeScrollable.prototype.getOffsetX = function () {
            return this.contentBox.offsetX;
        };
        NativeScrollable.prototype.getRelativeOffsetX = function () {
            return this.relativeOffsetX;
        };
        NativeScrollable.prototype.getOffsetY = function () {
            return this.contentBox.offsetY;
        };
        NativeScrollable.prototype.getRelativeOffsetY = function () {
            return this.relativeOffsetY;
        };
        NativeScrollable.prototype.onShowBarsTick = function (clock, progress, delta) {
            var show = this.isOver;
            if (this.scrollbarVerticalBox)
                show = show || this.scrollbarVerticalBox.isDown;
            if (this.scrollbarHorizontalBox)
                show = show || this.scrollbarHorizontalBox.isDown;
            var stop = false;
            var speed = 2;
            var opacity = this.scrollbarHorizontalBox.opacity;
            if (show) {
                opacity += (delta * speed);
                if (opacity >= 1) {
                    opacity = 1;
                    stop = true;
                }
            }
            else {
                opacity -= (delta * speed);
                if (opacity <= 0) {
                    opacity = 0;
                    stop = true;
                }
            }
            if (this.scrollbarHorizontalBox)
                this.scrollbarHorizontalBox.opacity = opacity;
            if (this.scrollbarVerticalBox)
                this.scrollbarVerticalBox.opacity = opacity;
            if (stop) {
                if (this.showClock)
                    this.showClock.stop();
                this.showClock = undefined;
            }
        };
        NativeScrollable.prototype.onScroll = function () {
            this.updateOffset();
            this.scrolled.fire({ target: this, offsetX: this.offsetX, offsetY: this.offsetY });
        };
        NativeScrollable.prototype.updateOffset = function () {
            if (this.contentBox === undefined)
                return;
            this.offsetX = this.contentBox.offsetX;
            this.offsetY = this.contentBox.offsetY;
            this.viewWidth = this.layoutWidth;
            this.viewHeight = this.layoutHeight;
            this.contentWidth = this.contentBox.contentWidth;
            this.contentHeight = this.contentBox.contentHeight;
            if (this.contentWidth <= this.viewWidth)
                this.relativeOffsetX = 0;
            else
                this.relativeOffsetX = this.offsetX / (this.contentWidth - this.viewWidth);
            if (this.contentHeight <= this.viewHeight)
                this.relativeOffsetY = 0;
            else
                this.relativeOffsetY = this.offsetY / (this.contentHeight - this.viewHeight);
            if (this.contentHeight > this.viewHeight)
                this.scrollbarVerticalNeeded = true;
            else
                this.scrollbarVerticalNeeded = false;
            if (this.contentWidth > this.viewWidth)
                this.scrollbarHorizontalNeeded = true;
            else
                this.scrollbarHorizontalNeeded = false;
            if (this.scrollbarVerticalNeeded) {
                if (this.scrollbarVerticalBox) {
                    this.scrollbarVerticalHeight = Math.max((this.viewHeight / this.contentHeight) * this.viewHeight, this.scrollbarVerticalBox.measureHeight);
                    this.scrollbarVerticalBox.arrange(this.layoutWidth - this.scrollbarVerticalBox.measureWidth, 0, this.scrollbarVerticalBox.measureWidth, this.scrollbarVerticalHeight);
                    if (NativeScrollableContent.nativeScrollBarHeight != 0)
                        this.scrollbarVerticalBox.show();
                }
            }
            else {
                if (this.scrollbarVerticalBox)
                    this.scrollbarVerticalBox.hide();
                this.offsetY = 0;
            }
            if (this.scrollbarHorizontalNeeded) {
                if (this.scrollbarHorizontalBox) {
                    this.scrollbarHorizontalWidth = Math.max((this.viewWidth / this.contentWidth) * this.viewWidth, this.scrollbarHorizontalBox.measureWidth);
                    this.scrollbarHorizontalBox.arrange(0, this.layoutHeight - this.scrollbarHorizontalBox.measureHeight, this.scrollbarHorizontalWidth, this.scrollbarHorizontalBox.measureHeight);
                    if (NativeScrollableContent.nativeScrollBarWidth != 0)
                        this.scrollbarHorizontalBox.show();
                }
            }
            else {
                if (this.scrollbarHorizontalBox)
                    this.scrollbarHorizontalBox.hide();
                this.offsetX = 0;
            }
            this.scrollLock = true;
            if (this.scrollbarHorizontalNeeded) {
                var relOffsetX = this.offsetX / (this.contentWidth - this.viewWidth);
                if (relOffsetX > 1) {
                    relOffsetX = 1;
                    this.setOffset(relOffsetX, undefined);
                }
                if (this.scrollbarHorizontalBox)
                    this.scrollbarHorizontalBox.setPosition((this.viewWidth - this.scrollbarHorizontalWidth) * relOffsetX, undefined);
            }
            if (this.scrollbarVerticalNeeded) {
                var relOffsetY = this.offsetY / (this.contentHeight - this.viewHeight);
                if (relOffsetY > 1) {
                    relOffsetY = 1;
                    this.setOffset(undefined, relOffsetY);
                }
                if (this.scrollbarVerticalBox)
                    this.scrollbarVerticalBox.setPosition(undefined, (this.viewHeight - this.scrollbarVerticalHeight) * relOffsetY);
            }
            this.scrollLock = false;
        };
        NativeScrollable.prototype.measureCore = function (width, height) {
            var size = { width: 0, height: 0 };
            if (this.scrollbarHorizontalBox)
                this.scrollbarHorizontalBox.measure(width, height);
            if (this.scrollbarVerticalBox)
                this.scrollbarVerticalBox.measure(width, height);
            var contentSize = this.contentBox.measure(width, height);
            if (contentSize.width < width)
                size.width = contentSize.width;
            else
                size.width = width;
            if (contentSize.height < height)
                size.height = contentSize.height;
            else
                size.height = height;
            if (!this.scrollVertical)
                size.height = contentSize.height;
            if (!this.scrollHorizontal)
                size.width = contentSize.width;
            return size;
        };
        NativeScrollable.prototype.arrangeCore = function (width, height) {
            this.viewWidth = width;
            this.viewHeight = height;
            this.contentBox.arrange(0, 0, this.viewWidth, this.viewHeight);
            this.contentWidth = this.contentBox.contentWidth;
            this.contentHeight = this.contentBox.contentHeight;
            this.updateOffset();
        };
        NativeScrollable.prototype.onScrollIntoView = function (el) {
            var matrix = Ui.Matrix.createTranslate(this.offsetX, this.offsetY).multiply(el.transformToElement(this));
            var p0 = (new Ui.Point(0, 0)).multiply(matrix);
            var p1 = (new Ui.Point(el.layoutWidth, el.layoutHeight)).multiply(matrix);
            if ((p0.y < this.offsetY) || (p0.y > this.offsetY + this.viewHeight) ||
                (p1.y > this.offsetY + this.viewHeight)) {
                if (Math.abs(this.offsetY + this.viewHeight - p1.y) < Math.abs(this.offsetY - p0.y))
                    this.setOffset(this.offsetX, p1.y - this.viewHeight, true);
                else
                    this.setOffset(this.offsetX, p0.y, true);
                this.contentBox.stopInertia();
            }
            if ((p0.x < this.offsetX) || (p0.x > this.offsetX + this.viewWidth) ||
                (p1.x > this.offsetX + this.viewWidth)) {
                if (Math.abs(this.offsetX + this.viewWidth - p1.x) < Math.abs(this.offsetX - p0.x))
                    this.setOffset(p1.x - this.viewWidth, this.offsetY, true);
                else
                    this.setOffset(p0.x, this.offsetY, true);
                this.contentBox.stopInertia();
            }
            _super.prototype.onScrollIntoView.call(this, el);
        };
        return NativeScrollable;
    }(Ui.Container));
    Ui.NativeScrollable = NativeScrollable;
    var NativeScrollingArea = (function (_super) {
        __extends(NativeScrollingArea, _super);
        function NativeScrollingArea(init) {
            var _this = _super.call(this, init) || this;
            _this.horizontalScrollbar = new Ui.Scrollbar('horizontal');
            _this.setScrollbarHorizontal(_this.horizontalScrollbar);
            _this.verticalScrollbar = new Ui.Scrollbar('vertical');
            _this.setScrollbarVertical(_this.verticalScrollbar);
            return _this;
        }
        NativeScrollingArea.prototype.onStyleChange = function () {
            var radius = this.getStyleProperty('radius');
            this.horizontalScrollbar.radius = radius;
            this.verticalScrollbar.radius = radius;
            var color = this.getStyleProperty('color');
            this.horizontalScrollbar.fill = color;
            this.verticalScrollbar.fill = color;
        };
        NativeScrollingArea.style = {
            color: 'rgba(50,50,50,0.7)',
            radius: 0
        };
        return NativeScrollingArea;
    }(NativeScrollable));
    Ui.NativeScrollingArea = NativeScrollingArea;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Scrollbar = (function (_super) {
        __extends(Scrollbar, _super);
        function Scrollbar(orientation) {
            var _this = _super.call(this) || this;
            _this.orientation = orientation;
            _this.scale = 0;
            _this.cursor = 'inherit';
            _this.focusable = false;
            _this.over = new Ui.Overable();
            _this.content = _this.over;
            _this.rect = new Ui.Rectangle();
            _this.rect.transformOriginX = 1;
            _this.rect.transformOriginY = 1;
            if (orientation == 'horizontal') {
                _this.rect.width = 30;
                _this.rect.height = 15;
                _this.over.height = 15;
                _this.rect.verticalAlign = 'bottom';
            }
            else {
                _this.rect.width = 15;
                _this.rect.height = 30;
                _this.over.width = 15;
                _this.rect.horizontalAlign = 'right';
            }
            _this.over.content = _this.rect;
            _this.over.entered.connect(function () { return _this.startAnim(); });
            _this.over.leaved.connect(function () { return _this.startAnim(); });
            _this.downed.connect(function () { return _this.startAnim(); });
            _this.upped.connect(function () { return _this.startAnim(); });
            _this.updateScale();
            return _this;
        }
        Object.defineProperty(Scrollbar.prototype, "radius", {
            set: function (radius) {
                this.rect.radius = radius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Scrollbar.prototype, "fill", {
            set: function (color) {
                this.rect.fill = color;
            },
            enumerable: true,
            configurable: true
        });
        Scrollbar.prototype.startAnim = function () {
            var _this = this;
            if (this.clock == undefined) {
                this.clock = new Anim.Clock();
                this.clock.duration = 'forever';
                this.clock.timeupdate.connect(function (e) { return _this.onTick(e.target, e.progress, e.deltaTick); });
                this.clock.begin();
            }
        };
        Scrollbar.prototype.onTick = function (clock, progress, deltaTick) {
            var d = deltaTick * 30;
            var view = this.over.isOver || this.isDown;
            if (!view)
                d = -d;
            this.scale = Math.max(0, Math.min(1, this.scale + (d / 10)));
            this.updateScale();
            if ((!view && this.scale == 0) || (view && this.scale == 1)) {
                if (this.clock)
                    this.clock.stop();
                this.clock = undefined;
            }
        };
        Scrollbar.prototype.updateScale = function () {
            var rs = (5 + this.scale * 10) / 15;
            if (this.orientation == 'vertical')
                this.rect.transform = Ui.Matrix.createScale(rs, 1);
            else
                this.rect.transform = Ui.Matrix.createScale(1, rs);
        };
        return Scrollbar;
    }(Ui.Movable));
    Ui.Scrollbar = Scrollbar;
    var ScrollingArea = (function (_super) {
        __extends(ScrollingArea, _super);
        function ScrollingArea(init) {
            var _this = _super.call(this, init) || this;
            if (init) {
                if (init.content != undefined)
                    _this.content = init.content;
                if (init.scrollHorizontal != undefined)
                    _this.scrollHorizontal = init.scrollHorizontal;
                if (init.scrollVertical != undefined)
                    _this.scrollVertical = init.scrollVertical;
                if (init.onscrolled != undefined)
                    _this.scrolled.connect(init.onscrolled);
            }
            return _this;
        }
        return ScrollingArea;
    }(Ui.NativeScrollingArea));
    Ui.ScrollingArea = ScrollingArea;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var CompactLabelContext = (function (_super) {
        __extends(CompactLabelContext, _super);
        function CompactLabelContext() {
            var _this = _super.call(this) || this;
            _this.text = '';
            _this.fontSize = 16;
            _this.fontFamily = 'Sans-Serif';
            _this.fontWeight = 'normal';
            _this.maxLine = Number.MAX_VALUE;
            _this.interLine = 1;
            _this.textAlign = 'left';
            _this.width = Number.MAX_VALUE;
            _this.drawLine = undefined;
            _this.whiteSpace = 'pre-line';
            _this.wordWrap = 'normal';
            _this.textTransform = 'none';
            return _this;
        }
        CompactLabelContext.prototype.setDrawLine = function (func) {
            this.drawLine = func;
        };
        CompactLabelContext.prototype.getWhiteSpace = function () {
            return this.whiteSpace;
        };
        CompactLabelContext.prototype.setWhiteSpace = function (whiteSpace) {
            this.whiteSpace = whiteSpace;
        };
        CompactLabelContext.prototype.getWordWrap = function () {
            return this.wordWrap;
        };
        CompactLabelContext.prototype.setWordWrap = function (wordWrap) {
            this.wordWrap = wordWrap;
        };
        CompactLabelContext.prototype.getMaxLine = function () {
            return this.maxLine;
        };
        CompactLabelContext.prototype.setMaxLine = function (maxLine) {
            if (this.maxLine !== maxLine)
                this.maxLine = maxLine;
        };
        CompactLabelContext.prototype.getTextAlign = function () {
            return this.textAlign;
        };
        CompactLabelContext.prototype.setTextAlign = function (textAlign) {
            if (this.textAlign !== textAlign)
                this.textAlign = textAlign;
        };
        CompactLabelContext.prototype.setInterLine = function (interLine) {
            if (this.interLine !== interLine)
                this.interLine = interLine;
        };
        CompactLabelContext.prototype.getInterLine = function () {
            return this.interLine;
        };
        CompactLabelContext.prototype.getText = function () {
            return this.text;
        };
        CompactLabelContext.prototype.setText = function (text) {
            if (this.text !== text) {
                this.text = text;
            }
        };
        CompactLabelContext.prototype.setFontSize = function (fontSize) {
            if (this.fontSize !== fontSize) {
                this.fontSize = fontSize;
            }
        };
        CompactLabelContext.prototype.getFontSize = function () {
            return this.fontSize;
        };
        CompactLabelContext.prototype.setFontFamily = function (fontFamily) {
            if (this.fontFamily !== fontFamily) {
                this.fontFamily = fontFamily;
            }
        };
        CompactLabelContext.prototype.getFontFamily = function () {
            return this.fontFamily;
        };
        CompactLabelContext.prototype.setFontWeight = function (fontWeight) {
            if (this.fontWeight !== fontWeight) {
                this.fontWeight = fontWeight;
            }
        };
        CompactLabelContext.prototype.getFontWeight = function () {
            return this.fontWeight;
        };
        CompactLabelContext.prototype.getTextTransform = function () {
            return this.textTransform;
        };
        CompactLabelContext.prototype.setTextTransform = function (textTransform) {
            this.textTransform = textTransform;
        };
        CompactLabelContext.prototype.getTransformedText = function () {
            if (this.textTransform === 'lowercase')
                return this.text.toLowerCase();
            else if (this.textTransform === 'uppercase')
                return this.text.toUpperCase();
            else
                return this.text;
        };
        CompactLabelContext.prototype.flushLine = function (y, line, width, render, lastLine) {
            if (lastLine === void 0) { lastLine = false; }
            var size = Ui.Label.measureText(line, this.getFontSize(), this.getFontFamily(), this.getFontWeight());
            if (render) {
                var x = void 0;
                if (this.textAlign == 'left')
                    x = 0;
                else if (this.textAlign == 'right')
                    x = width - size.width;
                else
                    x = (width - size.width) / 2;
                if (render)
                    this.drawLine(x, y, line);
            }
            return size.height * ((lastLine === true) ? 1 : this.getInterLine());
        };
        CompactLabelContext.prototype.updateFlow = function (width, render) {
            if (this.text === undefined)
                return { width: 0, height: 0 };
            var text = this.getTransformedText();
            var fontSize = this.getFontSize();
            var fontFamily = this.getFontFamily();
            var fontWeight = this.getFontWeight();
            var dotWidth = (Ui.Label.measureText('...', fontSize, fontFamily, fontWeight)).width;
            var y = 0;
            var x = 0;
            var line = '';
            var lineCount = 0;
            var maxWidth = 0;
            for (var i = 0; i < text.length; i++) {
                var size = Ui.Label.measureText(line + text.charAt(i), fontSize, fontFamily, fontWeight);
                if ((this.maxLine !== undefined) && (lineCount + 1 >= this.maxLine) && (size.width + dotWidth > width)) {
                    y += this.flushLine(y, line + '...', width, render);
                    if (x + dotWidth > maxWidth)
                        maxWidth = x + dotWidth;
                    return { width: maxWidth, height: y };
                }
                else if (size.width > width) {
                    y += this.flushLine(y, line, width, render);
                    lineCount++;
                    if (x > maxWidth)
                        maxWidth = x;
                    line = text.charAt(i);
                }
                else
                    line += text.charAt(i);
                x = size.width;
            }
            if (line !== '') {
                y += this.flushLine(y, line, width, render, true);
                if (x > maxWidth)
                    maxWidth = x;
            }
            return { width: maxWidth, height: y };
        };
        CompactLabelContext.prototype.updateFlowWords = function (width, render) {
            if (this.text == undefined)
                return { width: 0, height: 0 };
            var i;
            var lineWidth;
            var text = this.getTransformedText();
            var fontSize = this.getFontSize();
            var fontFamily = this.getFontFamily();
            var fontWeight = this.getFontWeight();
            var dotWidth = (Ui.Label.measureText('...', fontSize, fontFamily, fontWeight)).width;
            var words = [];
            var wordsSize = [];
            var tmpWords = text.split(' ');
            for (i = 0; i < tmpWords.length; i++) {
                var word = tmpWords[i];
                while (true) {
                    var wordSize = (Ui.Label.measureText(word, fontSize, fontFamily, fontWeight)).width;
                    if (wordSize < width) {
                        words.push(word);
                        wordsSize.push(wordSize);
                        break;
                    }
                    else {
                        var tmpWord = '';
                        for (var i2 = 0; i2 < word.length; i2++) {
                            if ((Ui.Label.measureText(tmpWord + word.charAt(i2), fontSize, fontFamily, fontWeight)).width < width)
                                tmpWord += word.charAt(i2);
                            else {
                                if (tmpWord === '')
                                    tmpWord = word.charAt(0);
                                words.push(tmpWord);
                                wordsSize.push((Ui.Label.measureText(tmpWord, fontSize, fontFamily, fontWeight)).width);
                                word = word.substr(tmpWord.length, word.length - tmpWord.length);
                                break;
                            }
                        }
                    }
                    if (word.length === 0)
                        break;
                }
            }
            var spaceWidth = (Ui.Label.measureText('. .', fontSize, fontFamily, fontWeight)).width - (Ui.Label.measureText('..', fontSize, fontFamily, fontWeight)).width;
            var y = 0;
            var x = 0;
            var maxWidth = 0;
            var line = '';
            var lineCount = 0;
            for (i = 0; i < words.length; i++) {
                if (line !== '') {
                    if (x + spaceWidth > width) {
                        if (lineCount + 1 >= this.maxLine) {
                            while (true) {
                                lineWidth = (Ui.Label.measureText(line, fontSize, fontFamily, fontWeight)).width;
                                if (lineWidth + dotWidth > width) {
                                    if (line.length <= 1) {
                                        line = '...';
                                        break;
                                    }
                                    line = line.substr(0, line.length - 1);
                                }
                                else {
                                    line += '...';
                                    break;
                                }
                            }
                            y += this.flushLine(y, line, width, render);
                            if (x > maxWidth)
                                maxWidth = x;
                            return { width: maxWidth, height: y };
                        }
                        y += this.flushLine(y, line, width, render);
                        if (x > maxWidth)
                            maxWidth = x;
                        x = 0;
                        lineCount++;
                        line = '';
                    }
                    else {
                        line += ' ';
                        x += spaceWidth;
                    }
                }
                if (x + wordsSize[i] > width) {
                    if (lineCount + 1 >= this.maxLine) {
                        while (true) {
                            lineWidth = (Ui.Label.measureText(line, fontSize, fontFamily, fontWeight)).width;
                            if (lineWidth + dotWidth > width) {
                                if (line.length <= 1) {
                                    line = '...';
                                    break;
                                }
                                line = line.substr(0, line.length - 1);
                            }
                            else {
                                line += '...';
                                break;
                            }
                        }
                        y += this.flushLine(y, line, width, render);
                        if (x > maxWidth)
                            maxWidth = x;
                        return { width: maxWidth, height: y };
                    }
                    y += this.flushLine(y, line, width, render);
                    lineCount++;
                    if (x > maxWidth)
                        maxWidth = x;
                    x = wordsSize[i];
                    line = words[i];
                }
                else {
                    line += words[i];
                    x += wordsSize[i];
                }
            }
            if (line !== '') {
                y += this.flushLine(y, line, width, render, true);
                if (x > maxWidth)
                    maxWidth = x;
            }
            return { width: maxWidth, height: y };
        };
        CompactLabelContext.prototype.drawText = function (width, render) {
            if (this.whiteSpace === 'nowrap') {
                var text = this.getTransformedText();
                var size = Ui.Label.measureText(text, this.fontSize, this.fontFamily, this.fontWeight);
                if (render)
                    this.flushLine(0, text, width, true, true);
                return size;
            }
            else if (this.wordWrap === 'normal')
                return this.updateFlowWords(width, render);
            else
                return this.updateFlow(width, render);
        };
        return CompactLabelContext;
    }(Core.Object));
    Ui.CompactLabelContext = CompactLabelContext;
    var CompactLabel = (function (_super) {
        __extends(CompactLabel, _super);
        function CompactLabel(init) {
            var _this = _super.call(this, init) || this;
            _this.isMeasureValid = false;
            _this.isArrangeValid = false;
            _this.lastMeasureWidth = 0;
            _this.lastMeasureHeight = 0;
            _this.lastAvailableWidth = 0;
            if (!init || init.selectable == undefined)
                _this.selectable = false;
            _this.textContext = new Ui.CompactLabelContext();
            if (init) {
                if (init.maxLine !== undefined)
                    _this.maxLine = init.maxLine;
                if (init.text !== undefined)
                    _this.text = init.text;
                if (init.textAlign !== undefined)
                    _this.textAlign = init.textAlign;
                if (init.interLine !== undefined)
                    _this.interLine = init.interLine;
                if (init.fontSize !== undefined)
                    _this.fontSize = init.fontSize;
                if (init.fontFamily !== undefined)
                    _this.fontFamily = init.fontFamily;
                if (init.fontWeight !== undefined)
                    _this.fontWeight = init.fontWeight;
                if (init.whiteSpace !== undefined)
                    _this.whiteSpace = init.whiteSpace;
                if (init.wordWrap !== undefined)
                    _this.wordWrap = init.wordWrap;
                if (init.textTransform !== undefined)
                    _this.textTransform = init.textTransform;
                if (init.color !== undefined)
                    _this.color = init.color;
            }
            return _this;
        }
        Object.defineProperty(CompactLabel.prototype, "maxLine", {
            get: function () {
                if (this._maxLine !== undefined)
                    return this._maxLine;
                else
                    return this.getStyleProperty('maxLine');
            },
            set: function (maxLine) {
                this._maxLine = maxLine;
                this.textContext.setMaxLine(this.maxLine);
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "text", {
            get: function () {
                return this.textContext.getText();
            },
            set: function (text) {
                this.textContext.setText(text);
                this.isMeasureValid = false;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "textAlign", {
            get: function () {
                if (this._textAlign !== undefined)
                    return this._textAlign;
                else
                    return this.getStyleProperty('textAlign');
            },
            set: function (textAlign) {
                this._textAlign = textAlign;
                this.textContext.setTextAlign(this.textAlign);
                this.invalidateArrange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "interLine", {
            get: function () {
                if (this._interLine !== undefined)
                    return this._interLine;
                else
                    return this.getStyleProperty('interLine');
            },
            set: function (interLine) {
                this._interLine = interLine;
                this.textContext.setInterLine(this.interLine);
                this.isMeasureValid = false;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "fontSize", {
            get: function () {
                if (this._fontSize !== undefined)
                    return this._fontSize;
                else
                    return this.getStyleProperty('fontSize');
            },
            set: function (fontSize) {
                this._fontSize = fontSize;
                this.isMeasureValid = false;
                this.textContext.setFontSize(this.fontSize);
                this.textDrawing.style.fontSize = this.fontSize + 'px';
                this.textDrawing.style.lineHeight = this.fontSize + 'px';
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "fontFamily", {
            get: function () {
                if (this._fontFamily !== undefined)
                    return this._fontFamily;
                else
                    return this.getStyleProperty('fontFamily');
            },
            set: function (fontFamily) {
                this._fontFamily = fontFamily;
                this.isMeasureValid = false;
                this.textContext.setFontFamily(this.fontFamily);
                this.textDrawing.style.fontFamily = this.fontFamily;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "fontWeight", {
            get: function () {
                if (this._fontWeight !== undefined)
                    return this._fontWeight;
                else
                    return this.getStyleProperty('fontWeight');
            },
            set: function (fontWeight) {
                this._fontWeight = fontWeight;
                this.isMeasureValid = false;
                this.textContext.setFontWeight(fontWeight);
                this.textDrawing.style.fontWeight = this.fontWeight;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "whiteSpace", {
            get: function () {
                if (this._whiteSpace !== undefined)
                    return this._whiteSpace;
                else
                    return this.getStyleProperty('whiteSpace');
            },
            set: function (whiteSpace) {
                if (this._whiteSpace !== whiteSpace) {
                    this.isMeasureValid = false;
                    this._whiteSpace = whiteSpace;
                    this.textContext.setWhiteSpace(this.whiteSpace);
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "wordWrap", {
            get: function () {
                if (this._wordWrap !== undefined)
                    return this._wordWrap;
                else
                    return this.getStyleProperty('wordWrap');
            },
            set: function (wordWrap) {
                if (this._wordWrap !== wordWrap) {
                    this.isMeasureValid = false;
                    this._wordWrap = wordWrap;
                    this.textContext.setWordWrap(this.wordWrap);
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "textTransform", {
            get: function () {
                if (this._textTransform !== undefined)
                    return this._textTransform;
                else
                    return this.getStyleProperty('textTransform');
            },
            set: function (textTransform) {
                if (this._textTransform !== textTransform) {
                    this.isMeasureValid = false;
                    this._textTransform = textTransform;
                    this.textContext.setTextTransform(this.textTransform);
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CompactLabel.prototype, "color", {
            get: function () {
                if (this._color !== undefined)
                    return this._color;
                else
                    return Ui.Color.create(this.getStyleProperty('color'));
            },
            set: function (color) {
                if (this._color !== color) {
                    this._color = color;
                    if (Core.Navigator.supportRgba)
                        this.textDrawing.style.color = this._color.getCssRgba();
                    else
                        this.textDrawing.style.color = this._color.getCssHtml();
                }
            },
            enumerable: true,
            configurable: true
        });
        CompactLabel.prototype.renderDrawing = function () {
            var drawing = _super.prototype.renderDrawing.call(this);
            this.textDrawing = document.createElement('div');
            this.textDrawing.style.fontFamily = this.fontFamily;
            this.textDrawing.style.fontWeight = this.fontWeight;
            this.textDrawing.style.fontSize = this.fontSize + 'px';
            this.textDrawing.style.lineHeight = this.fontSize + 'px';
            if (Core.Navigator.supportRgba)
                this.textDrawing.style.color = this.color.getCssRgba();
            else
                this.textDrawing.style.color = this.color.getCssHtml();
            this.textDrawing.style.position = 'absolute';
            this.textDrawing.style.left = '0px';
            this.textDrawing.style.top = '0px';
            drawing.appendChild(this.textDrawing);
            return drawing;
        };
        CompactLabel.prototype.onStyleChange = function () {
            this.textDrawing.style.fontSize = this.fontSize + 'px';
            this.textDrawing.style.lineHeight = this.fontSize + 'px';
            this.textDrawing.style.fontFamily = this.fontFamily;
            this.textDrawing.style.fontWeight = this.fontWeight;
            if (Core.Navigator.supportRgba)
                this.textDrawing.style.color = this.color.getCssRgba();
            else
                this.textDrawing.style.color = this.color.getCssHtml();
            this.textContext.setMaxLine(this.maxLine);
            this.textContext.setTextAlign(this.textAlign);
            this.textContext.setFontSize(this.fontSize);
            this.textContext.setFontFamily(this.fontFamily);
            this.textContext.setFontWeight(this.fontWeight);
            this.textContext.setInterLine(this.interLine);
            this.textContext.setWhiteSpace(this.whiteSpace);
            this.textContext.setWordWrap(this.wordWrap);
            this.textContext.setTextTransform(this.textTransform);
            this.invalidateMeasure();
        };
        CompactLabel.prototype.invalidateTextMeasure = function () {
            if (this.isMeasureValid) {
                this.isMeasureValid = false;
                this.invalidateMeasure();
            }
        };
        CompactLabel.prototype.measureCore = function (width, height) {
            if (!this.isMeasureValid || (this.lastAvailableWidth !== width)) {
                this.lastAvailableWidth = width;
                var size = this.textContext.drawText(width, false);
                this.lastMeasureHeight = size.height;
                this.lastMeasureWidth = size.width;
                this.isMeasureValid = true;
                this.isArrangeValid = false;
            }
            return { width: this.lastMeasureWidth, height: this.lastMeasureHeight };
        };
        CompactLabel.prototype.arrangeCore = function (width, height) {
            while (this.textDrawing.hasChildNodes())
                this.textDrawing.removeChild(this.textDrawing.firstChild);
            var textDrawing = this.textDrawing;
            this.textContext.setDrawLine(function (x, y, line) {
                var tspan = document.createElement('div');
                tspan.style.whiteSpace = 'nowrap';
                tspan.style.wordWrap = 'none';
                tspan.style.display = 'inline';
                tspan.style.position = 'absolute';
                tspan.style.left = x + 'px';
                tspan.style.top = y + 'px';
                if ('textContent' in tspan)
                    tspan.textContent = line;
                else
                    tspan.innerText = line;
                textDrawing.appendChild(tspan);
            });
            this.textContext.drawText(width, true);
        };
        CompactLabel.style = {
            maxLine: Number.MAX_VALUE,
            color: new Ui.Color(0, 0, 0),
            fontSize: 16,
            fontFamily: 'sans-serif',
            fontWeight: 'normal',
            interLine: 1,
            textAlign: 'left',
            whiteSpace: 'pre-line',
            wordWrap: 'normal',
            textTransform: 'none'
        };
        return CompactLabel;
    }(Ui.Element));
    Ui.CompactLabel = CompactLabel;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var DropableWatcher = (function (_super) {
        __extends(DropableWatcher, _super);
        function DropableWatcher(init) {
            var _this = _super.call(this) || this;
            _this.element = init.element;
            if (init.onentered)
                _this.enter = init.onentered;
            if (init.onleaved)
                _this.leave = init.onleaved;
            if (init.ondropped)
                _this.drop = init.ondropped;
            if (init.ondroppedfile)
                _this.dropfile = init.ondroppedfile;
            if (init.types)
                _this.types = init.types;
            _this.watchers = [];
            _this.element.dragover.connect(function (e) { return _this.onDragOver(e); });
            return _this;
        }
        DropableWatcher.prototype.addType = function (type, effects) {
            if (typeof (type) === 'string')
                type = type.toLowerCase();
            if (this.allowedTypes == undefined)
                this.allowedTypes = [];
            if (typeof (effects) === 'string')
                effects = [effects];
            if (typeof (effects) !== 'function') {
                for (var i = 0; i < effects.length; i++) {
                    var effect = effects[i];
                    if (typeof (effect) === 'string')
                        effect = { action: effect };
                    if (!('text' in effect)) {
                        if (effect.action === 'copy')
                            effect.text = 'Copier';
                        else if (effect.action === 'move')
                            effect.text = 'Déplacer';
                        else if (effect.action === 'link')
                            effect.text = 'Lier';
                        else
                            effect.text = effect.action;
                    }
                    if (!('dragicon' in effect))
                        effect.dragicon = 'drag' + effect.action;
                    effects[i] = effect;
                }
                this.allowedTypes.push({ type: type, effect: effects });
            }
            else
                this.allowedTypes.push({ type: type, effect: effects });
        };
        Object.defineProperty(DropableWatcher.prototype, "types", {
            set: function (types) {
                var _this = this;
                this.allowedTypes = [];
                types.forEach(function (type) { return _this.addType(type.type, type.effects); });
            },
            enumerable: true,
            configurable: true
        });
        DropableWatcher.prototype.onDragOver = function (event) {
            var _this = this;
            var found = false;
            for (var i = 0; !found && (i < this.watchers.length); i++)
                found = (this.watchers[i].getDataTransfer() === event.dataTransfer);
            if (!found) {
                var effect = this.onDragEffect(event.dataTransfer);
                if ((effect !== undefined) && (effect.length > 0)) {
                    var watcher = event.dataTransfer.capture(this.element, effect);
                    this.watchers.push(watcher);
                    watcher.dropped.connect(function (e) { return _this.onWatcherDrop(e.target, e.effect, e.x, e.y); });
                    watcher.leaved.connect(function (e) { return _this.onWatcherLeave(e.target); });
                    event.stopImmediatePropagation();
                    this.onWatcherEnter(watcher);
                }
            }
            else
                event.stopImmediatePropagation();
        };
        DropableWatcher.prototype.onWatcherEnter = function (watcher) {
            this.onDragEnter(watcher.getDataTransfer());
        };
        DropableWatcher.prototype.onWatcherDrop = function (watcher, effect, x, y) {
            var point = this.element.pointFromWindow(new Ui.Point(x, y));
            this.onDrop(watcher.getDataTransfer(), effect, point.getX(), point.getY());
        };
        DropableWatcher.prototype.onWatcherLeave = function (watcher) {
            var found = false;
            var i = 0;
            for (; !found && (i < this.watchers.length); i++) {
                found = (this.watchers[i] === watcher);
            }
            i--;
            if (found)
                this.watchers.splice(i, 1);
            if (this.watchers.length === 0)
                this.onDragLeave();
        };
        DropableWatcher.prototype.getAllowedTypesEffect = function (dataTransfer) {
            if (this.allowedTypes !== undefined) {
                var data = dataTransfer.getData();
                var effect = undefined;
                for (var i = 0; (effect === undefined) && (i < this.allowedTypes.length); i++) {
                    var type = this.allowedTypes[i];
                    if (typeof (type.type) === 'string') {
                        if (type.type === 'all')
                            effect = type.effect;
                        else if (data instanceof Ui.DragNativeData) {
                            if ((type.type === 'files') && data.hasFiles())
                                effect = type.effect;
                            else if (((type.type === 'text') || (type.type === 'text/plain')) && data.hasTypes('text/plain', 'text'))
                                effect = type.effect;
                            else if (data.hasType(type.type))
                                effect = type.effect;
                        }
                    }
                    else if (data instanceof type.type)
                        effect = type.effect;
                }
                if (typeof (effect) === 'function') {
                    var effects = this.onDragEffectFunction(dataTransfer, effect);
                    for (var i = 0; i < effects.length; i++) {
                        var effect_1 = effects[i];
                        if (typeof (effect_1) === 'string')
                            effect_1 = { action: effect_1 };
                        if (!('text' in effect_1)) {
                            if (effect_1.action === 'copy')
                                effect_1.text = 'Copier';
                            else if (effect_1.action === 'move')
                                effect_1.text = 'Déplacer';
                            else if (effect_1.action === 'link')
                                effect_1.text = 'Lier';
                            else if (effect_1.action === 'run')
                                effect_1.text = 'Exécuter';
                            else if (effect_1.action === 'play')
                                effect_1.text = 'Jouer';
                            else
                                effect_1.text = effect_1.action;
                        }
                        if (!('dragicon' in effect_1))
                            effect_1.dragicon = 'drag' + effect_1.action;
                        effects[i] = effect_1;
                    }
                    effect = effects;
                }
                if (effect === undefined)
                    effect = [];
                return effect;
            }
            else
                return [];
        };
        DropableWatcher.prototype.onDragEffect = function (dataTransfer) {
            var dragEvent = new Ui.DragEvent();
            dragEvent.setType('drageffect');
            dragEvent.setBubbles(false);
            dragEvent.dataTransfer = dataTransfer;
            dragEvent.dispatchEvent(this.element);
            var effectAllowed = dragEvent.effectAllowed;
            if (effectAllowed !== undefined)
                return dragEvent.effectAllowed;
            else
                return this.getAllowedTypesEffect(dataTransfer);
        };
        DropableWatcher.prototype.onDragEffectFunction = function (dataTransfer, func) {
            return func(dataTransfer.getData(), dataTransfer);
        };
        DropableWatcher.prototype.onDrop = function (dataTransfer, dropEffect, x, y) {
            var done = false;
            if (this.drop)
                this.drop(this, dataTransfer.getData(), dropEffect, x, y, dataTransfer);
            var data = dataTransfer.getData();
            if (data instanceof Ui.DragNativeData && data.hasFiles()) {
                var files = data.getFiles();
                done = true;
                if (this.dropfile) {
                    for (var i = 0; i < files.length; i++)
                        done = done && this.dropfile(this, files[i], dropEffect, x, y);
                }
            }
        };
        DropableWatcher.prototype.onDragEnter = function (dataTransfer) {
            if (this.enter)
                this.enter(this, dataTransfer.getData());
        };
        DropableWatcher.prototype.onDragLeave = function () {
            if (this.leave)
                this.leave(this);
        };
        return DropableWatcher;
    }(Core.Object));
    Ui.DropableWatcher = DropableWatcher;
    var DropBox = (function (_super) {
        __extends(DropBox, _super);
        function DropBox(init) {
            var _this = _super.call(this, init) || this;
            _this.watchers = undefined;
            _this.allowedTypes = undefined;
            _this.drageffect = new Core.Events();
            _this.dragentered = new Core.Events();
            _this.dragleaved = new Core.Events();
            _this.dropped = new Core.Events();
            _this.droppedfile = new Core.Events();
            _this.watchers = [];
            _this.dragover.connect(function (e) { return _this.onDragOver(e); });
            if (init) {
                if (init.ondrageffect)
                    _this.drageffect.connect(init.ondrageffect);
                if (init.ondragentered)
                    _this.dragentered.connect(init.ondragentered);
                if (init.ondragleaved)
                    _this.dragleaved.connect(init.ondragleaved);
                if (init.ondropped)
                    _this.dropped.connect(init.ondropped);
                if (init.ondroppedfile)
                    _this.droppedfile.connect(init.ondroppedfile);
            }
            return _this;
        }
        Object.defineProperty(DropBox.prototype, "ondrageffect", {
            set: function (value) { this.drageffect.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropBox.prototype, "ondragentered", {
            set: function (value) { this.dragentered.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropBox.prototype, "ondragleaved", {
            set: function (value) { this.dragleaved.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropBox.prototype, "ondropped", {
            set: function (value) { this.dropped.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropBox.prototype, "ondroppedfile", {
            set: function (value) { this.droppedfile.connect(value); },
            enumerable: true,
            configurable: true
        });
        DropBox.prototype.addType = function (type, effects) {
            if (typeof (type) === 'string')
                type = type.toLowerCase();
            if (this.allowedTypes == undefined)
                this.allowedTypes = [];
            if (typeof (effects) === 'string')
                effects = [effects];
            if (typeof (effects) !== 'function') {
                for (var i = 0; i < effects.length; i++) {
                    var effect = effects[i];
                    if (typeof (effect) === 'string')
                        effect = { action: effect };
                    if (!('text' in effect)) {
                        if (effect.action === 'copy')
                            effect.text = 'Copier';
                        else if (effect.action === 'move')
                            effect.text = 'Déplacer';
                        else if (effect.action === 'link')
                            effect.text = 'Lier';
                        else
                            effect.text = effect.action;
                    }
                    if (!('dragicon' in effect))
                        effect.dragicon = 'drag' + effect.action;
                    effects[i] = effect;
                }
                this.allowedTypes.push({ type: type, effect: effects });
            }
            else
                this.allowedTypes.push({ type: type, effect: effects });
        };
        DropBox.prototype.onDragOver = function (event) {
            var _this = this;
            var found = false;
            for (var i = 0; !found && (i < this.watchers.length); i++)
                found = (this.watchers[i].getDataTransfer() === event.dataTransfer);
            if (!found) {
                var effect = this.onDragEffect(event.dataTransfer);
                if ((effect !== undefined) && (effect.length > 0)) {
                    var watcher = event.dataTransfer.capture(this, effect);
                    this.watchers.push(watcher);
                    watcher.moved.connect(function (e) { return _this.onWatcherMove(e.target); });
                    watcher.dropped.connect(function (e) { return _this.onWatcherDrop(e.target, e.effect, e.x, e.y); });
                    watcher.leaved.connect(function (e) { return _this.onWatcherLeave(e.target); });
                    event.stopImmediatePropagation();
                    this.onWatcherEnter(watcher);
                }
            }
            else
                event.stopImmediatePropagation();
        };
        DropBox.prototype.onWatcherEnter = function (watcher) {
            this.onDragEnter(watcher.getDataTransfer());
        };
        DropBox.prototype.onWatcherMove = function (watcher) {
        };
        DropBox.prototype.onWatcherDrop = function (watcher, effect, x, y) {
            var point = this.pointFromWindow(new Ui.Point(x, y));
            this.onDrop(watcher.getDataTransfer(), effect, point.getX(), point.getY());
        };
        DropBox.prototype.onWatcherLeave = function (watcher) {
            var found = false;
            var i = 0;
            for (; !found && (i < this.watchers.length); i++) {
                found = (this.watchers[i] === watcher);
            }
            i--;
            if (found)
                this.watchers.splice(i, 1);
            if (this.watchers.length === 0)
                this.onDragLeave();
        };
        DropBox.prototype.getAllowedTypesEffect = function (dataTransfer) {
            if (this.allowedTypes !== undefined) {
                var data = dataTransfer.getData();
                var effect = undefined;
                for (var i = 0; (effect === undefined) && (i < this.allowedTypes.length); i++) {
                    var type = this.allowedTypes[i];
                    if (typeof (type.type) === 'string') {
                        if (type.type === 'all')
                            effect = type.effect;
                        else if (data instanceof Ui.DragNativeData) {
                            if ((type.type === 'files') && data.hasFiles())
                                effect = type.effect;
                            else if (((type.type === 'text') || (type.type === 'text/plain')) && data.hasTypes('text/plain', 'text'))
                                effect = type.effect;
                            else if (data.hasType(type.type))
                                effect = type.effect;
                        }
                    }
                    else if (data instanceof type.type)
                        effect = type.effect;
                }
                if (typeof (effect) === 'function') {
                    var effects = this.onDragEffectFunction(dataTransfer, effect);
                    for (var i = 0; i < effects.length; i++) {
                        var effect_2 = effects[i];
                        if (typeof (effect_2) === 'string')
                            effect_2 = { action: effect_2 };
                        if (!('text' in effect_2)) {
                            if (effect_2.action === 'copy')
                                effect_2.text = 'Copier';
                            else if (effect_2.action === 'move')
                                effect_2.text = 'Déplacer';
                            else if (effect_2.action === 'link')
                                effect_2.text = 'Lier';
                            else if (effect_2.action === 'run')
                                effect_2.text = 'Exécuter';
                            else if (effect_2.action === 'play')
                                effect_2.text = 'Jouer';
                            else
                                effect_2.text = effect_2.action;
                        }
                        if (!('dragicon' in effect_2))
                            effect_2.dragicon = 'drag' + effect_2.action;
                        effects[i] = effect_2;
                    }
                    effect = effects;
                }
                if (effect === undefined)
                    effect = [];
                return effect;
            }
            else
                return [];
        };
        DropBox.prototype.onDragEffect = function (dataTransfer) {
            var dragEvent = new Ui.DragEvent();
            dragEvent.setType('drageffect');
            dragEvent.setBubbles(false);
            dragEvent.dataTransfer = dataTransfer;
            dragEvent.dispatchEvent(this);
            var effectAllowed = dragEvent.effectAllowed;
            if (effectAllowed !== undefined)
                return dragEvent.effectAllowed;
            else
                return this.getAllowedTypesEffect(dataTransfer);
        };
        DropBox.prototype.onDragEffectFunction = function (dataTransfer, func) {
            return func(dataTransfer.getData(), dataTransfer);
        };
        DropBox.prototype.onDrop = function (dataTransfer, dropEffect, x, y) {
            this.dropped.fire({
                target: this,
                data: dataTransfer.getData(),
                effect: dropEffect,
                x: x, y: y,
                dataTransfer: dataTransfer
            });
            var data = dataTransfer.getData();
            if (data instanceof Ui.DragNativeData && data.hasFiles()) {
                var files = data.getFiles();
                for (var i = 0; i < files.length; i++)
                    this.droppedfile.fire({ target: this, file: files[i], effect: dropEffect, x: x, y: y });
            }
        };
        DropBox.prototype.onDragEnter = function (dataTransfer) {
            this.dragentered.fire({ target: this, data: dataTransfer.getData() });
        };
        DropBox.prototype.onDragLeave = function () {
            this.dragleaved.fire({ target: this });
        };
        return DropBox;
    }(Ui.LBox));
    Ui.DropBox = DropBox;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ButtonText = (function (_super) {
        __extends(ButtonText, _super);
        function ButtonText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ButtonText;
    }(Ui.CompactLabel));
    Ui.ButtonText = ButtonText;
    var SimpleButtonBackground = (function (_super) {
        __extends(SimpleButtonBackground, _super);
        function SimpleButtonBackground() {
            var _this = _super.call(this) || this;
            _this.drawing.style.boxSizing = 'border-box';
            _this.drawing.style.borderStyle = 'solid';
            _this.border = 'black';
            _this.background = 'white';
            return _this;
        }
        Object.defineProperty(SimpleButtonBackground.prototype, "borderWidth", {
            set: function (borderWidth) {
                this.drawing.style.borderWidth = borderWidth + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleButtonBackground.prototype, "border", {
            set: function (border) {
                this.drawing.style.borderColor = Ui.Color.create(border).getCssRgba();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleButtonBackground.prototype, "radius", {
            set: function (radius) {
                this.drawing.style.borderRadius = radius + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SimpleButtonBackground.prototype, "background", {
            set: function (background) {
                this.drawing.style.backgroundColor = Ui.Color.create(background).getCssRgba();
            },
            enumerable: true,
            configurable: true
        });
        return SimpleButtonBackground;
    }(Ui.Element));
    Ui.SimpleButtonBackground = SimpleButtonBackground;
    var ButtonBackground = (function (_super) {
        __extends(ButtonBackground, _super);
        function ButtonBackground() {
            var _this = _super.call(this) || this;
            _this.ripple = new Ui.RippleEffect(_this);
            _this.drawing.style.boxSizing = 'border-box';
            _this.drawing.style.borderStyle = 'solid';
            _this.drawing.style.overflow = 'hidden';
            return _this;
        }
        ButtonBackground.prototype.down = function (x, y) {
            this.ripple.down(x, y);
        };
        ButtonBackground.prototype.up = function () {
            this.ripple.up();
        };
        ButtonBackground.prototype.press = function (x, y) {
            this.ripple.press(x, y);
        };
        Object.defineProperty(ButtonBackground.prototype, "borderWidth", {
            set: function (borderWidth) {
                this.drawing.style.borderWidth = borderWidth + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonBackground.prototype, "border", {
            set: function (border) {
                this.drawing.style.borderColor = Ui.Color.create(border).getCssRgba();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonBackground.prototype, "radius", {
            set: function (radius) {
                this.drawing.style.borderRadius = radius + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonBackground.prototype, "background", {
            set: function (background) {
                var color = Ui.Color.create(background);
                this.drawing.style.backgroundColor = color.getCssRgba();
                if (color.getHsl().l > 0.7)
                    this.ripple.fill = 'rgba(0,0,0,0.1)';
                else
                    this.ripple.fill = 'rgba(255,255,255,0.3)';
            },
            enumerable: true,
            configurable: true
        });
        return ButtonBackground;
    }(Ui.Element));
    Ui.ButtonBackground = ButtonBackground;
    var ButtonBadge = (function (_super) {
        __extends(ButtonBadge, _super);
        function ButtonBadge() {
            var _this = _super.call(this) || this;
            _this._bg = new Ui.Rectangle();
            _this._label = new Ui.Label();
            _this._badge = undefined;
            _this._badgeColor = undefined;
            _this._badgeTextColor = undefined;
            _this._label.fontWeight = 'bold';
            _this.content = [
                _this._bg, _this._label.assign({ textAlign: 'center' })
            ];
            _this.badgeColor = 'red';
            _this.badgeTextColor = 'white';
            return _this;
        }
        Object.defineProperty(ButtonBadge.prototype, "fontSize", {
            set: function (value) {
                value = Math.round(value);
                this._label.fontSize = value;
                this._label.width = value;
                var margin = Math.round(value / 4);
                this._label.margin = margin;
                this._bg.radius = (value + margin * 2) / 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonBadge.prototype, "badge", {
            set: function (badge) {
                this._badge = badge;
                this._label.text = badge;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonBadge.prototype, "badgeColor", {
            set: function (badgeColor) {
                this._badgeColor = Ui.Color.create(badgeColor);
                this._bg.fill = this._badgeColor;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ButtonBadge.prototype, "badgeTextColor", {
            set: function (badgeTextColor) {
                this._badgeTextColor = Ui.Color.create(badgeTextColor);
                this._label.color = this._badgeTextColor;
            },
            enumerable: true,
            configurable: true
        });
        return ButtonBadge;
    }(Ui.LBox));
    Ui.ButtonBadge = ButtonBadge;
    var ButtonIcon = (function (_super) {
        __extends(ButtonIcon, _super);
        function ButtonIcon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ButtonIcon;
    }(Ui.Icon));
    Ui.ButtonIcon = ButtonIcon;
    var Button = (function (_super) {
        __extends(Button, _super);
        function Button(init) {
            var _this = _super.call(this, init) || this;
            _this._isActive = false;
            _this.bg = new ButtonBackground();
            _this.content = _this.bg;
            _this.mainBox = new Ui.HBox();
            _this.mainBox.verticalAlign = 'center';
            _this.mainBox.horizontalAlign = 'stretch';
            _this.append(_this.mainBox);
            _this.buttonPartsBox = new Ui.Box();
            _this.mainBox.append(_this.buttonPartsBox, true);
            _this._textBox = new Ui.LBox();
            _this._iconBox = new Ui.LBox();
            _this.downed.connect(function (e) {
                if (_this.background instanceof ButtonBackground) {
                    if (e.x != undefined && e.y != undefined) {
                        var p = _this.pointFromWindow(new Ui.Point(e.x, e.y));
                        _this.background.down(p.x, p.y);
                    }
                    else
                        _this.background.down();
                }
            });
            _this.upped.connect(function (e) {
                if (_this.background instanceof ButtonBackground)
                    _this.background.up();
            });
            _this.pressed.connect(function (e) {
                if (_this.background instanceof ButtonBackground) {
                    if (e.x != undefined && e.y != undefined) {
                        var p = _this.pointFromWindow(new Ui.Point(e.x, e.y));
                        _this.background.press(p.x, p.y);
                    }
                    else
                        _this.background.press();
                }
            });
            _this.focused.connect(function () { return _this.updateColors(); });
            _this.blurred.connect(function () { return _this.updateColors(); });
            _this.entered.connect(function () { return _this.updateColors(); });
            _this.leaved.connect(function () { return _this.updateColors(); });
            if (init) {
                if (init.text !== undefined)
                    _this.text = init.text;
                if (init.icon !== undefined)
                    _this.icon = init.icon;
                if (init.background !== undefined)
                    _this.background = init.background;
                if (init.marker !== undefined)
                    _this.marker = init.marker;
                if (init.isActive !== undefined)
                    _this.isActive = init.isActive;
                if (init.badge !== undefined)
                    _this.badge = init.badge;
                if (init.orientation !== undefined)
                    _this.orientation = init.orientation;
            }
            return _this;
        }
        Object.defineProperty(Button.prototype, "background", {
            get: function () {
                return this.bg;
            },
            set: function (bg) {
                this.remove(this.bg);
                if (bg === undefined)
                    this.bg = new ButtonBackground();
                else
                    this.bg = bg;
                this.prepend(this.bg);
                this.onStyleChange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "textBox", {
            get: function () {
                return this._textBox;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "text", {
            get: function () {
                return (this._text instanceof ButtonText) ? this._text.text : undefined;
            },
            set: function (text) {
                this.setTextOrElement(text);
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.setTextOrElement = function (text) {
            if (typeof (text) === 'string') {
                if (this._text !== undefined) {
                    if (this._text instanceof ButtonText)
                        this._text.text = text;
                    else {
                        this._text = new ButtonText();
                        this._text.text = text;
                        this._text.color = this.getForegroundColor();
                        this._textBox.content = this._text;
                    }
                }
                else {
                    this._text = new ButtonText();
                    this._text.text = text;
                    this._text.color = this.getForegroundColor();
                    this._textBox.content = this._text;
                }
            }
            else {
                this._text = text;
                if (this._text instanceof Ui.Element)
                    this._textBox.content = this._text;
                else if (this._text !== undefined) {
                    this._text = new ButtonText();
                    this._text.text = this._text.toString();
                    this._text.color = this.getForegroundColor();
                    this._textBox.content = this._text;
                }
            }
            this.updateVisibles();
        };
        Object.defineProperty(Button.prototype, "iconBox", {
            get: function () {
                return this._iconBox;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "icon", {
            get: function () {
                return (this._icon instanceof ButtonIcon) ? this._icon.icon : undefined;
            },
            set: function (icon) {
                this.setIconOrElement(icon);
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.setIconOrElement = function (icon) {
            if (typeof (icon) === 'string') {
                if (this._icon != undefined) {
                    if (this._icon instanceof ButtonIcon)
                        this._icon.icon = icon;
                    else {
                        var ic = new ButtonIcon();
                        this._icon = ic;
                        ic.icon = icon;
                        ic.fill = this.getForegroundColor();
                        this.iconBox.content = this._icon;
                        if (this._badgeContent)
                            this.iconBox.append(this._badgeContent);
                    }
                }
                else {
                    var ic = new ButtonIcon();
                    this._icon = ic;
                    ic.icon = icon;
                    ic.fill = this.getForegroundColor();
                    this._iconBox.content = this._icon;
                    if (this._badgeContent)
                        this.iconBox.append(this._badgeContent);
                }
            }
            else {
                this._icon = icon;
                this._iconBox.content = this._icon;
                if (this._badgeContent)
                    this.iconBox.append(this._badgeContent);
            }
            this.updateVisibles();
        };
        Object.defineProperty(Button.prototype, "marker", {
            get: function () {
                return this._marker;
            },
            set: function (marker) {
                if (this._marker !== undefined)
                    this.mainBox.remove(this._marker);
                this._marker = marker;
                if (marker instanceof Ui.Icon)
                    marker.fill = this.getForegroundColor();
                this.mainBox.append(this._marker);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "isActive", {
            get: function () {
                return this._isActive;
            },
            set: function (isActive) {
                if (this._isActive !== isActive) {
                    this._isActive = isActive;
                    this.updateColors();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "badge", {
            get: function () {
                return this._badge;
            },
            set: function (text) {
                this._badge = text;
                if (!this._badgeContent) {
                    this._badgeContent = new ButtonBadge().assign({
                        verticalAlign: 'top', horizontalAlign: 'right',
                        fontSize: parseInt(this.getStyleProperty('iconSize')) / 4,
                        badgeColor: this.getStyleProperty('badgeColor'),
                        badgeTextColor: this.getStyleProperty('badgeTextColor')
                    });
                    this.iconBox.append(this._badgeContent);
                }
                this._badgeContent.badge = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "orientation", {
            get: function () {
                if (this._orientation !== undefined)
                    return this._orientation;
                else
                    return this.getStyleProperty('orientation');
            },
            set: function (orientation) {
                this._orientation = orientation;
                this.buttonPartsBox.orientation = this.orientation;
                this.updateVisibles();
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.getBackgroundColor = function () {
            var color;
            if (this._isActive) {
                if (this.hasFocus && !this.getIsMouseFocus())
                    color = Ui.Color.create(this.getStyleProperty('focusActiveBackground'));
                else
                    color = Ui.Color.create(this.getStyleProperty('activeBackground'));
            }
            else {
                if (this.hasFocus && !this.getIsMouseFocus())
                    color = Ui.Color.create(this.getStyleProperty('focusBackground'));
                else
                    color = Ui.Color.create(this.getStyleProperty('background'));
            }
            var yuv = color.getYuva();
            var deltaY = 0;
            if (this.isOver) {
                deltaY = 0.10;
                yuv.a = Math.max(0.2, yuv.a);
            }
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v, yuv.a);
        };
        Button.prototype.getBackgroundBorderColor = function () {
            var color;
            if (this._isActive) {
                if (this.hasFocus && !this.getIsMouseFocus())
                    color = Ui.Color.create(this.getStyleProperty('focusActiveBackgroundBorder'));
                else
                    color = Ui.Color.create(this.getStyleProperty('activeBackgroundBorder'));
            }
            else {
                if (this.hasFocus && !this.getIsMouseFocus())
                    color = Ui.Color.create(this.getStyleProperty('focusBackgroundBorder'));
                else
                    color = Ui.Color.create(this.getStyleProperty('backgroundBorder'));
            }
            var yuv = color.getYuva();
            var deltaY = 0;
            if (this.isOver)
                deltaY = 0.20;
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v, yuv.a);
        };
        Button.prototype.getForegroundColor = function () {
            var color;
            if (this._isActive) {
                if (this.hasFocus && !this.getIsMouseFocus())
                    color = Ui.Color.create(this.getStyleProperty('focusActiveForeground'));
                else
                    color = Ui.Color.create(this.getStyleProperty('activeForeground'));
            }
            else {
                if (this.hasFocus && !this.getIsMouseFocus())
                    color = Ui.Color.create(this.getStyleProperty('focusForeground'));
                else
                    color = Ui.Color.create(this.getStyleProperty('foreground'));
            }
            var deltaY = 0;
            if (this.isOver)
                deltaY = 0.20;
            var yuv = color.getYuva();
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v, yuv.a);
        };
        Object.defineProperty(Button.prototype, "isTextVisible", {
            get: function () {
                return ((this._text !== undefined) && (this.getStyleProperty('showText') || (this._icon === undefined)));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "isIconVisible", {
            get: function () {
                return ((this._icon !== undefined) && (this.getStyleProperty('showIcon') || (this._text === undefined)));
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.updateVisibles = function () {
            if (this.isTextVisible) {
                if (this._textBox.parent == undefined)
                    this.buttonPartsBox.append(this._textBox, true);
                if (this._text instanceof ButtonText) {
                    var textAlign = this.getStyleProperty('textAlign');
                    if (textAlign == 'auto') {
                        if (this.isIconVisible && (this.orientation === 'horizontal'))
                            this._text.textAlign = 'left';
                        else
                            this._text.textAlign = 'center';
                    }
                    else
                        this._text.textAlign = textAlign;
                    this._text.fontFamily = this.getStyleProperty('fontFamily');
                    this._text.fontSize = this.getStyleProperty('fontSize');
                    this._text.fontWeight = this.getStyleProperty('fontWeight');
                    this._text.maxLine = this.getStyleProperty('maxLine');
                    this._text.whiteSpace = this.getStyleProperty('whiteSpace');
                    this._text.interLine = this.getStyleProperty('interLine');
                    this._text.textTransform = this.getStyleProperty('textTransform');
                }
            }
            else if (this._textBox.parent != undefined)
                this.buttonPartsBox.remove(this._textBox);
            if (this.isIconVisible) {
                this._iconBox.resizable = !this.isTextVisible;
                if (this._iconBox.parent == undefined)
                    this.buttonPartsBox.prepend(this._iconBox);
            }
            else if (this._iconBox.parent != undefined)
                this.buttonPartsBox.remove(this._iconBox);
            if (this.orientation === 'horizontal') {
                if (this.isTextVisible)
                    this._text.verticalAlign = 'center';
            }
            else {
                if (this.isIconVisible && this.isTextVisible)
                    this._text.verticalAlign = 'top';
                else if (this.isTextVisible)
                    this._text.verticalAlign = 'center';
            }
        };
        Button.prototype.updateColors = function () {
            var fg = this.getForegroundColor();
            if (this.bg instanceof ButtonBackground) {
                this.bg.background = this.getBackgroundColor();
                this.bg.border = this.getBackgroundBorderColor();
            }
            if (this._text instanceof ButtonText)
                this._text.color = fg;
            if (this._icon instanceof ButtonIcon)
                this._icon.fill = fg;
            if (this._badgeContent) {
                this._badgeContent.badgeColor = this.getStyleProperty('badgeColor');
                this._badgeContent.badgeTextColor = this.getStyleProperty('badgeTextColor');
            }
            if (this._marker && this._marker instanceof Ui.Icon)
                this._marker.fill = fg;
        };
        Button.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.bg.opacity = 0.2;
        };
        Button.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.bg.opacity = 1;
        };
        Button.prototype.onStyleChange = function () {
            this.buttonPartsBox.spacing = Math.max(0, this.getStyleProperty('spacing'));
            this.buttonPartsBox.margin = Math.max(0, this.getStyleProperty('padding'));
            if (this.bg instanceof ButtonBackground) {
                this.bg.radius = this.getStyleProperty('radius');
                this.bg.borderWidth = this.getStyleProperty('borderWidth');
            }
            var iconSize = Math.max(0, this.getStyleProperty('iconSize'));
            this._iconBox.width = iconSize;
            this._iconBox.height = iconSize;
            this._textBox.width = this.getStyleProperty('textWidth');
            this._textBox.maxWidth = this.getStyleProperty('maxTextWidth');
            this._textBox.height = this.getStyleProperty('textHeight');
            this.buttonPartsBox.orientation = this.orientation;
            this.updateVisibles();
            this.updateColors();
        };
        Button.style = {
            orientation: 'horizontal',
            borderWidth: 1,
            badgeColor: 'red',
            badgeTextColor: 'white',
            background: 'rgba(250,250,250,1)',
            backgroundBorder: 'rgba(140,140,140,1)',
            foreground: '#444444',
            activeBackground: 'rgba(250,250,250,1)',
            activeBackgroundBorder: 'rgba(140,140,140,1)',
            activeForeground: '#dc6c36',
            focusBackground: '#07a0e5',
            focusBackgroundBorder: new Ui.Color(0.04, 0.43, 0.5),
            focusForeground: 'rgba(250,250,250,1)',
            focusActiveBackground: 'rgb(33,211,255)',
            focusActiveBackgroundBorder: new Ui.Color(0.04, 0.43, 0.5),
            focusActiveForeground: 'white',
            radius: 3,
            spacing: 10,
            padding: 7,
            iconSize: 26,
            fontSize: 16,
            fontFamily: 'Sans-serif',
            fontWeight: 'normal',
            textWidth: 70,
            textTransform: 'uppercase',
            maxTextWidth: Number.MAX_VALUE,
            textHeight: 26,
            textAlign: 'auto',
            interLine: 1,
            maxLine: 3,
            whiteSpace: 'nowrap',
            showText: true,
            showIcon: true
        };
        return Button;
    }(Ui.Pressable));
    Ui.Button = Button;
    var DefaultButton = (function (_super) {
        __extends(DefaultButton, _super);
        function DefaultButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DefaultButton.style = {
            borderWidth: 1,
            background: '#444444',
            backgroundBorder: '#444444',
            foreground: 'rgba(250,250,250,1)'
        };
        return DefaultButton;
    }(Button));
    Ui.DefaultButton = DefaultButton;
    var FlatButton = (function (_super) {
        __extends(FlatButton, _super);
        function FlatButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FlatButton.style = {
            borderWidth: 1,
            background: 'rgba(250,250,250,0)',
            backgroundBorder: 'rgba(140,140,140,0)'
        };
        return FlatButton;
    }(Button));
    Ui.FlatButton = FlatButton;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ToggleButton = (function (_super) {
        __extends(ToggleButton, _super);
        function ToggleButton() {
            var _this = _super.call(this) || this;
            _this._isToggled = false;
            _this.toggled = new Core.Events();
            _this.untoggled = new Core.Events();
            _this.role = 'checkbox';
            _this.drawing.setAttribute('aria-checked', 'false');
            _this.pressed.connect(function () { return _this.onToggleButtonPress(); });
            return _this;
        }
        Object.defineProperty(ToggleButton.prototype, "ontoggled", {
            set: function (value) { this.toggled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "onuntoggled", {
            set: function (value) { this.untoggled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "isToggled", {
            get: function () {
                return this._isToggled;
            },
            set: function (value) {
                if (value)
                    this.onToggle();
                else
                    this.onUntoggle();
            },
            enumerable: true,
            configurable: true
        });
        ToggleButton.prototype.onToggleButtonPress = function () {
            if (!this.isToggled)
                this.onToggle();
            else
                this.onUntoggle();
        };
        ToggleButton.prototype.onToggle = function () {
            if (!this.isToggled) {
                this._isToggled = true;
                this.isActive = true;
                this.drawing.setAttribute('aria-checked', 'true');
                this.toggled.fire({ target: this });
            }
        };
        ToggleButton.prototype.onUntoggle = function () {
            if (this.isToggled) {
                this._isToggled = false;
                this.isActive = false;
                this.drawing.setAttribute('aria-checked', 'false');
                this.untoggled.fire({ target: this });
            }
        };
        ToggleButton.prototype.toggle = function () {
            this.onToggle();
        };
        ToggleButton.prototype.untoggle = function () {
            this.onUntoggle();
        };
        return ToggleButton;
    }(Ui.Button));
    Ui.ToggleButton = ToggleButton;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ActionButton = (function (_super) {
        __extends(ActionButton, _super);
        function ActionButton(init) {
            var _this = _super.call(this, init) || this;
            _this.pressed.connect(function () { return _this.onActionButtonDrop(); });
            new Ui.DropableWatcher({
                element: _this,
                ondropped: function () { return _this.onActionButtonDrop(); },
                types: [
                    {
                        type: 'all',
                        effects: function (data, dataTransfer) { return _this.onActionButtonEffect(data, dataTransfer); }
                    }
                ]
            });
            if (init) {
                if (init.action !== undefined)
                    _this.action = init.action;
                if (init.selection !== undefined)
                    _this.selection = init.selection;
            }
            return _this;
        }
        Object.defineProperty(ActionButton.prototype, "action", {
            set: function (action) {
                this._action = action;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActionButton.prototype, "selection", {
            set: function (selection) {
                this._selection = selection;
            },
            enumerable: true,
            configurable: true
        });
        ActionButton.prototype.onActionButtonEffect = function (data, dataTransfer) {
            if ('draggable' in dataTransfer) {
                var elements = this._selection.elements;
                var found = undefined;
                for (var i = 0; (found === undefined) && (i < elements.length); i++) {
                    if (elements[i] === dataTransfer.draggable)
                        found = elements[i];
                }
                if (found !== undefined)
                    return [{ action: 'run' }];
            }
            return [];
        };
        ActionButton.prototype.onActionButtonDrop = function () {
            var scope = this;
            if ('scope' in this._action)
                scope = this._action.scope;
            this._action.callback.call(scope, this._selection);
            this._selection.clear();
            return false;
        };
        ActionButton.style = {
            textTransform: 'uppercase',
            radius: 0,
            borderWidth: 0,
            foreground: 'rgba(250,250,250,1)',
            background: 'rgba(60,60,60,0)',
            backgroundBorder: 'rgba(60,60,60,0)',
            focusColor: '#f6caa2'
        };
        return ActionButton;
    }(Ui.Button));
    Ui.ActionButton = ActionButton;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ContextBarCloseButton = (function (_super) {
        __extends(ContextBarCloseButton, _super);
        function ContextBarCloseButton() {
            return _super.call(this) || this;
        }
        ContextBarCloseButton.style = {
            textWidth: 5,
            radius: 0,
            borderWidth: 0,
            foreground: 'rgba(250,250,250,1)',
            background: 'rgba(60,60,60,0)'
        };
        return ContextBarCloseButton;
    }(Ui.Button));
    Ui.ContextBarCloseButton = ContextBarCloseButton;
    var ContextBar = (function (_super) {
        __extends(ContextBar, _super);
        function ContextBar(init) {
            var _this = _super.call(this, init) || this;
            _this.onSelectionChange = function () {
                _this.closeButton.text = _this._selection.elements.length.toString();
                var actions = _this._selection.getActions();
                _this.actionsBox.clear();
                _this.actionsBox.append(new Ui.Element(), true);
                for (var actionName in actions) {
                    var action = actions[actionName];
                    if (action.hidden === true)
                        continue;
                    var button = new Ui.ActionButton();
                    button.icon = action.icon;
                    button.text = action.text;
                    button.action = action;
                    button.selection = _this._selection;
                    _this.actionsBox.append(button);
                }
            };
            _this.bg = new Ui.Rectangle();
            _this.append(_this.bg);
            var hbox = new Ui.HBox();
            hbox.spacing = 5;
            _this.append(hbox);
            _this.closeButton = new Ui.ContextBarCloseButton();
            _this.closeButton.icon = 'backarrow';
            hbox.append(_this.closeButton);
            _this.closeButton.pressed.connect(function () { return _this.onClosePress(); });
            var scroll = new Ui.ScrollingArea();
            hbox.append(scroll, true);
            _this.actionsBox = new Ui.HBox();
            _this.actionsBox.spacing = 5;
            scroll.content = _this.actionsBox;
            if (init) {
                if (init.selection !== undefined)
                    _this.selection = init.selection;
            }
            return _this;
        }
        Object.defineProperty(ContextBar.prototype, "selection", {
            get: function () {
                return this._selection;
            },
            set: function (selection) {
                if (this._selection != undefined)
                    this._selection.changed.disconnect(this.onSelectionChange);
                this._selection = selection;
                if (this._selection != undefined)
                    this._selection.changed.connect(this.onSelectionChange);
            },
            enumerable: true,
            configurable: true
        });
        ContextBar.prototype.onClosePress = function () {
            this._selection.clear();
        };
        ContextBar.prototype.onStyleChange = function () {
            this.bg.fill = this.getStyleProperty('background');
        };
        ContextBar.style = {
            background: '#07a0e5'
        };
        return ContextBar;
    }(Ui.LBox));
    Ui.ContextBar = ContextBar;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Popup = (function (_super) {
        __extends(Popup, _super);
        function Popup(init) {
            var _this = _super.call(this, init) || this;
            _this.posX = undefined;
            _this.posY = undefined;
            _this.attachedElement = undefined;
            _this.attachedBorder = undefined;
            _this._autoClose = true;
            _this._preferredWidth = undefined;
            _this._preferredHeight = undefined;
            _this.openClock = undefined;
            _this.isClosed = true;
            _this.closed = new Core.Events();
            _this.horizontalAlign = 'stretch';
            _this.verticalAlign = 'stretch';
            _this.popupSelection = new Ui.Selection();
            _this.shadow = new Ui.Pressable();
            _this.shadow.focusable = false;
            _this.shadow.drawing.style.cursor = 'inherit';
            _this.appendChild(_this.shadow);
            _this.background = new PopupBackground();
            _this.background.radius = 0;
            _this.background.fill = '#f8f8f8';
            _this.background.setTransformOrigin(0, 0);
            _this.appendChild(_this.background);
            _this.contentBox = new Ui.LBox();
            _this.contentBox.margin = 2;
            _this.contentBox.setTransformOrigin(0, 0);
            _this.appendChild(_this.contentBox);
            _this.scroll = new Ui.ScrollingArea();
            _this.contentBox.append(_this.scroll);
            _this.contextBox = new Ui.ContextBar();
            _this.contextBox.selection = _this.popupSelection;
            _this.contextBox.verticalAlign = 'top';
            _this.contextBox.hide(true);
            _this.contentBox.append(_this.contextBox);
            _this.popupSelection.changed.connect(function (e) { return _this.onPopupSelectionChange(e.target); });
            _this.shadow.pressed.connect(function (e) { return _this.onShadowPress(); });
            if (init) {
                if (init.preferredWidth !== undefined)
                    _this.preferredWidth = init.preferredWidth;
                if (init.preferredHeight !== undefined)
                    _this.preferredHeight = init.preferredHeight;
                if (init.autoClose !== undefined)
                    _this.autoClose = init.autoClose;
                if (init.content !== undefined)
                    _this.content = init.content;
            }
            return _this;
        }
        Object.defineProperty(Popup.prototype, "onclosed", {
            set: function (value) { this.closed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popup.prototype, "preferredWidth", {
            set: function (width) {
                this._preferredWidth = width;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popup.prototype, "preferredHeight", {
            set: function (height) {
                this._preferredHeight = height;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Popup.prototype.getSelectionHandler = function () {
            return this.popupSelection;
        };
        Object.defineProperty(Popup.prototype, "autoClose", {
            set: function (autoClose) {
                this._autoClose = autoClose;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popup.prototype, "content", {
            get: function () {
                return this.scroll.content;
            },
            set: function (content) {
                this.scroll.content = content;
            },
            enumerable: true,
            configurable: true
        });
        Popup.prototype.onShadowPress = function () {
            if (this._autoClose)
                this.close();
        };
        Popup.prototype.onOpenTick = function (clock, progress, delta) {
            var end = (progress >= 1);
            if (this.isClosed)
                progress = 1 - progress;
            this.opacity = progress;
            var arrowBorder = this.background.arrowBorder;
            if (arrowBorder === 'right') {
                this.background.transform = Ui.Matrix.createTranslate(20 * (1 - progress), 0);
                this.contentBox.transform = Ui.Matrix.createTranslate(20 * (1 - progress), 0);
            }
            else if (arrowBorder === 'left') {
                this.background.transform = Ui.Matrix.createTranslate(-20 * (1 - progress), 0);
                this.contentBox.transform = Ui.Matrix.createTranslate(-20 * (1 - progress), 0);
            }
            else if ((arrowBorder === 'top') || (arrowBorder === 'none')) {
                this.background.transform = Ui.Matrix.createTranslate(0, -20 * (1 - progress));
                this.contentBox.transform = Ui.Matrix.createTranslate(0, -20 * (1 - progress));
            }
            else if (arrowBorder === 'bottom') {
                this.background.transform = Ui.Matrix.createTranslate(0, 20 * (1 - progress));
                this.contentBox.transform = Ui.Matrix.createTranslate(0, 20 * (1 - progress));
            }
            if (end) {
                this.openClock.stop();
                this.openClock = undefined;
                if (this.isClosed) {
                    Ui.App.current.removeDialog(this);
                    this.enable();
                }
            }
        };
        Popup.prototype.onPopupSelectionChange = function (selection) {
            if (selection.elements.length === 0)
                this.contextBox.hide(true);
            else
                this.contextBox.show();
        };
        Popup.prototype.onStyleChange = function () {
            this.background.fill = this.getStyleProperty('background');
            this.shadow.drawing.style.backgroundColor = Ui.Color.create(this.getStyleProperty('shadow')).getCssRgba();
        };
        Popup.prototype.onChildInvalidateMeasure = function (child, type) {
            this.invalidateLayout();
        };
        Popup.prototype.onChildInvalidateArrange = function (child) {
            this.invalidateLayout();
        };
        Popup.prototype.open = function () {
            this.openPosOrElement();
        };
        Popup.prototype.openAt = function (posX, posY) {
            this.openPosOrElement(posX, posY);
        };
        Popup.prototype.openElement = function (element, position) {
            this.openPosOrElement(element, position);
        };
        Popup.prototype.openPosOrElement = function (posX, posY) {
            var _this = this;
            if (this.isClosed) {
                Ui.App.current.appendDialog(this);
                this.isClosed = false;
                this.attachedElement = undefined;
                this.posX = undefined;
                this.posY = undefined;
                if ((typeof (posX) == 'object') && (posX instanceof Ui.Element)) {
                    this.attachedElement = posX;
                    if ((posY !== undefined) && (typeof (posY) === 'string'))
                        this.attachedBorder = posY;
                    var point = this.attachedElement.pointToWindow(new Ui.Point(this.attachedElement.layoutWidth, this.attachedElement.layoutHeight / 2));
                    this.posX = point.x;
                    this.posY = point.y;
                }
                else if ((posX !== undefined) && (posY !== undefined)) {
                    this.posX = posX;
                    this.posY = posY;
                }
                else {
                    this.posX = undefined;
                    this.posY = undefined;
                }
                if (this.openClock === undefined) {
                    this.openClock = new Anim.Clock({
                        duration: 1, target: this, speed: 5,
                        ease: new Anim.PowerEase({ mode: 'out' })
                    });
                    this.openClock.timeupdate.connect(function (e) { return _this.onOpenTick(e.target, e.progress, e.deltaTick); });
                    this.opacity = 0;
                }
                this.invalidateArrange();
            }
        };
        Popup.prototype.close = function () {
            var _this = this;
            if (!this.isClosed) {
                this.isClosed = true;
                this.closed.fire({ target: this });
                this.disable();
                if (this.openClock === undefined) {
                    this.openClock = new Anim.Clock({
                        duration: 1, target: this, speed: 5,
                        ease: new Anim.PowerEase({ mode: 'out' })
                    });
                    this.openClock.timeupdate.connect(function (e) { return _this.onOpenTick(e.target, e.progress, e.deltaTick); });
                    this.openClock.begin();
                }
            }
        };
        Popup.prototype.measureCore = function (width, height) {
            var constraintWidth = Math.max(width - 40, 0);
            var constraintHeight = Math.max(height - 40, 0);
            if ((this._preferredWidth !== undefined) && (this._preferredWidth < constraintWidth))
                constraintWidth = this._preferredWidth;
            if ((this._preferredHeight !== undefined) && (this._preferredHeight < constraintHeight))
                constraintHeight = this._preferredHeight;
            this.background.measure(constraintWidth, constraintHeight);
            var size = this.contentBox.measure(constraintWidth, constraintHeight);
            size.width = Math.min(this._preferredWidth ? Math.max(size.width, this._preferredWidth) : size.width, width);
            size.height = Math.min(this._preferredHeight ? Math.max(size.height, this._preferredHeight) : size.height, height);
            if ((this.posX !== undefined) || (this.attachedElement !== undefined))
                return { width: Math.max(50, size.width), height: Math.max(50, size.height) };
            else
                return { width: Math.max(width, size.width + 40), height: Math.max(height, size.height + 40) };
        };
        Popup.prototype.arrangeCore = function (width, height) {
            if ((this.openClock !== undefined) && !this.openClock.isActive)
                this.openClock.begin();
            var x = 0;
            var y = 0;
            var point;
            var borders;
            var border;
            var i;
            this.shadow.arrange(0, 0, width, height);
            var usedWidth = Math.min(this._preferredWidth ? Math.max(this.contentBox.measureWidth, this._preferredWidth) : this.contentBox.measureWidth, width);
            var usedHeight = Math.min(this._preferredHeight ? Math.max(this.contentBox.measureHeight, this._preferredHeight) : this.contentBox.measureHeight, height);
            if (((this.posX === undefined) && (this.attachedElement === undefined)) || (width < 150) || (height < 150)) {
                this.setCenter(width, height);
            }
            else if (this.attachedElement !== undefined) {
                borders = ['right', 'left', 'top', 'bottom', 'center'];
                if (this.attachedBorder !== undefined)
                    borders.unshift(this.attachedBorder);
                for (i = 0; i < borders.length; i++) {
                    border = borders[i];
                    if (border === 'left') {
                        point = this.attachedElement.pointToWindow(new Ui.Point(0, this.attachedElement.layoutHeight / 2));
                        if (usedWidth + 10 < point.x) {
                            this.setLeft(point.x, point.y, width, height);
                            break;
                        }
                    }
                    else if (border === 'right') {
                        point = this.attachedElement.pointToWindow(new Ui.Point(this.attachedElement.layoutWidth, this.attachedElement.layoutHeight / 2));
                        if (usedWidth + point.x + 10 < width) {
                            this.setRight(point.x, point.y, width, height);
                            break;
                        }
                    }
                    else if (border === 'top') {
                        point = this.attachedElement.pointToWindow(new Ui.Point(this.attachedElement.layoutWidth / 2, 0));
                        if (usedHeight + 10 < point.y) {
                            this.setTop(point.x, point.y, width, height);
                            break;
                        }
                    }
                    else if (border === 'bottom') {
                        point = this.attachedElement.pointToWindow(new Ui.Point(this.attachedElement.layoutWidth / 2, this.attachedElement.layoutHeight));
                        if (usedHeight + 10 + point.y < height) {
                            this.setBottom(point.x, point.y, width, height);
                            break;
                        }
                    }
                    else {
                        this.setCenter(width, height);
                        break;
                    }
                }
            }
            else {
                borders = ['right', 'left', 'top', 'bottom', 'center'];
                if (this.attachedBorder !== undefined)
                    borders.unshift(this.attachedBorder);
                for (i = 0; i < borders.length; i++) {
                    border = borders[i];
                    if (border === 'left') {
                        if (usedWidth + 10 < this.posX) {
                            this.setLeft(this.posX, this.posY, width, height);
                            break;
                        }
                    }
                    else if (border === 'right') {
                        if (usedWidth + this.posX + 10 < width) {
                            this.setRight(this.posX, this.posY, width, height);
                            break;
                        }
                    }
                    else if (border === 'top') {
                        if (usedHeight + 10 < this.posY) {
                            this.setTop(this.posX, this.posY, width, height);
                            break;
                        }
                    }
                    else if (border === 'bottom') {
                        if (usedHeight + 10 + this.posY < height) {
                            this.setBottom(this.posX, this.posY, width, height);
                            break;
                        }
                    }
                    else {
                        this.setCenter(width, height);
                        break;
                    }
                }
            }
        };
        Popup.prototype.setRight = function (x, y, width, height) {
            var usedWidth = Math.min(this._preferredWidth ? Math.max(this.contentBox.measureWidth, this._preferredWidth) : this.contentBox.measureWidth, width - 40);
            var usedHeight = Math.min(this._preferredHeight ? Math.max(this.contentBox.measureHeight, this._preferredHeight) : this.contentBox.measureHeight, height - 40);
            var ofs = Math.max(10, Math.min(30, usedHeight / 2));
            var px = x + 10;
            var py = y - ofs;
            this.background.arrowBorder = 'left';
            if (py + usedHeight > height) {
                py = height - usedHeight;
                var offset = y - py;
                if (offset > usedHeight - 18)
                    offset = usedHeight - 18;
                this.background.arrowOffset = offset;
            }
            else
                this.background.arrowOffset = ofs;
            this.background.arrange(px - 10, py, usedWidth + 10, usedHeight);
            this.contentBox.arrange(px, py, usedWidth, usedHeight);
        };
        Popup.prototype.setLeft = function (x, y, width, height) {
            var usedWidth = Math.min(this._preferredWidth ? Math.max(this.contentBox.measureWidth, this._preferredWidth) : this.contentBox.measureWidth, width - 40);
            var usedHeight = Math.min(this._preferredHeight ? Math.max(this.contentBox.measureHeight, this._preferredHeight) : this.contentBox.measureHeight, height - 40);
            var ofs = Math.max(10, Math.min(30, usedHeight / 2));
            var px = x - (10 + usedWidth);
            var py = y - ofs;
            this.background.arrowBorder = 'right';
            if (py + usedHeight > height) {
                py = height - usedHeight;
                var offset = y - py;
                if (offset > usedHeight - 18)
                    offset = usedHeight - 18;
                this.background.arrowOffset = offset;
            }
            else
                this.background.arrowOffset = ofs;
            this.background.arrange(px, py, usedWidth + 10, usedHeight);
            this.contentBox.arrange(px, py, usedWidth, usedHeight);
        };
        Popup.prototype.setTop = function (x, y, width, height) {
            var usedWidth = Math.min(this._preferredWidth ? Math.max(this.contentBox.measureWidth, this._preferredWidth) : this.contentBox.measureWidth, width - 40);
            var usedHeight = Math.min(this._preferredHeight ? Math.max(this.contentBox.measureHeight, this._preferredHeight) : this.contentBox.measureHeight, height - 40);
            var py = y - usedHeight;
            var px = x - 30;
            this.background.arrowBorder = 'bottom';
            if (px + usedWidth > width) {
                px = width - usedWidth;
                var offset = x - px;
                if (offset > usedWidth - 18)
                    offset = usedWidth - 18;
                this.background.arrowOffset = offset;
            }
            else if (px < 2) {
                this.background.arrowOffset = x + 2;
                px = 2;
            }
            else
                this.background.arrowOffset = 30;
            this.background.arrange(px, py - 10, usedWidth, usedHeight + 10);
            this.contentBox.arrange(px, py - 10, usedWidth, usedHeight);
        };
        Popup.prototype.setBottom = function (x, y, width, height) {
            var usedWidth = Math.min(this._preferredWidth ? Math.max(this.contentBox.measureWidth, this._preferredWidth) : this.contentBox.measureWidth, width - 40);
            var usedHeight = Math.min(this._preferredHeight ? Math.max(this.contentBox.measureHeight, this._preferredHeight) : this.contentBox.measureHeight, height - 40);
            var py = y + 10;
            var px = x - 30;
            this.background.arrowBorder = 'top';
            if (px + usedWidth > width) {
                px = width - usedWidth;
                var offset = x - px;
                if (offset > usedWidth - 18)
                    offset = usedWidth - 18;
                this.background.arrowOffset = offset;
            }
            else if (px < 2) {
                this.background.arrowOffset = x + 2;
                px = 2;
            }
            else
                this.background.arrowOffset = 30;
            this.background.arrange(px, py - 10, usedWidth, usedHeight + 10);
            this.contentBox.arrange(px, py, usedWidth, usedHeight);
        };
        Popup.prototype.setCenter = function (width, height) {
            this.background.arrowBorder = 'none';
            var usedWidth = Math.min(this._preferredWidth ? Math.max(this.contentBox.measureWidth, this._preferredWidth) : this.contentBox.measureWidth, width - 40);
            var usedHeight = Math.min(this._preferredHeight ? Math.max(this.contentBox.measureHeight, this._preferredHeight) : this.contentBox.measureHeight, height - 40);
            var x = (width - usedWidth) / 2;
            var y = (height - usedHeight) / 2;
            this.background.arrange(x, y, usedWidth, usedHeight);
            this.contentBox.arrange(x, y, usedWidth, usedHeight);
        };
        Popup.style = {
            background: '#f8f8f8',
            shadow: 'rgba(0,0,0,0.15)'
        };
        return Popup;
    }(Ui.Container));
    Ui.Popup = Popup;
    var PopupBackground = (function (_super) {
        __extends(PopupBackground, _super);
        function PopupBackground() {
            var _this = _super.call(this) || this;
            _this._radius = 8;
            _this._arrowBorder = 'left';
            _this._arrowOffset = 30;
            _this.arrowSize = 10;
            _this.fill = 'black';
            return _this;
        }
        Object.defineProperty(PopupBackground.prototype, "arrowBorder", {
            get: function () {
                return this._arrowBorder;
            },
            set: function (arrowBorder) {
                if (this._arrowBorder != arrowBorder) {
                    this._arrowBorder = arrowBorder;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopupBackground.prototype, "arrowOffset", {
            get: function () {
                return this._arrowOffset;
            },
            set: function (offset) {
                if (this._arrowOffset != offset) {
                    this._arrowOffset = offset;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopupBackground.prototype, "radius", {
            set: function (radius) {
                if (this._radius != radius) {
                    this._radius = radius;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopupBackground.prototype, "fill", {
            set: function (fill) {
                if (this._fill != fill) {
                    this._fill = Ui.Color.create(fill);
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        PopupBackground.prototype.genPath = function (width, height, radius, arrowBorder, arrowSize, arrowOffset) {
            var v1;
            var v2;
            if (arrowBorder == 'none') {
                v1 = width - radius;
                v2 = height - radius;
                return 'M' + radius + ',0 L' + v1 + ',0 Q' + width + ',0 ' + width + ',' + radius + ' L' + width + ',' + v2 + ' Q' + width + ',' + height + ' ' + v1 + ',' + height + ' L' + radius + ',' + height + ' Q0,' + height + ' 0,' + v2 + ' L0,' + radius + ' Q0,0 ' + radius + ',0 z';
            }
            else if (arrowBorder == 'left') {
                v1 = width - this._radius;
                v2 = height - this._radius;
                return 'M' + (radius + arrowSize) + ',0 L' + v1 + ',0 Q' + width + ',0 ' + width + ',' + radius + ' L' + width + ',' + v2 + ' Q' + width + ',' + height + ' ' + v1 + ',' + height + ' L' + (radius + arrowSize) + ',' + height + ' Q' + arrowSize + ',' + height + ' ' + arrowSize + ',' + v2 + ' L' + arrowSize + ',' + (arrowOffset + arrowSize) + ' L0,' + arrowOffset + ' L' + arrowSize + ',' + (arrowOffset - arrowSize) + ' L' + arrowSize + ',' + radius + ' Q' + arrowSize + ',0 ' + (radius + arrowSize) + ',0 z';
            }
            else if (arrowBorder == 'right') {
                v1 = width - (this._radius + arrowSize);
                v2 = height - this._radius;
                return 'M' + radius + ',0 L' + v1 + ',0 Q' + (width - arrowSize) + ',0 ' + (width - arrowSize) + ',' + radius + ' L' + (width - arrowSize) + ',' + (arrowOffset - arrowSize) + ' L' + width + ',' + arrowOffset + ' L' + (width - arrowSize) + ',' + (arrowOffset + arrowSize) + ' L ' + (width - arrowSize) + ',' + v2 + ' Q' + (width - arrowSize) + ',' + height + ' ' + v1 + ',' + height + ' L' + radius + ',' + height + ' Q0,' + height + ' 0,' + v2 + ' L0,' + radius + ' Q0,0 ' + radius + ',0 z';
            }
            else if (arrowBorder == 'top') {
                v1 = width - this._radius;
                v2 = height - this._radius;
                return 'M' + radius + ',' + arrowSize + ' L' + (arrowOffset - arrowSize) + ',' + arrowSize + ' L' + arrowOffset + ',0 L' + (arrowOffset + arrowSize) + ',' + arrowSize + ' L' + v1 + ',' + arrowSize + ' Q' + width + ',' + arrowSize + ' ' + width + ',' + (arrowSize + radius) + ' L' + width + ',' + v2 + ' Q' + width + ',' + height + ' ' + v1 + ',' + height + ' L' + radius + ',' + height + ' Q0,' + height + ' 0,' + v2 + ' L0,' + (arrowSize + radius) + ' Q0,' + arrowSize + ' ' + radius + ',' + arrowSize + ' z';
            }
            else if (arrowBorder == 'bottom') {
                v1 = width - this._radius;
                v2 = height - (this._radius + arrowSize);
                return 'M' + radius + ',0 L' + v1 + ',0 Q' + width + ',0 ' + width + ',' + radius + ' L' + width + ',' + v2 + ' Q' + width + ',' + (height - arrowSize) + ' ' + v1 + ',' + (height - arrowSize) + ' L ' + (arrowOffset + arrowSize) + ',' + (height - arrowSize) + ' L' + arrowOffset + ',' + height + ' L' + (arrowOffset - arrowSize) + ',' + (height - arrowSize) + ' L' + radius + ',' + (height - arrowSize) + ' Q0,' + (height - arrowSize) + ' 0,' + v2 + ' L0,' + radius + ' Q0,0 ' + radius + ',0 z';
            }
        };
        PopupBackground.prototype.updateCanvas = function (ctx) {
            var width = this.layoutWidth;
            var height = this.layoutHeight;
            if (this.arrowBorder == 'none') {
                ctx.fillStyle = 'rgba(0,0,0,0.1)';
                ctx.fillRect(0, 0, width, height);
                ctx.fillStyle = 'rgba(0,0,0,0.5)';
                ctx.fillRect(1, 1, width - 2, height - 2);
                ctx.fillStyle = this._fill.getCssRgba();
                ctx.fillRect(2, 2, width - 4, height - 4);
            }
            else {
                ctx.fillStyle = 'rgba(0,0,0,0.1)';
                ctx.svgPath(this.genPath(width, height, this._radius, this.arrowBorder, this.arrowSize, this._arrowOffset));
                ctx.fill();
                ctx.save();
                ctx.fillStyle = 'rgba(0,0,0,0.5)';
                ctx.translate(1, 1);
                ctx.svgPath(this.genPath(width - 2, height - 2, Math.max(0, this._radius - 1), this.arrowBorder, this.arrowSize - 1, this._arrowOffset - 1));
                ctx.fill();
                ctx.restore();
                ctx.fillStyle = this._fill.getCssRgba();
                ctx.translate(2, 2);
                ctx.svgPath(this.genPath(width - 4, height - 4, Math.max(0, this._radius - 2), this.arrowBorder, this.arrowSize - 1, this._arrowOffset - 2));
                ctx.fill();
            }
        };
        return PopupBackground;
    }(Ui.CanvasElement));
    Ui.PopupBackground = PopupBackground;
    var MenuPopup = (function (_super) {
        __extends(MenuPopup, _super);
        function MenuPopup(init) {
            return _super.call(this, init) || this;
        }
        return MenuPopup;
    }(Popup));
    Ui.MenuPopup = MenuPopup;
    var MenuPopupSeparator = (function (_super) {
        __extends(MenuPopupSeparator, _super);
        function MenuPopupSeparator() {
            return _super.call(this) || this;
        }
        return MenuPopupSeparator;
    }(Ui.Separator));
    Ui.MenuPopupSeparator = MenuPopupSeparator;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var MenuToolBarPopup = (function (_super) {
        __extends(MenuToolBarPopup, _super);
        function MenuToolBarPopup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MenuToolBarPopup;
    }(Ui.MenuPopup));
    Ui.MenuToolBarPopup = MenuToolBarPopup;
    var MenuToolBarButton = (function (_super) {
        __extends(MenuToolBarButton, _super);
        function MenuToolBarButton() {
            var _this = _super.call(this) || this;
            _this.icon = 'burger';
            return _this;
        }
        MenuToolBarButton.style = {
            backgroundBorder: 'rgba(140,140,140,0)'
        };
        return MenuToolBarButton;
    }(Ui.Button));
    Ui.MenuToolBarButton = MenuToolBarButton;
    var MenuToolBar = (function (_super) {
        __extends(MenuToolBar, _super);
        function MenuToolBar(init) {
            var _this = _super.call(this, init) || this;
            _this._paddingTop = 0;
            _this._paddingBottom = 0;
            _this._paddingLeft = 0;
            _this._paddingRight = 0;
            _this.star = 0;
            _this.measureLock = undefined;
            _this.items = undefined;
            _this.menuButton = undefined;
            _this._itemsAlign = 'left';
            _this._menuPosition = 'right';
            _this._uniform = false;
            _this.uniformSize = 0;
            _this._spacing = 0;
            _this.itemsWidth = 0;
            _this.keepItems = undefined;
            _this.menuNeeded = false;
            _this.bg = undefined;
            _this.items = [];
            _this.bg = new Ui.Rectangle();
            _this.appendChild(_this.bg);
            _this.menuButton = new Ui.MenuToolBarButton();
            _this.menuButton.pressed.connect(function () { return _this.onMenuButtonPress(); });
            _this.appendChild(_this.menuButton);
            if (init) {
                if (init.paddingTop !== undefined)
                    _this.paddingTop = init.paddingTop;
                if (init.paddingBottom !== undefined)
                    _this.paddingBottom = init.paddingBottom;
                if (init.paddingLeft !== undefined)
                    _this.paddingLeft = init.paddingLeft;
                if (init.paddingRight !== undefined)
                    _this.paddingRight = init.paddingRight;
                if (init.itemsAlign !== undefined)
                    _this.itemsAlign = init.itemsAlign;
                if (init.menuPosition !== undefined)
                    _this.menuPosition = init.menuPosition;
                if (init.uniform !== undefined)
                    _this.uniform = init.uniform;
                if (init.spacing !== undefined)
                    _this.spacing = init.spacing;
            }
            return _this;
        }
        Object.defineProperty(MenuToolBar.prototype, "uniform", {
            get: function () {
                return this._uniform;
            },
            set: function (uniform) {
                if (this._uniform !== uniform) {
                    this._uniform = uniform;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "menuPosition", {
            get: function () {
                return this._menuPosition;
            },
            set: function (menuPosition) {
                if (this._menuPosition !== menuPosition) {
                    this._menuPosition = menuPosition;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "itemsAlign", {
            get: function () {
                return this._itemsAlign;
            },
            set: function (align) {
                if (this._itemsAlign !== align) {
                    this._itemsAlign = align;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "logicalChildren", {
            get: function () {
                return this.items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "padding", {
            set: function (padding) {
                this.paddingTop = padding;
                this.paddingBottom = padding;
                this.paddingLeft = padding;
                this.paddingRight = padding;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "paddingTop", {
            get: function () {
                return this._paddingTop;
            },
            set: function (paddingTop) {
                if (this._paddingTop !== paddingTop) {
                    this._paddingTop = paddingTop;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "paddingBottom", {
            get: function () {
                return this._paddingBottom;
            },
            set: function (paddingBottom) {
                if (this._paddingBottom !== paddingBottom) {
                    this._paddingBottom = paddingBottom;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "paddingLeft", {
            get: function () {
                return this._paddingLeft;
            },
            set: function (paddingLeft) {
                if (this._paddingLeft !== paddingLeft) {
                    this._paddingLeft = paddingLeft;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "paddingRight", {
            get: function () {
                return this._paddingRight;
            },
            set: function (paddingRight) {
                if (this._paddingRight !== paddingRight) {
                    this._paddingRight = paddingRight;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MenuToolBar.prototype, "spacing", {
            get: function () {
                return this._spacing;
            },
            set: function (spacing) {
                if (this._spacing !== spacing) {
                    this._spacing = spacing;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        MenuToolBar.prototype.append = function (child, resizable) {
            if (resizable === void 0) { resizable = false; }
            if (resizable !== undefined)
                child.resizable = resizable === true;
            this.items.push(child);
            this.invalidateMeasure();
        };
        MenuToolBar.prototype.prepend = function (child, resizable) {
            if (resizable === void 0) { resizable = false; }
            if (resizable !== undefined)
                child.resizable = resizable === true;
            this.items.unshift(child);
            this.invalidateMeasure();
        };
        MenuToolBar.prototype.remove = function (child) {
            var i = 0;
            while ((i < this.items.length) && (this.items[i] !== child)) {
                i++;
            }
            if (i < this.items.length) {
                this.items.splice(i, 1);
                if ((child.parent === this) && (child.parent instanceof Ui.Container))
                    child.parent.removeChild(child);
                this.invalidateMeasure();
            }
        };
        MenuToolBar.prototype.moveAt = function (child, position) {
            if (position < 0)
                position = this.items.length + position;
            if (position < 0)
                position = 0;
            if (position >= this.items.length)
                position = this.items.length;
            var i = 0;
            while ((i < this.items.length) && (this.items[i] !== child)) {
                i++;
            }
            if (i < this.items.length) {
                this.items.splice(i, 1);
                this.items.splice(position, 0, child);
            }
            this.onChildInvalidateMeasure(child, 'move');
        };
        MenuToolBar.prototype.insertAt = function (child, position, resizable) {
            if (resizable !== undefined)
                child.resizable = resizable === true;
            position = Math.max(0, Math.min(position, this.items.length));
            this.items.splice(position, 0, child);
            this.invalidateMeasure();
        };
        MenuToolBar.prototype.setContent = function (content) {
            if (content === undefined)
                this.clear();
            else if (typeof (content) === 'object') {
                if (content.constructor !== Array) {
                    content = [content];
                }
                for (var i = 0; i < this.items.length; i++) {
                    var found = false;
                    for (var i2 = 0; (found === false) && (i2 < content.length); i2++) {
                        found = (this.items[i] === content[i2]);
                    }
                    if ((found === false) && (this.items[i].parent === this))
                        this.removeChild(this.items[i]);
                }
                this.items = content;
                this.invalidateMeasure();
            }
        };
        MenuToolBar.prototype.onMenuButtonPress = function () {
            var dialog = new Ui.MenuToolBarPopup();
            var vbox = new Ui.VBox();
            dialog.content = vbox;
            for (var i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                if (item.parent !== this) {
                    vbox.append(item);
                    if (i < this.items.length - 1)
                        vbox.append(new Ui.MenuPopupSeparator());
                }
            }
            dialog.openElement(this.menuButton, 'bottom');
        };
        MenuToolBar.prototype.clear = function () {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].parent === this)
                    this.items[i].parent.removeChild(this.items[i]);
            }
            this.items = [];
            this.invalidateMeasure();
        };
        MenuToolBar.prototype.measureCore = function (width, height) {
            var left = this.paddingLeft;
            var right = this.paddingRight;
            var top = this.paddingTop;
            var bottom = this.paddingBottom;
            var constraintWidth = Math.max(0, width - (left + right));
            var constraintHeight = Math.max(0, height - (top + bottom));
            var size;
            var i;
            this.bg.measure(width, height);
            this.measureLock = true;
            var buttonSize = this.menuButton.measure(0, 0);
            var minSizes = [];
            for (i = 0; i < this.items.length; i++) {
                var item = this.items[i];
                if (item.parent !== this) {
                    if ((item.parent != undefined) && (item.parent instanceof Ui.Container))
                        item.parent.removeChild(item);
                    this.appendChild(item);
                }
                minSizes.push(item.measure(0, 0));
            }
            this.keepItems = [];
            var totalWidth = 0;
            var countResizable = 0;
            var maxItemWidth = 0;
            var maxItemHeight = buttonSize.height;
            var minItemsSize = 0;
            i = (this._menuPosition === 'left') ? (i = this.items.length - 1) : 0;
            while ((i >= 0) && (i < this.items.length)) {
                var minSize = minSizes[i];
                if (totalWidth + minSize.width + this._spacing > constraintWidth)
                    break;
                totalWidth += minSize.width + this._spacing;
                if (totalWidth + buttonSize.width > constraintWidth)
                    break;
                if (this._menuPosition === 'left')
                    this.keepItems.unshift(this.items[i]);
                else
                    this.keepItems.push(this.items[i]);
                if (this.items[i].resizable)
                    countResizable++;
                else {
                    minItemsSize += minSize.width;
                    if (minSize.height > maxItemHeight)
                        maxItemHeight = minSize.height;
                }
                if (minSize.width > maxItemWidth)
                    maxItemWidth = minSize.width;
                if (this._menuPosition === 'left')
                    i--;
                else
                    i++;
            }
            if (totalWidth > 0)
                totalWidth -= this._spacing;
            this.menuNeeded = this.keepItems.length !== this.items.length;
            var constraintSize = constraintWidth;
            if (this.menuNeeded) {
                constraintSize -= buttonSize.width + this._spacing;
                while ((i >= 0) && (i < this.items.length)) {
                    this.removeChild(this.items[i]);
                    if (this._menuPosition === 'left')
                        i--;
                    else
                        i++;
                }
            }
            if (this._uniform) {
                if ((this.keepItems.length * (maxItemWidth + this._spacing)) - this._spacing <= constraintWidth) {
                    for (i = 0; i < this.keepItems.length; i++)
                        this.keepItems[i].measure(maxItemWidth, maxItemHeight);
                    this.uniformSize = maxItemWidth;
                    size = { width: ((this.keepItems.length * (maxItemWidth + this._spacing)) - this._spacing), height: maxItemHeight };
                }
                else {
                    this.uniformSize = undefined;
                    size = { width: totalWidth, height: maxItemHeight };
                }
            }
            else {
                if (countResizable > 0) {
                    var remainWidth = constraintSize - minItemsSize - ((this.keepItems.length - 1) * this._spacing);
                    var starFound = true;
                    var star = remainWidth / countResizable;
                    do {
                        starFound = true;
                        for (i = 0; i < this.keepItems.length; i++) {
                            var child = this.keepItems[i];
                            if (child.resizable) {
                                if (!child.menutoolbarStarDone) {
                                    size = child.measure(star, constraintHeight);
                                    if (size.height > maxItemHeight)
                                        maxItemHeight = size.height;
                                    if (size.width > star) {
                                        child.menutoolbarStarDone = true;
                                        starFound = false;
                                        remainWidth -= size.width;
                                        minItemsSize += size.width;
                                        countResizable--;
                                        star = remainWidth / countResizable;
                                        break;
                                    }
                                }
                            }
                        }
                    } while (!starFound);
                    minItemsSize += this._spacing * (this.keepItems.length - 1);
                    if (countResizable > 0) {
                        minItemsSize += star * countResizable;
                        this.star = star;
                    }
                    else
                        this.star = 0;
                    size = { width: minItemsSize, height: maxItemHeight };
                }
                else
                    size = { width: totalWidth, height: maxItemHeight };
            }
            if (this.menuNeeded)
                size.width += buttonSize.width + this._spacing;
            size.width += left + right;
            size.height += top + bottom;
            this.measureLock = undefined;
            return size;
        };
        MenuToolBar.prototype.arrangeCore = function (width, height) {
            this.bg.arrange(0, 0, width, height);
            var left = this._paddingLeft;
            var right = this._paddingRight;
            var top = this._paddingTop;
            var bottom = this._paddingBottom;
            width -= left + right;
            height -= top + bottom;
            var x = left;
            var y = top;
            var first = true;
            if (this._itemsAlign !== 'left')
                x = width - this.measureWidth;
            if (this.menuNeeded && (this._menuPosition === 'left')) {
                first = false;
                this.menuButton.arrange(x, y, this.menuButton.measureWidth, height);
                x += this.menuButton.measureWidth;
            }
            for (var i = 0; i < this.keepItems.length; i++) {
                var item = this.keepItems[i];
                if (first)
                    first = false;
                else
                    x += this._spacing;
                var itemWidth = void 0;
                if (this._uniform && (this.uniformSize !== undefined))
                    itemWidth = this.uniformSize;
                else {
                    itemWidth = item.measureWidth;
                    if (item.resizable && (itemWidth < this.star))
                        itemWidth = this.star;
                }
                item.arrange(x, y, itemWidth, height);
                x += itemWidth;
            }
            if (this.menuNeeded && (this._menuPosition !== 'left')) {
                if (first)
                    first = false;
                else
                    x += this._spacing;
                this.menuButton.arrange(x, y, this.menuButton.measureWidth, height);
            }
            if (!this.menuNeeded)
                this.menuButton.drawing.style.visibility = 'hidden';
            else
                this.menuButton.drawing.style.visibility = '';
        };
        MenuToolBar.prototype.onChildInvalidateMeasure = function (child, event) {
            if (this.measureLock !== true)
                _super.prototype.onChildInvalidateMeasure.call(this, child, event);
        };
        MenuToolBar.prototype.onStyleChange = function () {
            this.bg.fill = this.getStyleProperty('background');
        };
        MenuToolBar.style = {
            background: 'rgba(250, 250, 250, 0)'
        };
        return MenuToolBar;
    }(Ui.Container));
    Ui.MenuToolBar = MenuToolBar;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var App = (function (_super) {
        __extends(App, _super);
        function App(init) {
            var _this = _super.call(this, init) || this;
            _this.updateTask = false;
            _this._loaded = false;
            _this.focusElement = undefined;
            _this.arguments = undefined;
            _this._ready = false;
            _this.orientation = 0;
            _this.webApp = true;
            _this.lastArrangeHeight = 0;
            _this.windowWidth = 0;
            _this.windowHeight = 0;
            _this.dialogsFocus = [];
            _this.resized = new Core.Events();
            _this.ready = new Core.Events();
            _this.parentmessage = new Core.Events();
            _this.orientationchanged = new Core.Events();
            _this.update = function () {
                var innerWidth = document.body.clientWidth;
                var innerHeight = document.body.clientHeight;
                _this.updateTask = false;
                if ((_this.windowWidth !== innerWidth) || (_this.windowHeight !== innerHeight)) {
                    _this.windowWidth = innerWidth;
                    _this.windowHeight = innerHeight;
                    _this.resized.fire({ target: _this, width: _this.windowWidth, height: _this.windowHeight });
                    _this.invalidateLayout();
                }
                var layoutList = _this.layoutList;
                _this.layoutList = undefined;
                while (layoutList != undefined) {
                    var current = layoutList;
                    layoutList = layoutList.layoutNext;
                    current.layoutValid = true;
                    current.layoutNext = undefined;
                    current.updateLayout(_this.windowWidth, _this.windowHeight);
                }
                var drawList = _this.drawList;
                _this.drawList = undefined;
                while (drawList != undefined) {
                    var next = drawList.drawNext;
                    drawList.drawNext = undefined;
                    drawList.draw();
                    drawList = next;
                }
            };
            var args;
            _this.clipToBounds = true;
            Ui.App.current = _this;
            _this.drawing.style.cursor = 'default';
            _this.selection = new Ui.Selection();
            _this.selection.changed.connect(function (e) { return _this.onSelectionChange(e.target); });
            if ((window.location.search !== undefined) && (window.location.search !== '')) {
                var base64 = void 0;
                args = {};
                var tab = window.location.search.substring(1).split('&');
                for (var i = 0; i < tab.length; i++) {
                    var tab2 = tab[i].split('=');
                    if (tab2.length == 2) {
                        var key = decodeURIComponent(tab2[0]);
                        var val = decodeURIComponent(tab2[1]);
                        if (key === 'base64')
                            base64 = JSON.parse(Core.Util.fromBase64(val));
                        else
                            args[key] = val;
                    }
                }
                if (base64 !== undefined) {
                    _this.arguments = base64;
                    for (var prop in args)
                        _this.arguments[prop] = args[prop];
                }
                else
                    _this.arguments = args;
            }
            else
                _this.arguments = {};
            if (_this.arguments.remotedebug !== undefined) {
                args = _this.arguments.remotedebug.split(':');
                new Core.RemoteDebug({ host: args[0], port: args[1] });
            }
            _this.contentBox = new Ui.VBox();
            _this.appendChild(_this.contentBox);
            _this.setTransformOrigin(0, 0);
            window.addEventListener('load', function () { return _this.onWindowLoad(); });
            window.addEventListener('resize', function (e) { return _this.onWindowResize(e); });
            window.addEventListener('keyup', function (e) { return _this.onWindowKeyUp(e); });
            window.addEventListener('focus', function (event) {
                if (event.target == undefined)
                    return;
                _this.focusElement = event.target;
            }, true);
            window.addEventListener('blur', function (event) {
                _this.focusElement = undefined;
            }, true);
            window.addEventListener('dragstart', function (event) { return event.preventDefault(); });
            window.addEventListener('dragenter', function (event) { event.preventDefault(); return false; });
            window.addEventListener('dragover', function (event) {
                event.dataTransfer.dropEffect = 'none';
                event.preventDefault();
                return false;
            });
            window.addEventListener('drop', function (event) { event.preventDefault(); return false; });
            if ('onorientationchange' in window)
                window.addEventListener('orientationchange', function (e) { return _this.onOrientationChange(e); });
            window.addEventListener('message', function (e) { return _this.onMessage(e); });
            if (window['loaded'] === true)
                _this.onWindowLoad();
            if (init) {
                if (init.content !== undefined)
                    _this.content = init.content;
            }
            return _this;
        }
        Object.defineProperty(App.prototype, "onresized", {
            set: function (value) { this.resized.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(App.prototype, "onready", {
            set: function (value) { this.ready.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(App.prototype, "onparentmessage", {
            set: function (value) { this.parentmessage.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(App.prototype, "onorientationchanged", {
            set: function (value) { this.orientationchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        App.prototype.setWebApp = function (webApp) {
            this.webApp = webApp;
        };
        App.prototype.getSelectionHandler = function () {
            return this.selection;
        };
        App.prototype.forceInvalidateMeasure = function (element) {
            if (element === undefined)
                element = this;
            if (element instanceof Ui.Container)
                for (var i = 0; i < element.children.length; i++)
                    this.forceInvalidateMeasure(element.children[i]);
            element.invalidateMeasure();
            if ('invalidateTextMeasure' in element)
                element.invalidateTextMeasure();
        };
        App.prototype.requireFont = function (fontFamily, fontWeight) {
            var _this = this;
            var fontKey = fontFamily + ':' + fontWeight;
            if (this.requireFonts === undefined)
                this.requireFonts = {};
            if (!this.requireFonts[fontKey]) {
                var test = false;
                if (this.isReady)
                    test = Ui.Label.isFontAvailable(fontFamily, fontWeight);
                this.requireFonts[fontKey] = test;
                if (test)
                    this.forceInvalidateMeasure(this);
                else if (this.isReady && !test && (this.testFontTask === undefined))
                    this.testFontTask = new Core.DelayedTask(0.25, function () { return _this.testRequireFonts(); });
            }
        };
        App.prototype.testRequireFonts = function () {
            var _this = this;
            var allDone = true;
            for (var fontKey in this.requireFonts) {
                var test = this.requireFonts[fontKey];
                if (!test) {
                    var fontTab = fontKey.split(':');
                    test = Ui.Label.isFontAvailable(fontTab[0], fontTab[1]);
                    if (test) {
                        this.requireFonts[fontKey] = true;
                        var app = this;
                        this.forceInvalidateMeasure(this);
                    }
                    else
                        allDone = false;
                }
            }
            if (!allDone)
                this.testFontTask = new Core.DelayedTask(0.25, function () { return _this.testRequireFonts(); });
            else
                this.testFontTask = undefined;
        };
        App.prototype.checkWindowSize = function () {
            var innerWidth = document.body.clientWidth;
            var innerHeight = document.body.clientHeight;
            if ((innerWidth !== this.layoutWidth) || (innerHeight !== this.layoutHeight))
                this.invalidateMeasure();
        };
        App.prototype.getOrientation = function () {
            return this.orientation;
        };
        App.prototype.measureCore = function (width, height) {
            var minWidth = 0;
            var minHeight = 0;
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var child = _a[_i];
                var size = child.measure(width, height);
                if (size.width > minWidth)
                    minWidth = size.width;
                if (size.height > minHeight)
                    minHeight = size.height;
            }
            return { width: minWidth, height: minHeight };
        };
        App.prototype.onSelectionChange = function (selection) {
        };
        App.prototype.onWindowLoad = function () {
            var meta;
            var style;
            if (Core.Navigator.iPad || Core.Navigator.iPhone || Core.Navigator.Android) {
                if (this.webApp) {
                    meta = document.createElement('meta');
                    meta.name = 'apple-mobile-web-app-capable';
                    meta.content = 'yes';
                    document.getElementsByTagName("head")[0].appendChild(meta);
                    meta = document.createElement('meta');
                    meta.name = 'apple-mobile-web-app-status-bar-style';
                    meta.content = 'black';
                    document.getElementsByTagName("head")[0].appendChild(meta);
                    meta = document.createElement('meta');
                    meta.name = 'mobile-web-app-capable';
                    meta.content = 'yes';
                    document.getElementsByTagName("head")[0].appendChild(meta);
                }
            }
            meta = document.createElement('meta');
            meta.name = 'viewport';
            meta.content = 'width=device-width, initial-scale=1.0, minimum-scale=1';
            document.getElementsByTagName("head")[0].appendChild(meta);
            if (Core.Navigator.isWebkit) {
                style = document.createElement('style');
                style.type = 'text/css';
                style.innerHTML = '* { -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }';
                document.getElementsByTagName('head')[0].appendChild(style);
            }
            else if (Core.Navigator.isIE) {
                style = document.createElement('style');
                style.type = 'text/css';
                style.innerHTML =
                    '@-ms-viewport { width: device-width; } ' +
                        'body { -ms-content-zooming: none; } ';
                document.getElementsByTagName('head')[0].appendChild(style);
            }
            this._loaded = true;
            this.onReady();
        };
        App.prototype.onWindowResize = function (event) {
            this.checkWindowSize();
        };
        App.prototype.onOrientationChange = function (event) {
            this.orientation = window.orientation;
            this.orientationchanged.fire({ target: this, orientation: this.orientation });
            this.checkWindowSize();
        };
        Object.defineProperty(App.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (this._content !== content) {
                    if (this._content !== undefined)
                        this.contentBox.remove(this._content);
                    if (content !== undefined)
                        this.contentBox.prepend(content, true);
                    this._content = content;
                }
            },
            enumerable: true,
            configurable: true
        });
        App.prototype.getFocusElement = function () {
            return this.focusElement;
        };
        App.prototype.appendDialog = function (dialog) {
            dialog.invalidateLayout();
            if (this.dialogs === undefined) {
                this.dialogs = new Ui.LBox();
                this.dialogs.eventsHidden = true;
                if (this.topLayers !== undefined)
                    this.insertChildBefore(this.dialogs, this.topLayers);
                else
                    this.appendChild(this.dialogs);
            }
            this.dialogsFocus.push(this.focusElement);
            this.dialogs.append(dialog);
            this.contentBox.disable();
            for (var i = 0; i < this.dialogs.children.length - 1; i++)
                this.dialogs.children[i].disable();
        };
        App.prototype.removeDialog = function (dialog) {
            if (this.dialogs !== undefined) {
                var dialogFocus = this.dialogsFocus.pop();
                this.dialogs.remove(dialog);
                dialog.layoutValid = true;
                if (this.dialogs.children.length === 0) {
                    this.removeChild(this.dialogs);
                    this.dialogs = undefined;
                    this.contentBox.enable();
                }
                else if (this.dialogs.lastChild)
                    this.dialogs.lastChild.enable();
                if (dialogFocus && dialogFocus.focus && (typeof (dialogFocus.focus) == 'function'))
                    dialogFocus.focus();
            }
        };
        App.prototype.appendTopLayer = function (layer) {
            if (this.topLayers === undefined) {
                this.topLayers = new Ui.LBox();
                this.topLayers.eventsHidden = true;
                this.appendChild(this.topLayers);
            }
            this.topLayers.append(layer);
        };
        App.prototype.removeTopLayer = function (layer) {
            if (this.topLayers !== undefined) {
                this.topLayers.remove(layer);
                if (this.topLayers.children.length === 0) {
                    this.removeChild(this.topLayers);
                    this.topLayers = undefined;
                }
            }
        };
        App.prototype.getArguments = function () {
            return this.arguments;
        };
        Object.defineProperty(App.prototype, "isReady", {
            get: function () {
                return this._ready;
            },
            enumerable: true,
            configurable: true
        });
        App.prototype.onReady = function () {
            if (this._loaded) {
                document.documentElement.style.position = 'absolute';
                document.documentElement.style.padding = '0px';
                document.documentElement.style.margin = '0px';
                document.documentElement.style.border = '0px solid black';
                document.documentElement.style.width = '100%';
                document.documentElement.style.height = '100%';
                document.body.style.position = 'absolute';
                document.body.style.overflow = 'hidden';
                document.body.style.padding = '0px';
                document.body.style.margin = '0px';
                document.body.style.border = '0px solid black';
                document.body.style.outline = 'none';
                document.body.style.width = '100%';
                document.body.style.height = '100%';
                document.body.appendChild(this.drawing);
                if ((this.requireFonts !== undefined) && (this.testFontTask === undefined))
                    this.testRequireFonts();
                this.isLoaded = true;
                this.parentVisible = true;
                this.ready.fire({ target: this });
                this._ready = true;
                if ((this.updateTask === false) && this._ready) {
                    this.updateTask = true;
                    requestAnimationFrame(this.update);
                }
                new Ui.WheelManager(this);
                new Ui.DragNativeManager(this);
            }
        };
        App.prototype.onWindowKeyUp = function (event) {
            var key = event.which;
            if ((key == 27) && (this.dialogs !== undefined) && (this.dialogs.children.length > 0)) {
                var element = this.dialogs.children[this.dialogs.children.length - 1];
                if (element instanceof Ui.Dialog) {
                    var dialog = element;
                    if (dialog.dialogSelection.watchers.length > 0)
                        dialog.dialogSelection.watchers = [];
                    else
                        dialog.close();
                }
                else if (element instanceof Ui.Popup) {
                    var popup = element;
                    if (popup.popupSelection.watchers.length > 0)
                        popup.popupSelection.watchers = [];
                    else
                        popup.close();
                }
                event.preventDefault();
                event.stopPropagation();
            }
        };
        App.prototype.onLoad = function () {
            this.onInternalStyleChange();
            _super.prototype.onLoad.call(this);
        };
        App.prototype.onMessage = function (event) {
            if (parent === event.source) {
                event.preventDefault();
                event.stopPropagation();
                var msg = JSON.parse(event.data);
                this.parentmessage.fire({ target: this, message: msg });
            }
        };
        App.prototype.sendMessageToParent = function (msg) {
            parent.postMessage(msg.serialize(), "*");
        };
        App.prototype.findFocusableDiv = function (current) {
            if (('tabIndex' in current) && (current.tabIndex >= 0))
                return current;
            if ('childNodes' in current) {
                for (var i = 0; i < current.childNodes.length; i++) {
                    var res = this.findFocusableDiv(current.childNodes[i]);
                    if (res !== undefined)
                        return res;
                }
            }
            return undefined;
        };
        App.prototype.enqueueDraw = function (element) {
            element.drawNext = this.drawList;
            this.drawList = element;
            if ((this.updateTask === false) && this._ready) {
                this.updateTask = true;
                setTimeout(this.update, 0);
            }
        };
        App.prototype.enqueueLayout = function (element) {
            element.layoutNext = this.layoutList;
            this.layoutList = element;
            if ((this.updateTask === false) && this._ready) {
                this.updateTask = true;
                requestAnimationFrame(this.update);
            }
        };
        App.prototype.handleScrolling = function (drawing) {
            var _this = this;
            this.ptrdowned.connect(function (event) {
                var startOffsetX = drawing.scrollLeft;
                var startOffsetY = drawing.scrollTop;
                var watcher = event.pointer.watch(_this);
                watcher.moved.connect(function () {
                    if (!watcher.getIsCaptured()) {
                        if (watcher.pointer.getIsMove()) {
                            var direction = watcher.getDirection();
                            var allowed = false;
                            if (direction === 'left')
                                allowed = (drawing.scrollLeft + drawing.clientWidth) < drawing.scrollWidth;
                            else if (direction === 'right')
                                allowed = drawing.scrollLeft > 0;
                            else if (direction === 'bottom')
                                allowed = drawing.scrollTop > 0;
                            else if (direction === 'top')
                                allowed = true;
                            if (allowed)
                                watcher.capture();
                            else
                                watcher.cancel();
                        }
                    }
                    else {
                        var delta = watcher.getDelta();
                        drawing.scrollLeft = startOffsetX - delta.x;
                        drawing.scrollTop = startOffsetY - delta.y;
                    }
                });
            });
        };
        App.prototype.getElementsByClass = function (className) {
            var res = new Array();
            var reqSearch = function (current) {
                if (current instanceof className)
                    res.push(current);
                if (current instanceof Ui.Container) {
                    for (var i = 0; i < current.children.length; i++)
                        reqSearch(current.children[i]);
                }
            };
            reqSearch(this);
            return res;
        };
        App.prototype.getElementByDrawing = function (drawing) {
            var reqSearch = function (current) {
                if (current.drawing === drawing)
                    return current;
                if (current.children !== undefined) {
                    for (var i = 0; i < current.children.length; i++) {
                        var res = reqSearch(current.children[i]);
                        if (res !== undefined)
                            return res;
                    }
                }
            };
            return reqSearch(this);
        };
        App.prototype.getInverseLayoutTransform = function () {
            return Ui.Matrix.createTranslate(-document.body.scrollLeft, -document.body.scrollTop).
                multiply(_super.prototype.getInverseLayoutTransform.call(this));
        };
        App.prototype.getLayoutTransform = function () {
            return _super.prototype.getLayoutTransform.call(this).translate(document.body.scrollLeft, document.body.scrollTop);
        };
        App.prototype.invalidateMeasure = function () {
            this.invalidateLayout();
        };
        App.prototype.invalidateArrange = function () {
            this.invalidateLayout();
        };
        App.prototype.arrangeCore = function (w, h) {
            if (Core.Navigator.Android && Core.Navigator.isWebkit) {
                if ((this.focusElement != undefined) && ((this.focusElement.tagName === 'INPUT') || (this.focusElement.tagName === 'TEXTAREA') || (this.focusElement.contenteditable))) {
                    if (h - 100 > this.lastArrangeHeight)
                        this.focusElement.blur();
                }
            }
            this.lastArrangeHeight = h;
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var child = _a[_i];
                child.arrange(0, 0, w, h);
            }
        };
        App.getWindowIFrame = function (currentWindow) {
            if (currentWindow === undefined)
                currentWindow = window;
            var iframe;
            if (currentWindow.parent !== currentWindow) {
                try {
                    var frames_1 = currentWindow.parent.document.getElementsByTagName("IFRAME");
                    for (var i = 0; i < frames_1.length; i++) {
                        if (frames_1[i].contentWindow === currentWindow) {
                            iframe = frames_1[i];
                            break;
                        }
                    }
                }
                catch (e) { }
            }
            return iframe;
        };
        App.getRootWindow = function () {
            var rootWindow = window;
            while (rootWindow.parent != rootWindow)
                rootWindow = rootWindow.parent;
            return rootWindow;
        };
        App.current = undefined;
        return App;
    }(Ui.Container));
    Ui.App = App;
})(Ui || (Ui = {}));
window.addEventListener('load', function () { return window['loaded'] = true; });
var Ui;
(function (Ui) {
    var Form = (function (_super) {
        __extends(Form, _super);
        function Form(init) {
            var _this = _super.call(this, init) || this;
            _this.submited = new Core.Events();
            _this.drawing.addEventListener('submit', function (e) { return _this.onSubmit(e); });
            return _this;
        }
        Object.defineProperty(Form.prototype, "onsubmited", {
            set: function (value) { this.submited.connect(value); },
            enumerable: true,
            configurable: true
        });
        Form.prototype.onSubmit = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.submited.fire({ target: this });
        };
        Form.prototype.submit = function () {
            this.drawing.submit();
        };
        Form.prototype.renderDrawing = function () {
            var drawing = document.createElement('form');
            var submit = document.createElement('input');
            submit.type = 'submit';
            submit.style.visibility = 'hidden';
            drawing.appendChild(submit);
            var container = document.createElement('div');
            this.containerDrawing = container;
            drawing.appendChild(container);
            return drawing;
        };
        return Form;
    }(Ui.LBox));
    Ui.Form = Form;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var DialogCloseButton = (function (_super) {
        __extends(DialogCloseButton, _super);
        function DialogCloseButton(init) {
            var _this = _super.call(this, init) || this;
            _this.icon = 'close';
            _this.text = 'Fermer';
            return _this;
        }
        DialogCloseButton.style = {
            showText: false,
            background: 'rgba(250,250,250,0)',
            backgroundBorder: 'rgba(250,250,250,0)',
            activeBackground: 'rgba(250,250,250,0)',
            activeBackgroundBorder: 'rgba(250,250,250,0)'
        };
        return DialogCloseButton;
    }(Ui.Button));
    Ui.DialogCloseButton = DialogCloseButton;
    var DialogGraphic = (function (_super) {
        __extends(DialogGraphic, _super);
        function DialogGraphic() {
            var _this = _super.call(this) || this;
            _this._background = Ui.Color.create('#f8f8f8');
            return _this;
        }
        Object.defineProperty(DialogGraphic.prototype, "background", {
            set: function (color) {
                this._background = Ui.Color.create(color);
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        DialogGraphic.prototype.updateCanvas = function (ctx) {
            var w = this.layoutWidth;
            var h = this.layoutHeight;
            ctx.roundRectFilledShadow(0, 0, w, h, 2, 2, 2, 2, false, 3, new Ui.Color(0, 0, 0, 0.3));
            ctx.fillStyle = this._background.getCssRgba();
            ctx.fillRect(3, 3, w - 6, h - 6);
        };
        return DialogGraphic;
    }(Ui.CanvasElement));
    Ui.DialogGraphic = DialogGraphic;
    var DialogTitle = (function (_super) {
        __extends(DialogTitle, _super);
        function DialogTitle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DialogTitle.style = {
            color: Ui.Color.create('#666666'),
            fontWeight: 'bold',
            fontSize: 18
        };
        return DialogTitle;
    }(Ui.Label));
    Ui.DialogTitle = DialogTitle;
    var DialogButtonBox = (function (_super) {
        __extends(DialogButtonBox, _super);
        function DialogButtonBox() {
            var _this = _super.call(this) || this;
            _this.cancelled = new Core.Events();
            _this.onCancelPress = function () {
                _this.cancelled.fire({ target: _this });
            };
            _this.bg = new Ui.Rectangle();
            _this.append(_this.bg);
            _this.actionBox = new Ui.HBox();
            _this.actionBox.margin = 5;
            _this.actionBox.spacing = 10;
            _this.append(new Ui.ScrollingArea({ content: _this.actionBox, scrollVertical: false }));
            _this.actionButtonsBox = new Ui.HBox();
            _this.actionButtonsBox.spacing = 5;
            _this.actionBox.append(_this.actionButtonsBox, true);
            _this.titleLabel = new DialogTitle({ verticalAlign: 'center', horizontalAlign: 'left' });
            _this.actionButtonsBox.append(_this.titleLabel, true);
            return _this;
        }
        DialogButtonBox.prototype.getTitle = function () {
            return this.titleLabel.text;
        };
        DialogButtonBox.prototype.setTitle = function (title) {
            this.titleLabel.text = title;
        };
        DialogButtonBox.prototype.setCancelButton = function (button) {
            if (this.cancelButton !== undefined) {
                if (this.cancelButton instanceof Ui.Pressable)
                    this.cancelButton.pressed.disconnect(this.onCancelPress);
                this.actionBox.remove(this.cancelButton);
            }
            this.cancelButton = button;
            if (this.cancelButton !== undefined) {
                if (this.cancelButton instanceof Ui.Pressable)
                    this.cancelButton.pressed.connect(this.onCancelPress);
                this.actionBox.prepend(this.cancelButton);
            }
        };
        DialogButtonBox.prototype.setActionButtons = function (buttons) {
            this.actionButtonsBox.content = buttons;
            this.actionButtonsBox.prepend(this.titleLabel, true);
        };
        DialogButtonBox.prototype.getActionButtons = function () {
            return this.actionButtonsBox.children.slice(1);
        };
        DialogButtonBox.prototype.onStyleChange = function () {
            this.bg.fill = this.getStyleProperty('background');
        };
        DialogButtonBox.style = {
            background: '#e8e8e8'
        };
        return DialogButtonBox;
    }(Ui.LBox));
    Ui.DialogButtonBox = DialogButtonBox;
    var Dialog = (function (_super) {
        __extends(Dialog, _super);
        function Dialog(init) {
            var _this = _super.call(this, init) || this;
            _this.buttonsVisible = false;
            _this.isClosed = true;
            _this.closed = new Core.Events();
            _this.dialogSelection = new Ui.Selection();
            _this.shadowGraphic = new Ui.Rectangle();
            new Ui.PressWatcher({
                element: _this.shadowGraphic,
                onpressed: function () { return _this.onShadowPress(); }
            });
            _this.appendChild(_this.shadowGraphic);
            _this.lbox = new Ui.Form();
            _this.lbox.submited.connect(function () { return _this.onFormSubmit(); });
            _this.appendChild(_this.lbox);
            _this.graphic = new Ui.DialogGraphic();
            _this.lbox.append(_this.graphic);
            _this.vbox = new Ui.VBox();
            _this.vbox.margin = 3;
            _this.lbox.append(_this.vbox);
            _this.buttonsBox = new Ui.LBox();
            _this.buttonsBox.height = 32;
            _this.buttonsBox.hide(true);
            _this.vbox.append(_this.buttonsBox);
            _this.scroll = new Ui.ScrollingArea();
            _this.vbox.append(_this.scroll, true);
            _this.contentVBox = new Ui.VBox();
            _this.scroll.content = _this.contentVBox;
            _this.contentBox = new Ui.LBox();
            _this.contentBox.margin = 8;
            _this.contentVBox.append(_this.contentBox, true);
            _this.contextBox = new Ui.ContextBar();
            _this.contextBox.selection = _this.dialogSelection;
            _this.contextBox.hide();
            _this.buttonsBox.append(_this.contextBox);
            _this.actionBox = new Ui.DialogButtonBox();
            _this.actionBox.cancelled.connect(function () { return _this.close(); });
            _this.buttonsBox.append(_this.actionBox);
            _this.dialogSelection.changed.connect(function (e) { return _this.onDialogSelectionChange(e.target); });
            _this.drawing.addEventListener('keyup', function (e) { return _this.onKeyUp(e); });
            _this.cancelButton = new DialogCloseButton();
            if (init) {
                if (init.padding !== undefined)
                    _this.padding = init.padding;
                if (init.preferredWidth !== undefined)
                    _this.preferredWidth = init.preferredWidth;
                if (init.preferredHeight !== undefined)
                    _this.preferredHeight = init.preferredHeight;
                if (init.title !== undefined)
                    _this.title = init.title;
                if (init.cancelButton !== undefined)
                    _this.cancelButton = init.cancelButton;
                if (init.actionButtons !== undefined)
                    _this.actionButtons = init.actionButtons;
                if (init.autoClose !== undefined)
                    _this.autoClose = init.autoClose;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.onclosed)
                    _this.closed.connect(init.onclosed);
            }
            return _this;
        }
        Object.defineProperty(Dialog.prototype, "onclosed", {
            set: function (value) { this.closed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Dialog.prototype.getSelectionHandler = function () {
            return this.dialogSelection;
        };
        Object.defineProperty(Dialog.prototype, "preferredWidth", {
            set: function (width) {
                this._preferredWidth = width;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dialog.prototype, "preferredHeight", {
            set: function (height) {
                this._preferredHeight = height;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dialog.prototype, "padding", {
            get: function () {
                return this.contentBox.marginLeft;
            },
            set: function (padding) {
                this.contentBox.margin = padding;
            },
            enumerable: true,
            configurable: true
        });
        Dialog.prototype.open = function () {
            var _this = this;
            if (this.isClosed) {
                Ui.App.current.appendDialog(this);
                this.isClosed = false;
                if (this.openClock == undefined) {
                    this.openClock = new Anim.Clock({
                        duration: 1, target: this, speed: 5,
                        ease: new Anim.PowerEase({ mode: 'out' })
                    });
                    this.openClock.timeupdate.connect(function (e) { return _this.onOpenTick(e.target, e.progress, e.deltaTick); });
                    this.onOpenTick(this.openClock, 0, 0);
                    this.invalidateArrange();
                }
            }
        };
        Dialog.prototype.close = function () {
            var _this = this;
            if (!this.isClosed) {
                this.closed.fire({ target: this });
                this.isClosed = true;
                this.lbox.disable();
                if (this.openClock === undefined) {
                    this.openClock = new Anim.Clock({
                        duration: 1, target: this, speed: 5,
                        ease: new Anim.PowerEase({ mode: 'out' })
                    });
                    this.openClock.timeupdate.connect(function (e) { return _this.onOpenTick(e.target, e.progress, e.deltaTick); });
                    this.openClock.begin();
                }
            }
        };
        Dialog.prototype.onOpenTick = function (clock, progress, delta) {
            var end = (progress >= 1);
            if (this.isClosed)
                progress = 1 - progress;
            this.shadowGraphic.opacity = progress;
            this.lbox.opacity = progress;
            this.lbox.transform = Ui.Matrix.createTranslate(0, -20 * (1 - progress));
            if (end) {
                if (this.openClock)
                    this.openClock.stop();
                this.openClock = undefined;
                if (this.isClosed) {
                    Ui.App.current.removeDialog(this);
                    this.lbox.enable();
                }
            }
        };
        Dialog.prototype.getDefaultButton = function () {
            var buttons = this.actionBox.getActionButtons();
            for (var i = 0; i < buttons.length; i++)
                if (buttons[i] instanceof Ui.DefaultButton)
                    return buttons[i];
        };
        Dialog.prototype.defaultAction = function () {
            var defaultButton = this.getDefaultButton();
            if (defaultButton !== undefined)
                defaultButton.press();
        };
        Object.defineProperty(Dialog.prototype, "title", {
            get: function () {
                return this.actionBox.getTitle();
            },
            set: function (title) {
                this.actionBox.setTitle(title);
            },
            enumerable: true,
            configurable: true
        });
        Dialog.prototype.updateButtonsBoxVisible = function () {
            var visible = (this._cancelButton !== undefined) || (this._actionButtons !== undefined) ||
                (this.dialogSelection.elements.length > 0);
            if (!this.buttonsVisible && visible) {
                this.buttonsVisible = true;
                this.buttonsBox.show();
            }
            else if (this.buttonsVisible && !visible) {
                this.buttonsVisible = false;
                this.buttonsBox.hide(true);
            }
        };
        Object.defineProperty(Dialog.prototype, "cancelButton", {
            set: function (button) {
                this._cancelButton = button;
                this.actionBox.setCancelButton(button);
                this.updateButtonsBoxVisible();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dialog.prototype, "actionButtons", {
            set: function (buttons) {
                this._actionButtons = buttons;
                this.actionBox.setActionButtons(buttons);
                this.updateButtonsBoxVisible();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dialog.prototype, "content", {
            get: function () {
                return this.contentBox.firstChild;
            },
            set: function (content) {
                this.contentBox.content = content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dialog.prototype, "autoClose", {
            set: function (autoClose) {
                this._autoClose = autoClose;
            },
            enumerable: true,
            configurable: true
        });
        Dialog.prototype.onCancelPress = function () {
            this.close();
        };
        Dialog.prototype.onFormSubmit = function () {
            this.defaultAction();
        };
        Dialog.prototype.onDialogSelectionChange = function (selection) {
            if (selection.elements.length === 0) {
                this.contextBox.hide();
                this.actionBox.show();
            }
            else {
                this.contextBox.show();
                this.actionBox.hide();
            }
            this.updateButtonsBoxVisible();
        };
        Dialog.prototype.onKeyUp = function (event) {
            if (event.which === 46) {
                if (this.dialogSelection.elements.length !== 0) {
                    if (this.dialogSelection.executeDeleteAction()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }
            }
        };
        Dialog.prototype.onShadowPress = function () {
            if (!this.isDisabled && (this._autoClose || this.getStyleProperty('autoClose') == true))
                this.close();
        };
        Dialog.prototype.onStyleChange = function () {
            this.shadowGraphic.fill = this.getStyleProperty('shadow');
            this.graphic.background = this.getStyleProperty('background');
        };
        Dialog.prototype.measureCore = function (width, height) {
            this.shadowGraphic.measure(width, height);
            var preferredWidth = this._preferredWidth ? this._preferredWidth : width;
            var preferredHeight = this._preferredHeight ? this._preferredHeight : height;
            this.lbox.measure((width < preferredWidth) ? width : preferredWidth, (height < preferredHeight) ? height : preferredHeight);
            return { width: width, height: height };
        };
        Dialog.prototype.arrangeCore = function (width, height) {
            if ((this.openClock !== undefined) && !this.openClock.isActive)
                this.openClock.begin();
            this.shadowGraphic.arrange(0, 0, width, height);
            var usedWidth = Math.min(this._preferredWidth ? Math.max(this.lbox.measureWidth, this._preferredWidth) : this.lbox.measureWidth, width);
            var usedHeight = Math.min(this._preferredHeight ? Math.max(this.lbox.measureHeight, this._preferredHeight) : this.lbox.measureHeight, height);
            this.lbox.arrange((width - usedWidth) / 2, (height - usedHeight) / 2, usedWidth, usedHeight);
        };
        Dialog.style = {
            autoClose: true,
            shadow: 'rgba(0,0,0,0.5)',
            background: '#f8f8f8'
        };
        return Dialog;
    }(Ui.Container));
    Ui.Dialog = Dialog;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Html = (function (_super) {
        __extends(Html, _super);
        function Html(init) {
            var _this = _super.call(this, init) || this;
            _this.captureLink = true;
            _this.bindedOnImageLoad = undefined;
            _this._color = undefined;
            _this.link = new Core.Events();
            _this.bindedOnImageLoad = _this.onImageLoad.bind(_this);
            _this.drawing.addEventListener('click', function (e) { return _this.onClick(e); });
            _this.drawing.addEventListener('keypress', function (e) { return _this.onKeyPress(e); });
            if (init) {
                if (init.text !== undefined)
                    _this.text = init.text;
                if (init.html !== undefined)
                    _this.html = init.html;
                if (init.textAlign !== undefined)
                    _this.textAlign = init.textAlign;
                if (init.fontSize !== undefined)
                    _this.fontSize = init.fontSize;
                if (init.fontFamily !== undefined)
                    _this.fontFamily = init.fontFamily;
                if (init.fontWeight !== undefined)
                    _this.fontWeight = init.fontWeight;
                if (init.interLine !== undefined)
                    _this.interLine = init.interLine;
                if (init.wordWrap !== undefined)
                    _this.wordWrap = init.wordWrap;
                if (init.whiteSpace !== undefined)
                    _this.whiteSpace = init.whiteSpace;
                if (init.color !== undefined)
                    _this.color = init.color;
                if (init.onlink !== undefined)
                    _this.link.connect(init.onlink);
            }
            return _this;
        }
        Object.defineProperty(Html.prototype, "onlink", {
            set: function (value) { this.link.connect(value); },
            enumerable: true,
            configurable: true
        });
        Html.prototype.getElements = function (tagName) {
            var res = [];
            this.searchElements(tagName.toUpperCase(), this.htmlDrawing, res);
            return res;
        };
        Html.prototype.searchElements = function (tagName, element, res) {
            for (var i = 0; i < element.childNodes.length; i++) {
                var child = element.childNodes[i];
                if (('tagName' in child) && (child.tagName.toUpperCase() == tagName))
                    res.push(child);
                this.searchElements(tagName, child, res);
            }
        };
        Html.prototype.getParentElement = function (tagName, element) {
            do {
                if (('tagName' in element) && (element.tagName.toUpperCase() == tagName))
                    return element;
                if (element.parentNode == undefined)
                    return undefined;
                if (element.parentNode === this.drawing)
                    return undefined;
                element = element.parentNode;
            } while (true);
        };
        Object.defineProperty(Html.prototype, "html", {
            get: function () {
                return this.htmlDrawing.innerHTML;
            },
            set: function (html) {
                this.htmlDrawing.innerHTML = html;
                this.bindChildEvents();
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Html.prototype.bindChildEvents = function () {
            var tab = this.getElements('IMG');
            for (var i = 0; i < tab.length; i++)
                tab[i].onload = this.bindedOnImageLoad;
        };
        Object.defineProperty(Html.prototype, "htmlElement", {
            set: function (htmlElement) {
                while (this.htmlDrawing.firstChild)
                    this.htmlDrawing.removeChild(this.htmlDrawing.firstChild);
                this.htmlDrawing.appendChild(htmlElement);
                this.bindChildEvents();
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "text", {
            get: function () {
                if ('innerText' in this.htmlDrawing)
                    return this.htmlDrawing.innerText;
                else
                    return this.getTextContent(this.htmlDrawing);
            },
            set: function (text) {
                if ('innerText' in this.htmlDrawing)
                    this.htmlDrawing.innerText = text;
                else {
                    var div = document.createElement('div');
                    var content = void 0;
                    div.textContent = text;
                    content = div.textContent;
                    var lines = content.split('\n');
                    var content2 = '';
                    for (var i = 0; i < lines.length; i++) {
                        if (lines[i] !== '') {
                            if (content2 !== '')
                                content2 += "<br>";
                            content2 += lines[i];
                        }
                    }
                    this.html = content2;
                }
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Html.prototype.getTextContent = function (el) {
            var text = '';
            if (el.nodeType === 3)
                text += el.textContent;
            else if ((el.nodeType === 1) && ((el.nodeName == "BR") || (el.nodeName == "P")))
                text += '\n';
            if ('childNodes' in el) {
                for (var i = 0; i < el.childNodes.length; i++)
                    text += this.getTextContent(el.childNodes[i]);
            }
            return text;
        };
        Object.defineProperty(Html.prototype, "textAlign", {
            get: function () {
                if (this._textAlign !== undefined)
                    return this._textAlign;
                else
                    return this.getStyleProperty('textAlign');
            },
            set: function (textAlign) {
                if (this._textAlign !== textAlign) {
                    this._textAlign = textAlign;
                    this.drawing.style.textAlign = this.textAlign;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "fontSize", {
            get: function () {
                if (this._fontSize !== undefined)
                    return this._fontSize;
                else
                    return this.getStyleProperty('fontSize');
            },
            set: function (fontSize) {
                if (this._fontSize !== fontSize) {
                    this._fontSize = fontSize;
                    this.drawing.style.fontSize = this.fontSize + 'px';
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "fontFamily", {
            get: function () {
                if (this._fontFamily !== undefined)
                    return this._fontFamily;
                else
                    return this.getStyleProperty('fontFamily');
            },
            set: function (fontFamily) {
                if (this._fontFamily !== fontFamily) {
                    this._fontFamily = fontFamily;
                    this.drawing.style.fontFamily = this.fontFamily;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "fontWeight", {
            get: function () {
                if (this._fontWeight !== undefined)
                    return this._fontWeight;
                else
                    return this.getStyleProperty('fontWeight');
            },
            set: function (fontWeight) {
                if (this._fontWeight !== fontWeight) {
                    this._fontWeight = fontWeight;
                    this.drawing.style.fontWeight = this.fontWeight;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "interLine", {
            get: function () {
                if (this._interLine !== undefined)
                    return this._interLine;
                else
                    return this.getStyleProperty('interLine');
            },
            set: function (interLine) {
                if (this._interLine !== interLine) {
                    this._interLine = interLine;
                    this.drawing.style.lineHeight = this.interLine.toString();
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "wordWrap", {
            get: function () {
                if (this._wordWrap !== undefined)
                    return this._wordWrap;
                else
                    return this.getStyleProperty('wordWrap');
            },
            set: function (wordWrap) {
                if (this._wordWrap !== wordWrap) {
                    this._wordWrap = wordWrap;
                    this.drawing.style.wordWrap = this.wordWrap;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "wordBreak", {
            get: function () {
                if (this._wordBreak !== undefined)
                    return this._wordBreak;
                else
                    return this.getStyleProperty('wordBreak');
            },
            set: function (wordBreak) {
                if (this._wordBreak !== wordBreak) {
                    this._wordBreak = wordBreak;
                    this.drawing.style.wordBreak = this.wordBreak;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "whiteSpace", {
            get: function () {
                if (this._whiteSpace !== undefined)
                    return this._whiteSpace;
                else
                    return this.getStyleProperty('whiteSpace');
            },
            set: function (whiteSpace) {
                if (this._whiteSpace !== whiteSpace) {
                    this._whiteSpace = whiteSpace;
                    this.drawing.style.whiteSpace = this.whiteSpace;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Html.prototype.getColor = function () {
            if (this._color !== undefined)
                return this._color;
            else
                return Ui.Color.create(this.getStyleProperty('color'));
        };
        Object.defineProperty(Html.prototype, "color", {
            set: function (color) {
                if (this._color !== color) {
                    this._color = Ui.Color.create(color);
                    if (Core.Navigator.supportRgba)
                        this.drawing.style.color = this._color.getCssRgba();
                    else
                        this.drawing.style.color = this._color.getCssHtml();
                }
            },
            enumerable: true,
            configurable: true
        });
        Html.prototype.onSubtreeModified = function (event) {
            this.invalidateMeasure();
        };
        Html.prototype.onKeyPress = function (event) {
            this.invalidateMeasure();
        };
        Html.prototype.onImageLoad = function (event) {
            this.invalidateMeasure();
        };
        Html.prototype.onClick = function (event) {
            var target = this.getParentElement('A', event.target);
            if (target !== undefined) {
                if (this.captureLink) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                this.link.fire({ target: this, ref: target.href });
            }
        };
        Html.prototype.onVisible = function () {
            this.invalidateMeasure();
        };
        Html.prototype.onStyleChange = function () {
            this.drawing.style.textAlign = this.textAlign;
            this.drawing.style.fontSize = this.fontSize + 'px';
            this.drawing.style.fontFamily = this.fontFamily;
            this.drawing.style.fontWeight = this.fontWeight;
            if (Core.Navigator.supportRgba)
                this.drawing.style.color = this.getColor().getCssRgba();
            else
                this.drawing.style.color = this.getColor().getCssHtml();
            this.drawing.style.lineHeight = this.interLine.toString();
            this.drawing.style.wordWrap = this.wordWrap;
        };
        Html.prototype.renderDrawing = function () {
            var drawing = _super.prototype.renderDrawing.call(this);
            this.htmlDrawing = document.createElement('div');
            this.htmlDrawing.style.outline = 'none';
            this.htmlDrawing.style.padding = '0px';
            this.htmlDrawing.style.margin = '0px';
            this.htmlDrawing.style.display = 'inline-block';
            this.htmlDrawing.style.width = '';
            drawing.appendChild(this.htmlDrawing);
            return drawing;
        };
        Html.prototype.measureCore = function (width, height) {
            width = (this.width !== undefined) ? Math.max(width, this.width) : width;
            this.drawing.style.width = width + 'px';
            this.htmlDrawing.style.width = '';
            this.htmlDrawing.style.height = '';
            var measureWidth;
            if (this.htmlDrawing.clientWidth == width)
                measureWidth = width;
            else
                measureWidth = Math.max(this.htmlDrawing.clientWidth, this.htmlDrawing.scrollWidth) + 1;
            return {
                width: measureWidth,
                height: Math.max(this.htmlDrawing.clientHeight, this.fontSize)
            };
        };
        Html.prototype.arrangeCore = function (width, height) {
            this.htmlDrawing.style.width = width + "px";
            this.htmlDrawing.style.height = height + "px";
        };
        Html.style = {
            color: 'black',
            fontSize: 16,
            fontFamily: 'Sans-serif',
            fontWeight: 'normal',
            textAlign: 'left',
            wordWrap: 'normal',
            wordBreak: 'normal',
            whiteSpace: 'normal',
            interLine: 1
        };
        return Html;
    }(Ui.Element));
    Ui.Html = Html;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Text = (function (_super) {
        __extends(Text, _super);
        function Text(init) {
            var _this = _super.call(this, init) || this;
            _this.drawing.style.whiteSpace = 'pre-wrap';
            if (init) {
                if (init.textTransform !== undefined)
                    _this.textTransform = init.textTransform;
            }
            return _this;
        }
        Object.defineProperty(Text.prototype, "textTransform", {
            set: function (textTransform) {
                this.drawing.style.textTransform = textTransform;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        return Text;
    }(Ui.Html));
    Ui.Text = Text;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Shadow = (function (_super) {
        __extends(Shadow, _super);
        function Shadow(init) {
            var _this = _super.call(this, init) || this;
            _this._radiusTopLeft = 0;
            _this._radiusTopRight = 0;
            _this._radiusBottomLeft = 0;
            _this._radiusBottomRight = 0;
            _this._shadowWidth = 4;
            _this._inner = false;
            _this._color = Ui.Color.create('black');
            if (init) {
                if (init.color !== undefined)
                    _this.color = init.color;
                if (init.inner !== undefined)
                    _this.inner = init.inner;
                if (init.shadowWidth !== undefined)
                    _this.shadowWidth = init.shadowWidth;
                if (init.radius !== undefined)
                    _this.radius = init.radius;
                if (init.radiusTopLeft !== undefined)
                    _this.radiusTopLeft = init.radiusTopLeft;
                if (init.radiusTopRight !== undefined)
                    _this.radiusTopRight = init.radiusTopRight;
                if (init.radiusBottomLeft !== undefined)
                    _this.radiusBottomLeft = init.radiusBottomLeft;
                if (init.radiusBottomRight !== undefined)
                    _this.radiusBottomRight = init.radiusBottomRight;
            }
            return _this;
        }
        Object.defineProperty(Shadow.prototype, "color", {
            set: function (color) {
                if (this._color != color) {
                    this._color = Ui.Color.create(color);
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "inner", {
            get: function () {
                return this._inner;
            },
            set: function (inner) {
                if (this._inner != inner) {
                    this._inner = inner;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "shadowWidth", {
            get: function () {
                return this._shadowWidth;
            },
            set: function (shadowWidth) {
                if (this._shadowWidth != shadowWidth) {
                    this._shadowWidth = shadowWidth;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "radius", {
            set: function (radius) {
                this._radiusTopLeft = radius;
                this._radiusTopRight = radius;
                this._radiusBottomLeft = radius;
                this._radiusBottomRight = radius;
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "radiusTopLeft", {
            get: function () {
                return this._radiusTopLeft;
            },
            set: function (radiusTopLeft) {
                if (this._radiusTopLeft != radiusTopLeft) {
                    this._radiusTopLeft = radiusTopLeft;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "radiusTopRight", {
            get: function () {
                return this._radiusTopRight;
            },
            set: function (radiusTopRight) {
                if (this._radiusTopRight != radiusTopRight) {
                    this._radiusTopRight = radiusTopRight;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "radiusBottomLeft", {
            get: function () {
                return this._radiusBottomLeft;
            },
            set: function (radiusBottomLeft) {
                if (this._radiusBottomLeft != radiusBottomLeft) {
                    this._radiusBottomLeft = radiusBottomLeft;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Shadow.prototype, "radiusBottomRight", {
            get: function () {
                return this._radiusBottomRight;
            },
            set: function (radiusBottomRight) {
                if (this._radiusBottomRight != radiusBottomRight) {
                    this._radiusBottomRight = radiusBottomRight;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Shadow.prototype.updateCanvas = function (ctx) {
            var width = this.layoutWidth;
            var height = this.layoutHeight;
            for (var i = 0; i < this._shadowWidth; i++) {
                var rgba = this._color.getRgba();
                var opacity = void 0;
                if (this._inner) {
                    if (this._shadowWidth == 1)
                        opacity = 1;
                    else {
                        var x = (i + 1) / this._shadowWidth;
                        opacity = x * x;
                    }
                }
                else
                    opacity = (i + 1) / (this._shadowWidth + 1);
                var color = new Ui.Color(rgba.r, rgba.g, rgba.b, rgba.a * opacity);
                ctx.fillStyle = color.getCssRgba();
                if (this._inner) {
                    ctx.beginPath();
                    ctx.roundRect(0, 0, width, height, this._radiusTopLeft, this._radiusTopRight, this._radiusBottomRight, this._radiusBottomLeft);
                    ctx.roundRect(this._shadowWidth - i, this._shadowWidth - i, width - ((this._shadowWidth - i) * 2), height - ((this._shadowWidth - i) * 2), this._radiusTopLeft, this._radiusTopRight, this._radiusBottomRight, this._radiusBottomLeft, true);
                    ctx.closePath();
                    ctx.fill();
                }
                else {
                    ctx.beginPath();
                    ctx.roundRect(i, i, width - i * 2, height - i * 2, this._radiusTopLeft, this._radiusTopRight, this._radiusBottomRight, this._radiusBottomLeft);
                    ctx.closePath();
                    ctx.fill();
                }
            }
        };
        return Shadow;
    }(Ui.CanvasElement));
    Ui.Shadow = Shadow;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Toaster = (function (_super) {
        __extends(Toaster, _super);
        function Toaster() {
            var _this = _super.call(this) || this;
            _this.margin = 10;
            _this.eventsHidden = true;
            return _this;
        }
        Toaster.prototype.appendToast = function (toast) {
            toast.newToast = true;
            if (this.children.length === 0)
                Ui.App.current.appendTopLayer(this);
            this.appendChild(toast);
        };
        Toaster.prototype.removeToast = function (toast) {
            this.removeChild(toast);
            if (this.children.length === 0)
                Ui.App.current.removeTopLayer(this);
        };
        Toaster.prototype.onArrangeTick = function (clock, progress, delta) {
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                if (progress === 1) {
                    child.transform = undefined;
                    child.newToast = false;
                }
                else if (child.newToast !== true)
                    child.transform = (Ui.Matrix.createTranslate((child.lastLayoutX - child.layoutX) * (1 - progress), (child.lastLayoutY - child.layoutY) * (1 - progress)));
            }
            if (progress === 1)
                this.arrangeClock = undefined;
        };
        Toaster.prototype.measureCore = function (width, height) {
            var spacing = 10;
            var maxWidth = 0;
            var totalHeight = 0;
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var size = child.measure(0, 0);
                totalHeight += size.height;
                if (size.width > maxWidth)
                    maxWidth = size.width;
            }
            totalHeight += Math.max(0, this.children.length - 1) * spacing;
            return { width: maxWidth, height: totalHeight };
        };
        Toaster.prototype.arrangeCore = function (width, height) {
            var _this = this;
            var spacing = 10;
            var y = 0;
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                child.lastLayoutX = child.layoutX;
                child.lastLayoutY = child.layoutY;
                y += child.measureHeight;
                child.arrange(0, height - y, this.measureWidth, child.measureHeight);
                y += spacing;
            }
            if (this.arrangeClock === undefined) {
                this.arrangeClock = new Anim.Clock({ duration: 1, speed: 5 });
                this.arrangeClock.timeupdate.connect(function (e) { return _this.onArrangeTick(e.target, e.progress, e.deltaTick); });
                this.arrangeClock.begin();
            }
        };
        Toaster.appendToast = function (toast) {
            Ui.Toaster.current.appendToast(toast);
        };
        Toaster.removeToast = function (toast) {
            Ui.Toaster.current.removeToast(toast);
        };
        return Toaster;
    }(Ui.Container));
    Ui.Toaster = Toaster;
    var Toast = (function (_super) {
        __extends(Toast, _super);
        function Toast() {
            var _this = _super.call(this) || this;
            _this._isClosed = true;
            _this.newToast = false;
            _this.lastLayoutX = 0;
            _this.lastLayoutY = 0;
            _this.lastLayoutWidth = 0;
            _this.lastLayoutHeight = 0;
            _this.closed = new Core.Events();
            var sha = new Ui.Shadow();
            sha.shadowWidth = 3;
            sha.radius = 1;
            sha.inner = false;
            sha.opacity = 0.4;
            _this.append(sha);
            var r = new Ui.Rectangle();
            r.fill = '#303030';
            r.width = 200;
            r.height = 30;
            r.margin = 2;
            r.opacity = 1;
            _this.append(r);
            _this.toastContentBox = new Ui.LBox();
            _this.toastContentBox.margin = 10;
            _this.toastContentBox.width = 200;
            _this.append(_this.toastContentBox);
            return _this;
        }
        Object.defineProperty(Toast.prototype, "isClosed", {
            get: function () {
                return this._isClosed;
            },
            enumerable: true,
            configurable: true
        });
        Toast.prototype.open = function () {
            var _this = this;
            if (this._isClosed) {
                this._isClosed = false;
                if (this.openClock == undefined) {
                    this.openClock = new Anim.Clock({
                        duration: 1, target: this, speed: 5,
                        ease: new Anim.PowerEase({ mode: 'out' })
                    });
                    this.openClock.timeupdate.connect(function (e) { return _this.onOpenTick(e.target, e.progress, e.deltaTick); });
                    this.opacity = 0;
                }
                new Core.DelayedTask(2, function () { return _this.close(); });
                Ui.Toaster.appendToast(this);
            }
        };
        Toast.prototype.close = function () {
            var _this = this;
            if (!this._isClosed) {
                this._isClosed = true;
                this.disable();
                if (this.openClock == undefined) {
                    this.openClock = new Anim.Clock({
                        duration: 1, target: this, speed: 5,
                        ease: new Anim.PowerEase({ mode: 'out' })
                    });
                    this.openClock.timeupdate.connect(function (e) { return _this.onOpenTick(e.target, e.progress, e.deltaTick); });
                    this.openClock.begin();
                }
            }
        };
        Toast.prototype.onOpenTick = function (clock, progress, delta) {
            var end = (progress >= 1);
            if (this._isClosed)
                progress = 1 - progress;
            this.opacity = progress;
            this.transform = Ui.Matrix.createTranslate(-20 * (1 - progress), 0);
            if (end) {
                if (this.openClock)
                    this.openClock.stop();
                this.openClock = undefined;
                if (this._isClosed) {
                    this.enable();
                    this.closed.fire({ target: this });
                    Ui.Toaster.removeToast(this);
                }
            }
        };
        Object.defineProperty(Toast.prototype, "content", {
            set: function (content) {
                this.toastContentBox.content = content;
            },
            enumerable: true,
            configurable: true
        });
        Toast.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, width, height);
            if ((this.openClock != undefined) && !this.openClock.isActive)
                this.openClock.begin();
        };
        Toast.send = function (content) {
            var toast = new Ui.Toast();
            if (typeof (content) === 'string') {
                var t = new Ui.Text();
                t.text = content;
                t.verticalAlign = 'center';
                t.fontWeight = 'bold';
                t.margin = 5;
                t.color = Ui.Color.create('#ffffff');
                content = t;
            }
            toast.content = content;
            toast.open();
        };
        return Toast;
    }(Ui.LBox));
    Ui.Toast = Toast;
})(Ui || (Ui = {}));
Ui.Toaster.current = new Ui.Toaster();
var Ui;
(function (Ui) {
    var Image = (function (_super) {
        __extends(Image, _super);
        function Image(init) {
            var _this = _super.call(this, init) || this;
            _this.loaddone = false;
            _this.setSrcLock = false;
            _this.ready = new Core.Events();
            _this.error = new Core.Events();
            _this.onAppReady = function () {
                Ui.App.current.ready.disconnect(_this.onAppReady);
                _this.onImageDelayReady();
            };
            _this.imageDrawing.addEventListener('contextmenu', function (event) { return event.preventDefault(); });
            _this.imageDrawing.addEventListener('load', function (e) { return _this.onImageLoad(e); });
            _this.imageDrawing.addEventListener('error', function (e) { return _this.onImageError(e); });
            if (init) {
                if (init.src !== undefined)
                    _this.src = init.src;
                if (init.onready)
                    _this.ready.connect(init.onready);
                if (init.onerror)
                    _this.error.connect(init.onerror);
            }
            return _this;
        }
        Object.defineProperty(Image.prototype, "onready", {
            set: function (value) { this.ready.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "onerror", {
            set: function (value) { this.error.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "src", {
            get: function () {
                return this._src;
            },
            set: function (src) {
                this.setSrcLock = true;
                this.loaddone = false;
                this._naturalWidth = undefined;
                this._naturalHeight = undefined;
                this._src = src;
                if (src === undefined)
                    this.imageDrawing.removeAttribute('src');
                else
                    this.imageDrawing.setAttribute('src', src);
                if ((this.imageDrawing.complete === true) && !this.loaddone) {
                    this.loaddone = true;
                    this._naturalWidth = this.imageDrawing.naturalWidth;
                    this._naturalHeight = this.imageDrawing.naturalHeight;
                    this.ready.fire({ target: this });
                    this.invalidateMeasure();
                }
                this.setSrcLock = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "naturalWidth", {
            get: function () {
                return this._naturalWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "naturalHeight", {
            get: function () {
                return this._naturalHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "isReady", {
            get: function () {
                return this.loaddone;
            },
            enumerable: true,
            configurable: true
        });
        Image.prototype.onImageError = function (event) {
            this.error.fire({ target: this });
        };
        Image.prototype.onImageLoad = function (event) {
            if ((event.target != undefined) && (event.target.naturalWidth != undefined) && (event.target.naturalHeight != undefined)) {
                this.loaddone = true;
                this._naturalWidth = event.target.naturalWidth;
                this._naturalHeight = event.target.naturalHeight;
                this.ready.fire({ target: this });
                this.invalidateMeasure();
            }
            else {
                if (this.setSrcLock)
                    new Core.DelayedTask(0, this.onImageDelayReady);
                else
                    this.onImageDelayReady();
            }
        };
        Image.prototype.onImageDelayReady = function () {
            if (!Ui.App.current.isReady)
                Ui.App.current.ready.connect(this.onAppReady);
            else {
                this.loaddone = true;
                if (document.body == undefined) {
                    var body = document.createElement('body');
                    document.body = body;
                }
                var imgClone = document.createElement('img');
                if (this._src)
                    imgClone.setAttribute('src', this._src);
                document.body.appendChild(imgClone);
                this._naturalWidth = imgClone.width;
                this._naturalHeight = imgClone.height;
                document.body.removeChild(imgClone);
                this.ready.fire({ target: this });
                this.invalidateMeasure();
            }
        };
        Image.prototype.renderDrawing = function () {
            this.imageDrawing = document.createElement('img');
            this.imageDrawing.style.position = 'absolute';
            this.imageDrawing.style.top = '0px';
            this.imageDrawing.style.left = '0px';
            this.imageDrawing.style.width = '0px';
            this.imageDrawing.style.height = '0px';
            this.imageDrawing.style.pointerEvents = 'none';
            this.imageDrawing.setAttribute('draggable', 'false');
            if (Core.Navigator.isWebkit) {
                this.imageDrawing.style.webkitUserSelect = 'none';
                this.imageDrawing.style['webkitTouchCallout'] = 'none';
            }
            else if (Core.Navigator.isGecko)
                this.imageDrawing.style['MozUserSelect'] = 'none';
            else if (Core.Navigator.isIE)
                this.imageDrawing.addEventListener('selectstart', function (e) { return e.preventDefault(); });
            return this.imageDrawing;
        };
        Image.prototype.measureCore = function (width, height) {
            if (!this.loaddone)
                return { width: 0, height: 0 };
            var size;
            if (this.width === undefined) {
                if (this.height === undefined)
                    size = { width: this._naturalWidth, height: this._naturalHeight };
                else {
                    var fixedHeight = this.height - (this.marginTop + this.marginBottom);
                    size = {
                        width: (this._naturalWidth * fixedHeight) / this._naturalHeight,
                        height: fixedHeight
                    };
                }
            }
            else {
                if (this.height === undefined) {
                    var fixedWidth = this.width - (this.marginLeft + this.marginRight);
                    size = {
                        width: fixedWidth,
                        height: (this._naturalHeight * fixedWidth) / this._naturalWidth
                    };
                }
                else
                    size = { width: 0, height: 0 };
            }
            return size;
        };
        Image.prototype.arrangeCore = function (width, height) {
            if (this.imageDrawing !== undefined) {
                this.imageDrawing.style.width = width + 'px';
                this.imageDrawing.style.height = height + 'px';
            }
        };
        return Image;
    }(Ui.Element));
    Ui.Image = Image;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Loading = (function (_super) {
        __extends(Loading, _super);
        function Loading(init) {
            var _this = _super.call(this, init) || this;
            _this._value = 'infinite';
            _this.ease = new Anim.PowerEase({ mode: 'inout' });
            _this.clock = new Anim.Clock({ repeat: 'forever', duration: 2 });
            _this.clock.timeupdate.connect(function (e) { return _this.invalidateDraw(); });
            return _this;
        }
        Loading.prototype.onVisible = function () {
            _super.prototype.onVisible.call(this);
            if (this._value == 'infinite')
                this.clock.begin();
        };
        Loading.prototype.onHidden = function () {
            _super.prototype.onHidden.call(this);
            this.clock.stop();
        };
        Loading.prototype.updateCanvas = function (ctx) {
            var p = this.clock.progress;
            if (p === undefined)
                p = 0;
            var p2 = (p > 0.8) ? (1 - ((p - 0.8) * 5)) : (p / 0.8);
            var w = this.layoutWidth;
            var h = this.layoutHeight;
            var x = w / 2;
            var y = h / 2;
            var lineWidth = Math.max(2, Math.min(5, Math.min(w, h) * 5 / 60));
            var radius = ((Math.min(w, h) - lineWidth) / 2) - 5;
            var startAngle = Math.PI * 2 * p;
            if (p > 0.8)
                startAngle = Math.PI * 2 * p - (Math.PI * 2 * 5 * this.ease.ease(p2) / 6);
            var endAngle = startAngle + (Math.PI / 4) + (Math.PI * 2 * 5 * this.ease.ease(p2) / 6);
            if (this._value != 'infinite') {
                startAngle = 0;
                endAngle = Math.PI * 2 * this._value;
            }
            ctx.strokeStyle = Ui.Color.create(this.getStyleProperty('color')).getCssRgba();
            ctx.beginPath();
            ctx.arc(x, y, radius, startAngle, endAngle, false);
            ctx.lineWidth = lineWidth;
            ctx.stroke();
        };
        Loading.prototype.measureCore = function (width, height) {
            return { width: 30, height: 30 };
        };
        Object.defineProperty(Loading.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (value != this._value) {
                    this._value = value;
                    if (value == 'infinite' && this.isVisible)
                        this.clock.begin();
                    else
                        this.clock.stop();
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Loading.style = {
            color: new Ui.Color(0.27, 0.52, 0.9)
        };
        return Loading;
    }(Ui.CanvasElement));
    Ui.Loading = Loading;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Entry = (function (_super) {
        __extends(Entry, _super);
        function Entry(init) {
            var _this = _super.call(this, init) || this;
            _this._value = '';
            _this._passwordMode = false;
            _this.captureValidated = false;
            _this.changed = new Core.Events();
            _this.validated = new Core.Events();
            _this.selectable = true;
            _this.focusable = true;
            _this.drawing.addEventListener('change', function (e) { return _this.onChange(e); });
            _this.drawing.addEventListener('paste', function (e) { return _this.onPaste(e); });
            _this.drawing.addEventListener('keyup', function (e) { return _this.onKeyUp(e); });
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            if (init) {
                if (init.passwordMode !== undefined)
                    _this.passwordMode = init.passwordMode;
                if (init.fontSize !== undefined)
                    _this.fontSize = init.fontSize;
                if (init.fontFamily !== undefined)
                    _this.fontFamily = init.fontFamily;
                if (init.fontWeight !== undefined)
                    _this.fontWeight = init.fontWeight;
                if (init.color !== undefined)
                    _this.color = init.color;
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.captureValidated !== undefined)
                    _this.captureValidated = init.captureValidated;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
                if (init.onvalidated)
                    _this.validated.connect(init.onvalidated);
            }
            return _this;
        }
        Object.defineProperty(Entry.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entry.prototype, "onvalidated", {
            set: function (value) { this.validated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entry.prototype, "passwordMode", {
            set: function (passwordMode) {
                if (this._passwordMode != passwordMode) {
                    this._passwordMode = passwordMode;
                    if (this._passwordMode)
                        this.drawing.setAttribute('type', 'password');
                    else
                        this.drawing.setAttribute('type', 'text');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entry.prototype, "fontSize", {
            get: function () {
                if (this._fontSize != undefined)
                    return this._fontSize;
                else
                    return this.getStyleProperty('fontSize');
            },
            set: function (fontSize) {
                if (this._fontSize != fontSize) {
                    this._fontSize = fontSize;
                    this.drawing.style.fontSize = this.fontSize + 'px';
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entry.prototype, "fontFamily", {
            get: function () {
                if (this._fontFamily != undefined)
                    return this._fontFamily;
                else
                    return this.getStyleProperty('fontFamily');
            },
            set: function (fontFamily) {
                if (this._fontFamily != fontFamily) {
                    this._fontFamily = fontFamily;
                    this.drawing.style.fontFamily = this.fontFamily;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entry.prototype, "fontWeight", {
            get: function () {
                if (this._fontWeight != undefined)
                    return this._fontWeight;
                else
                    return this.getStyleProperty('fontWeight');
            },
            set: function (fontWeight) {
                if (this._fontWeight != fontWeight) {
                    this._fontWeight = fontWeight;
                    this.drawing.style.fontWeight = this.fontWeight;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Entry.prototype.getColor = function () {
            if (this._color != undefined)
                return this._color;
            else
                return Ui.Color.create(this.getStyleProperty('color'));
        };
        Object.defineProperty(Entry.prototype, "color", {
            set: function (color) {
                if (this._color != color) {
                    this._color = Ui.Color.create(color);
                    if (Core.Navigator.supportRgba)
                        this.drawing.style.color = this.getColor().getCssRgba();
                    else
                        this.drawing.style.color = this.getColor().getCssHtml();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entry.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (value == undefined)
                    value = '';
                this._value = value;
                this.drawing.value = this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Entry.prototype, "inputMode", {
            get: function () {
                return this.drawing.inputMode;
            },
            set: function (value) {
                this.drawing.inputMode = value;
            },
            enumerable: true,
            configurable: true
        });
        Entry.prototype.onPaste = function (event) {
            var _this = this;
            event.stopPropagation();
            new Core.DelayedTask(0, function () { return _this.onAfterPaste(); });
        };
        Entry.prototype.onAfterPaste = function () {
            if (this.drawing.value != this._value) {
                this._value = this.drawing.value;
                this.changed.fire({ target: this, value: this._value });
            }
        };
        Entry.prototype.onChange = function (event) {
            if (this.drawing.value != this._value) {
                this._value = this.drawing.value;
                this.changed.fire({ target: this, value: this._value });
            }
        };
        Entry.prototype.onKeyDown = function (event) {
            var key = event.which;
            if ((key == 37) || (key == 39) || (key == 46) || (key == 8))
                event.stopPropagation();
            if (key == 13 && this.captureValidated) {
                event.stopPropagation();
                event.preventDefault();
            }
        };
        Entry.prototype.onKeyUp = function (event) {
            var key = event.which;
            if ((key == 37) || (key == 39) || (key == 46) || (key == 8))
                event.stopPropagation();
            if (this.drawing.value !== this._value) {
                this._value = this.drawing.value;
                this.changed.fire({ target: this, value: this._value });
            }
            if (key == 13) {
                this.validated.fire({ target: this, value: this._value });
                if (this.captureValidated) {
                    event.stopPropagation();
                    event.preventDefault();
                }
            }
        };
        Entry.prototype.renderDrawing = function () {
            var drawing = document.createElement('input');
            drawing.setAttribute('type', 'text');
            drawing.style.opacity = '1';
            drawing.style.border = '0px';
            drawing.style.margin = '0px';
            drawing.style.padding = '0px';
            drawing.style.outline = 'none';
            if (Core.Navigator.isIE)
                drawing.style.backgroundColor = 'rgba(255,255,255,0.01)';
            else
                drawing.style.background = 'none';
            if (Core.Navigator.isWebkit)
                drawing.style.webkitAppearance = 'none';
            drawing.style.fontSize = this.fontSize + 'px';
            drawing.style.fontFamily = this.fontFamily;
            drawing.style.fontWeight = this.fontWeight;
            drawing.style.color = this.getColor().getCssRgba();
            return drawing;
        };
        Entry.prototype.measureCore = function (width, height) {
            this.drawing.style.height = '';
            return { width: 10, height: Math.max(this.fontSize, this.drawing.scrollHeight) };
        };
        Entry.prototype.arrangeCore = function (width, height) {
            this.drawing.style.width = width + 'px';
            this.drawing.style.height = height + 'px';
        };
        Entry.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.drawing.blur();
            this.drawing.style.cursor = 'default';
            this.drawing.disabled = true;
        };
        Entry.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.drawing.style.cursor = 'auto';
            this.drawing.disabled = false;
        };
        Entry.prototype.onStyleChange = function () {
            this.drawing.style.fontSize = this.fontSize + 'px';
            this.drawing.style.fontFamily = this.fontFamily;
            this.drawing.style.fontWeight = this.fontWeight;
            if (Core.Navigator.supportRgba)
                this.drawing.style.color = this.getColor().getCssRgba();
            else
                this.drawing.style.color = this.getColor().getCssHtml();
            this.invalidateMeasure();
        };
        Entry.style = {
            color: new Ui.Color(0, 0, 0),
            fontSize: 14,
            fontFamily: 'Sans-serif',
            fontWeight: 'normal'
        };
        return Entry;
    }(Ui.Element));
    Ui.Entry = Entry;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Fixed = (function (_super) {
        __extends(Fixed, _super);
        function Fixed(init) {
            var _this = _super.call(this, init) || this;
            _this.resize = new Core.Events();
            return _this;
        }
        Object.defineProperty(Fixed.prototype, "onresize", {
            set: function (value) { this.resize.connect(value); },
            enumerable: true,
            configurable: true
        });
        Fixed.prototype.setPosition = function (item, x, y) {
            if (x !== undefined)
                item['Ui.Fixed.x'] = x;
            if (y !== undefined)
                item['Ui.Fixed.y'] = y;
            this.updateItemTransform(item);
        };
        Fixed.prototype.setRelativePosition = function (item, x, y, absolute) {
            if (absolute === void 0) { absolute = false; }
            if (x !== undefined)
                item['Ui.Fixed.relativeX'] = x;
            if (y !== undefined)
                item['Ui.Fixed.relativeY'] = y;
            item['Ui.Fixed.relativeAbsolute'] = absolute === true;
            this.updateItemTransform(item);
        };
        Fixed.prototype.append = function (child, x, y) {
            child['Ui.Fixed.x'] = x;
            child['Ui.Fixed.y'] = y;
            this.appendChild(child);
        };
        Fixed.prototype.remove = function (child) {
            delete (child['Ui.Fixed.x']);
            delete (child['Ui.Fixed.y']);
            delete (child['Ui.Fixed.relativeX']);
            delete (child['Ui.Fixed.relativeY']);
            delete (child['Ui.Fixed.relativeAbsolute']);
            this.removeChild(child);
        };
        Fixed.prototype.updateItemTransform = function (child) {
            var pos = this.getItemPosition(child);
            child.arrange(pos.x, pos.y, child.measureWidth, child.measureHeight);
        };
        Fixed.prototype.getItemPosition = function (child) {
            var x = 0;
            if (child['Ui.Fixed.x'] !== undefined)
                x = child['Ui.Fixed.x'];
            if (child['Ui.Fixed.relativeX'] !== undefined)
                x -= child['Ui.Fixed.relativeX'] * ((child['Ui.Fixed.relativeAbsolute'] === true) ? 1 : child.measureWidth);
            var y = 0;
            if (child['Ui.Fixed.y'] !== undefined)
                y = child['Ui.Fixed.y'];
            if (child['Ui.Fixed.relativeY'] !== undefined)
                y -= child['Ui.Fixed.relativeY'] * ((child['Ui.Fixed.relativeAbsolute'] === true) ? 1 : child.measureHeight);
            return new Ui.Point(x, y);
        };
        Fixed.prototype.measureCore = function (width, height) {
            for (var i = 0; i < this.children.length; i++)
                this.children[i].measure(width, height);
            return { width: 0, height: 0 };
        };
        Fixed.prototype.arrangeCore = function (width, height) {
            this.resize.fire({ target: this, width: width, height: height });
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var pos = this.getItemPosition(child);
                child.arrange(pos.x, pos.y, child.measureWidth, child.measureHeight);
            }
        };
        Fixed.prototype.onChildInvalidateMeasure = function (child, event) {
            if (event !== 'remove') {
                child.measure(this.layoutWidth, this.layoutHeight);
                var pos = this.getItemPosition(child);
                child.arrange(pos.x, pos.y, child.measureWidth, child.measureHeight);
            }
        };
        Fixed.prototype.onChildInvalidateArrange = function (child) {
            var pos = this.getItemPosition(child);
            child.arrange(pos.x, pos.y, child.measureWidth, child.measureHeight);
        };
        return Fixed;
    }(Ui.Container));
    Ui.Fixed = Fixed;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ToolBar = (function (_super) {
        __extends(ToolBar, _super);
        function ToolBar(init) {
            var _this = _super.call(this, init) || this;
            _this.scroll = new Ui.ScrollingArea();
            _this.scroll.scrollVertical = false;
            _this.appendChild(_this.scroll);
            _this.hbox = new Ui.HBox();
            _this.hbox.eventsHidden = true;
            _this.scroll.content = _this.hbox;
            return _this;
        }
        ToolBar.prototype.append = function (child, resizable) {
            if (resizable === void 0) { resizable = false; }
            this.hbox.append(child, resizable);
        };
        ToolBar.prototype.remove = function (child) {
            this.hbox.remove(child);
        };
        Object.defineProperty(ToolBar.prototype, "content", {
            set: function (content) {
                this.hbox.content = content;
            },
            enumerable: true,
            configurable: true
        });
        ToolBar.prototype.measureCore = function (width, height) {
            return this.scroll.measure(width, height);
        };
        ToolBar.prototype.arrangeCore = function (width, height) {
            this.scroll.arrange(0, 0, width, height);
        };
        ToolBar.prototype.onStyleChange = function () {
            var spacing = this.getStyleProperty('spacing');
            this.hbox.margin = spacing;
            this.hbox.spacing = spacing;
        };
        ToolBar.style = {
            spacing: 3
        };
        return ToolBar;
    }(Ui.Container));
    Ui.ToolBar = ToolBar;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var TextBgGraphic = (function (_super) {
        __extends(TextBgGraphic, _super);
        function TextBgGraphic() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.textHasFocus = false;
            return _this;
        }
        Object.defineProperty(TextBgGraphic.prototype, "hasFocus", {
            set: function (hasFocus) {
                if (this.textHasFocus !== hasFocus) {
                    this.textHasFocus = hasFocus;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBgGraphic.prototype, "background", {
            get: function () {
                var color;
                if (this.textHasFocus)
                    color = Ui.Color.create(this.getStyleProperty('focusBackground'));
                else
                    color = Ui.Color.create(this.getStyleProperty('background'));
                return color;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextBgGraphic.prototype, "backgroundBorder", {
            get: function () {
                if (this.textHasFocus)
                    return Ui.Color.create(this.getStyleProperty('focusBackgroundBorder'));
                else
                    return Ui.Color.create(this.getStyleProperty('backgroundBorder'));
            },
            enumerable: true,
            configurable: true
        });
        TextBgGraphic.prototype.updateCanvas = function (ctx) {
            var w = this.layoutWidth;
            var h = this.layoutHeight;
            var radius = this.getStyleProperty('radius');
            radius = Math.max(0, Math.min(radius, Math.min(w / 2, h / 2)));
            var borderWidth = this.getStyleProperty('borderWidth');
            ctx.lineWidth = borderWidth;
            var lh = Math.max(8, h - 4 - 16);
            if (this.isDisabled)
                ctx.globalAlpha = 0.2;
            ctx.fillStyle = this.background.getCssRgba();
            ctx.beginPath();
            ctx.roundRect(0 + borderWidth / 2, 0 + borderWidth / 2, w - borderWidth, h - borderWidth, radius, radius, radius, radius);
            ctx.closePath();
            ctx.fill();
            if (borderWidth > 0) {
                ctx.strokeStyle = this.backgroundBorder.getCssRgba();
                ctx.stroke();
            }
        };
        TextBgGraphic.prototype.onDisable = function () {
            this.invalidateDraw();
        };
        TextBgGraphic.prototype.onEnable = function () {
            this.invalidateDraw();
        };
        TextBgGraphic.prototype.onStyleChange = function () {
            this.invalidateDraw();
        };
        TextBgGraphic.style = {
            radius: 0,
            borderWidth: 1,
            background: Ui.Color.create('rgba(120,120,120,0.2)'),
            focusBackground: Ui.Color.create('rgba(33,211,255,0.4)'),
            backgroundBorder: Ui.Color.create('rgba(60,60,60,0.2)'),
            focusBackgroundBorder: Ui.Color.create('rgba(60,60,60,0.2)')
        };
        return TextBgGraphic;
    }(Ui.CanvasElement));
    Ui.TextBgGraphic = TextBgGraphic;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var TextField = (function (_super) {
        __extends(TextField, _super);
        function TextField(init) {
            var _this = _super.call(this, init) || this;
            _this.changed = new Core.Events();
            _this.validated = new Core.Events();
            _this.graphic = new Ui.TextBgGraphic();
            _this.append(_this.graphic);
            _this.textholder = new Ui.Label({
                opacity: 0.5,
                horizontalAlign: 'left',
                margin: 7,
                marginLeft: 10,
                marginRight: 10
            });
            _this.append(_this.textholder);
            _this.entry = new Ui.Entry({
                margin: 7,
                marginLeft: 10,
                marginRight: 10,
                fontSize: 16
            });
            _this.entry.focused.connect(function () { return _this.onEntryFocus(); });
            _this.entry.blurred.connect(function () { return _this.onEntryBlur(); });
            _this.append(_this.entry);
            _this.entry.changed.connect(function (e) { return _this.onEntryChange(e.target, e.value); });
            _this.entry.validated.connect(function () { return _this.validated.fire({ target: _this }); });
            if (init) {
                if (init.textHolder !== undefined)
                    _this.textHolder = init.textHolder;
                if (init.passwordMode !== undefined)
                    _this.passwordMode = init.passwordMode;
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.captureValidated !== undefined)
                    _this.captureValidated = init.captureValidated;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
                if (init.onvalidated)
                    _this.validated.connect(init.onvalidated);
            }
            return _this;
        }
        Object.defineProperty(TextField.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField.prototype, "onvalidated", {
            set: function (value) { this.validated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField.prototype, "textHolder", {
            set: function (text) {
                this.textholder.text = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField.prototype, "passwordMode", {
            set: function (passwordMode) {
                this.entry.passwordMode = passwordMode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField.prototype, "value", {
            get: function () {
                return this.entry.value;
            },
            set: function (value) {
                this.entry.value = value;
                if ((value === undefined) || (value === ''))
                    this.textholder.show();
                else
                    this.textholder.hide();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField.prototype, "captureValidated", {
            get: function () {
                return this.entry.captureValidated;
            },
            set: function (value) {
                this.entry.captureValidated = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextField.prototype, "inputMode", {
            get: function () {
                return this.entry.inputMode;
            },
            set: function (value) {
                this.entry.inputMode = value;
            },
            enumerable: true,
            configurable: true
        });
        TextField.prototype.onEntryFocus = function () {
            this.textholder.hide();
            this.graphic.hasFocus = true;
        };
        TextField.prototype.onEntryBlur = function () {
            if (this.value === '')
                this.textholder.show();
            this.graphic.hasFocus = false;
        };
        TextField.prototype.onEntryChange = function (entry, value) {
            this.changed.fire({ target: this, value: value });
        };
        return TextField;
    }(Ui.LBox));
    Ui.TextField = TextField;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var CheckBoxGraphic = (function (_super) {
        __extends(CheckBoxGraphic, _super);
        function CheckBoxGraphic() {
            var _this = _super.call(this) || this;
            _this.isDown = false;
            _this.isChecked = false;
            _this.borderWidth = 2;
            _this.radius = 3;
            _this.color = new Ui.Color(1, 1, 1);
            _this.activeColor = new Ui.Color(0.31, 0.66, 0.31);
            _this.checkColor = new Ui.Color(1, 1, 1);
            return _this;
        }
        CheckBoxGraphic.prototype.getIsDown = function () {
            return this.isDown;
        };
        CheckBoxGraphic.prototype.setIsDown = function (isDown) {
            if (this.isDown != isDown) {
                this.isDown = isDown;
                this.invalidateDraw();
            }
        };
        CheckBoxGraphic.prototype.getIsChecked = function () {
            return this.isChecked;
        };
        CheckBoxGraphic.prototype.setIsChecked = function (isChecked) {
            if (this.isChecked != isChecked) {
                this.isChecked = isChecked;
                this.invalidateDraw();
            }
        };
        CheckBoxGraphic.prototype.setRadius = function (radius) {
            if (this.radius !== radius) {
                this.radius = radius;
                this.invalidateDraw();
            }
        };
        CheckBoxGraphic.prototype.getColor = function () {
            return this.color;
        };
        CheckBoxGraphic.prototype.setColor = function (color) {
            if (this.color !== color) {
                this.color = Ui.Color.create(color);
                this.invalidateDraw();
            }
        };
        CheckBoxGraphic.prototype.setBorderWidth = function (borderWidth) {
            if (this.borderWidth !== borderWidth) {
                this.borderWidth = borderWidth;
                this.invalidateDraw();
            }
        };
        CheckBoxGraphic.prototype.setCheckColor = function (color) {
            if (this.checkColor !== color) {
                this.checkColor = Ui.Color.create(color);
                this.invalidateDraw();
            }
        };
        CheckBoxGraphic.prototype.getCheckColor = function () {
            var deltaY = 0;
            if (this.getIsDown())
                deltaY = 0.20;
            var yuv = this.checkColor.getYuv();
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v);
        };
        CheckBoxGraphic.prototype.updateCanvas = function (ctx) {
            var w = this.layoutWidth;
            var h = this.layoutHeight;
            var cx = w / 2;
            var cy = h / 2;
            var radius = Math.min(this.radius, 10);
            if (this.getIsDown())
                ctx.globalAlpha = 0.8;
            if (this.isDisabled)
                ctx.globalAlpha = 0.4;
            if (!this.isChecked) {
                ctx.strokeStyle = this.getColor().getCssRgba();
                ctx.lineWidth = this.borderWidth;
                ctx.beginPath();
                ctx.roundRect(cx - 10 + this.borderWidth / 2, cy - 10 + this.borderWidth / 2, 20 - this.borderWidth, 20 - this.borderWidth, radius, radius, radius, radius);
                ctx.closePath();
                ctx.stroke();
            }
            else {
                ctx.fillStyle = this.getColor().getCssRgba();
                ctx.beginPath();
                ctx.roundRect(cx - 10, cy - 10, 20, 20, radius, radius, radius, radius);
                ctx.closePath();
                ctx.fill();
                ctx.globalAlpha = 1;
                var iconSize = 20;
                var path = Ui.Icon.getPath('check');
                var scale = iconSize / 48;
                ctx.save();
                ctx.translate((w - iconSize) / 2, (h - iconSize) / 2);
                ctx.scale(scale, scale);
                ctx.fillStyle = this.getCheckColor().getCssRgba();
                ctx.beginPath();
                ctx.svgPath(path);
                ctx.closePath();
                ctx.fill();
                ctx.restore();
            }
        };
        CheckBoxGraphic.prototype.measureCore = function (width, height) {
            return { width: 30, height: 30 };
        };
        CheckBoxGraphic.prototype.onDisable = function () {
            this.invalidateDraw();
        };
        CheckBoxGraphic.prototype.onEnable = function () {
            this.invalidateDraw();
        };
        return CheckBoxGraphic;
    }(Ui.CanvasElement));
    Ui.CheckBoxGraphic = CheckBoxGraphic;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var CheckBox = (function (_super) {
        __extends(CheckBox, _super);
        function CheckBox(init) {
            var _this = _super.call(this, init) || this;
            _this._isToggled = false;
            _this.changed = new Core.Events();
            _this.toggled = new Core.Events();
            _this.untoggled = new Core.Events();
            _this.role = 'checkbox';
            _this.drawing.setAttribute('aria-checked', 'false');
            _this.padding = 2;
            _this.drawing.style.borderWidth = '1px';
            _this.drawing.style.borderStyle = 'solid';
            _this.hbox = new Ui.HBox();
            _this.append(_this.hbox);
            _this.graphic = new Ui.CheckBoxGraphic();
            _this.hbox.append(_this.graphic);
            _this.downed.connect(function () { return _this.onCheckBoxDown(); });
            _this.upped.connect(function () { return _this.onCheckBoxUp(); });
            _this.focused.connect(function () { return _this.onCheckFocus(); });
            _this.blurred.connect(function () { return _this.onCheckBlur(); });
            _this.pressed.connect(function () { return _this.onCheckPress(); });
            if (init) {
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.text !== undefined)
                    _this.text = init.text;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
                if (init.ontoggled)
                    _this.toggled.connect(init.ontoggled);
                if (init.onuntoggled)
                    _this.untoggled.connect(init.onuntoggled);
            }
            return _this;
        }
        Object.defineProperty(CheckBox.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "ontoggled", {
            set: function (value) { this.toggled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "onuntoggled", {
            set: function (value) { this.untoggled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "isToggled", {
            get: function () {
                return this._isToggled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "value", {
            get: function () {
                return this.isToggled;
            },
            set: function (value) {
                if (value)
                    this.toggle();
                else
                    this.untoggle();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text === undefined) {
                    if (this.contentBox !== undefined) {
                        this.hbox.remove(this.contentBox);
                        this.contentBox = undefined;
                    }
                    this._text = undefined;
                    this._content = undefined;
                }
                else {
                    if (this._text !== undefined) {
                        this._text = text;
                        this.contentBox.text = this._text;
                    }
                    else {
                        if (this._content !== undefined) {
                            this.hbox.remove(this.contentBox);
                            this._content = undefined;
                        }
                        this._text = text;
                        this.contentBox = new Ui.Text({ margin: 8, text: this._text, verticalAlign: 'center' });
                        this.hbox.append(this.contentBox, true);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (content === undefined) {
                    if (this.contentBox !== undefined) {
                        this.hbox.remove(this.contentBox);
                        this.contentBox = undefined;
                    }
                    this._text = undefined;
                    this._content = undefined;
                }
                else {
                    if (this._text !== undefined) {
                        this.hbox.remove(this.contentBox);
                        this._text = undefined;
                    }
                    if (this._content !== undefined)
                        this.contentBox.remove(this._content);
                    else {
                        this.contentBox = new Ui.LBox({ padding: 8, verticalAlign: 'center' });
                        this.hbox.append(this.contentBox);
                    }
                    this._content = content;
                    this.contentBox.append(this._content);
                }
            },
            enumerable: true,
            configurable: true
        });
        CheckBox.prototype.toggle = function () {
            this.onToggle();
        };
        CheckBox.prototype.untoggle = function () {
            this.onUntoggle();
        };
        CheckBox.prototype.onCheckPress = function () {
            if (!this._isToggled)
                this.onToggle();
            else
                this.onUntoggle();
        };
        CheckBox.prototype.onToggle = function () {
            if (!this._isToggled) {
                this._isToggled = true;
                this.drawing.setAttribute('aria-checked', 'true');
                this.toggled.fire({ target: this });
                this.graphic.setIsChecked(true);
                this.graphic.setColor(this.getStyleProperty('activeColor'));
                this.changed.fire({ target: this, value: true });
            }
        };
        CheckBox.prototype.onUntoggle = function () {
            if (this._isToggled) {
                this._isToggled = false;
                this.drawing.setAttribute('aria-checked', 'false');
                this.untoggled.fire({ target: this });
                this.graphic.setIsChecked(false);
                this.graphic.setColor(this.getStyleProperty('color'));
                this.changed.fire({ target: this, value: false });
            }
        };
        CheckBox.prototype.onCheckFocus = function () {
            if (!this.getIsMouseFocus()) {
                this.graphic.setColor(this.getStyleProperty('focusColor'));
                this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('focusBackgroundBorder')).getCssRgba();
            }
        };
        CheckBox.prototype.onCheckBlur = function () {
            if (this._isToggled)
                this.graphic.setColor(this.getStyleProperty('activeColor'));
            else
                this.graphic.setColor(this.getStyleProperty('color'));
            this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('backgroundBorder')).getCssRgba();
        };
        CheckBox.prototype.onCheckBoxDown = function () {
            this.graphic.setIsDown(true);
        };
        CheckBox.prototype.onCheckBoxUp = function () {
            this.graphic.setIsDown(false);
        };
        CheckBox.prototype.onStyleChange = function () {
            if (this.hasFocus) {
                this.graphic.setColor(this.getStyleProperty('focusColor'));
                this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('focusBackgroundBorder')).getCssRgba();
            }
            else {
                this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('backgroundBorder')).getCssRgba();
                if (this._isToggled)
                    this.graphic.setColor(this.getStyleProperty('activeColor'));
                else
                    this.graphic.setColor(this.getStyleProperty('color'));
            }
            this.graphic.setCheckColor(this.getStyleProperty('checkColor'));
            this.graphic.setBorderWidth(this.getStyleProperty('checkWidth'));
            this.graphic.setRadius(this.getStyleProperty('radius'));
            this.drawing.style.borderWidth = parseInt(this.getStyleProperty('borderWidth')) + "px";
        };
        CheckBox.style = {
            borderWidth: 0,
            checkWidth: 2,
            color: '#444444',
            activeColor: '#07a0e5',
            focusColor: '#21d3ff',
            checkColor: '#ffffff',
            backgroundBorder: 'rgba(250,250,250,0)',
            focusBackgroundBorder: '#21d3ff',
            radius: 3
        };
        return CheckBox;
    }(Ui.Pressable));
    Ui.CheckBox = CheckBox;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Frame = (function (_super) {
        __extends(Frame, _super);
        function Frame(init) {
            var _this = _super.call(this, init) || this;
            _this._fill = new Ui.Color();
            _this._radiusTopLeft = 0;
            _this._radiusTopRight = 0;
            _this._radiusBottomLeft = 0;
            _this._radiusBottomRight = 0;
            _this._frameWidth = 10;
            if (init) {
                if (init.frameWidth !== undefined)
                    _this.frameWidth = init.frameWidth;
                if (init.fill !== undefined)
                    _this.fill = init.fill;
                if (init.radius !== undefined)
                    _this.radius = init.radius;
                if (init.radiusTopLeft !== undefined)
                    _this.radiusTopLeft = init.radiusTopLeft;
                if (init.radiusTopRight !== undefined)
                    _this.radiusTopRight = init.radiusTopRight;
                if (init.radiusBottomLeft !== undefined)
                    _this.radiusBottomLeft = init.radiusBottomLeft;
                if (init.radiusBottomRight !== undefined)
                    _this.radiusBottomRight = init.radiusBottomRight;
            }
            return _this;
        }
        Object.defineProperty(Frame.prototype, "frameWidth", {
            get: function () {
                return this._frameWidth;
            },
            set: function (frameWidth) {
                if (frameWidth != this._frameWidth) {
                    this._frameWidth = frameWidth;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Frame.prototype, "fill", {
            set: function (fill) {
                if (this._fill != fill) {
                    if (typeof (fill) === 'string')
                        fill = Ui.Color.create(fill);
                    this._fill = fill;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Frame.prototype, "radius", {
            set: function (radius) {
                this.radiusTopLeft = radius;
                this.radiusTopRight = radius;
                this.radiusBottomLeft = radius;
                this.radiusBottomRight = radius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Frame.prototype, "radiusTopLeft", {
            get: function () {
                return this._radiusTopLeft;
            },
            set: function (radiusTopLeft) {
                if (this._radiusTopLeft != radiusTopLeft) {
                    this._radiusTopLeft = radiusTopLeft;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Frame.prototype, "radiusTopRight", {
            get: function () {
                return this._radiusTopRight;
            },
            set: function (radiusTopRight) {
                if (this._radiusTopRight != radiusTopRight) {
                    this._radiusTopRight = radiusTopRight;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Frame.prototype, "radiusBottomLeft", {
            get: function () {
                return this._radiusBottomLeft;
            },
            set: function (radiusBottomLeft) {
                if (this._radiusBottomLeft != radiusBottomLeft) {
                    this._radiusBottomLeft = radiusBottomLeft;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Frame.prototype, "radiusBottomRight", {
            get: function () {
                return this._radiusBottomRight;
            },
            set: function (radiusBottomRight) {
                if (this._radiusBottomRight != radiusBottomRight) {
                    this._radiusBottomRight = radiusBottomRight;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Frame.prototype.updateCanvas = function (ctx) {
            var w = this.layoutWidth;
            var h = this.layoutHeight;
            var topLeft = this._radiusTopLeft;
            var topRight = this._radiusTopRight;
            if (topLeft + topRight > w) {
                topLeft = w / 2;
                topRight = w / 2;
            }
            var bottomLeft = this._radiusBottomLeft;
            var bottomRight = this._radiusBottomRight;
            if (bottomLeft + bottomRight > w) {
                bottomLeft = w / 2;
                bottomRight = w / 2;
            }
            if (topLeft + bottomLeft > h) {
                topLeft = h / 2;
                bottomLeft = h / 2;
            }
            if (topRight + bottomRight > h) {
                topRight = h / 2;
                bottomRight = h / 2;
            }
            ctx.beginPath();
            ctx.roundRect(0, 0, w, h, topLeft, topRight, bottomRight, bottomLeft);
            ctx.roundRect(this._frameWidth, this._frameWidth, w - (this._frameWidth * 2), h - (this._frameWidth * 2), Math.max(0, topLeft - this.frameWidth), Math.max(0, topRight - this.frameWidth), Math.max(0, bottomRight - this.frameWidth), Math.max(0, bottomLeft - this.frameWidth), true);
            ctx.closePath();
            if (this._fill instanceof Ui.Color)
                ctx.fillStyle = this._fill.getCssRgba();
            else if (this._fill instanceof Ui.LinearGradient)
                ctx.fillStyle = this._fill.getCanvasGradient(ctx, w, h);
            ctx.fill();
        };
        return Frame;
    }(Ui.CanvasElement));
    Ui.Frame = Frame;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ScaleBox = (function (_super) {
        __extends(ScaleBox, _super);
        function ScaleBox(init) {
            var _this = _super.call(this, init) || this;
            _this._fixedWidth = 400;
            _this._fixedHeight = 300;
            _this._itemAlign = 'center';
            if (init) {
                if (init.fixedWidth !== undefined)
                    _this.fixedWidth = init.fixedWidth;
                if (init.fixedHeight !== undefined)
                    _this.fixedHeight = init.fixedHeight;
                if (init.itemAlign !== undefined)
                    _this.itemAlign = init.itemAlign;
                if (init.content !== undefined)
                    _this.content = init.content;
            }
            return _this;
        }
        ScaleBox.prototype.setFixedSize = function (width, height) {
            var changed = false;
            if ((width !== undefined) && (this._fixedWidth !== width)) {
                this._fixedWidth = width;
                changed = true;
            }
            if ((height !== undefined) && (this._fixedHeight !== height)) {
                this._fixedHeight = height;
                changed = true;
            }
            if (changed)
                this.invalidateMeasure();
        };
        Object.defineProperty(ScaleBox.prototype, "fixedWidth", {
            set: function (width) {
                this.setFixedSize(width, undefined);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleBox.prototype, "fixedHeight", {
            set: function (height) {
                this.setFixedSize(undefined, height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleBox.prototype, "content", {
            set: function (content) {
                this.clear();
                if (content) {
                    content.setTransformOrigin(0, 0);
                    this.appendChild(content);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleBox.prototype, "itemAlign", {
            get: function () {
                return this._itemAlign;
            },
            set: function (align) {
                if (this._itemAlign != align) {
                    this._itemAlign = align;
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        ScaleBox.prototype.measureCore = function (width, height) {
            var ratio = this._fixedWidth / this._fixedHeight;
            var aratio = width / height;
            var aw, ah;
            if (ratio > aratio) {
                aw = width;
                ah = aw / ratio;
            }
            else {
                ah = height;
                aw = ah * ratio;
            }
            for (var i = 0; i < this.children.length; i++)
                this.children[i].measure(this._fixedWidth, this._fixedHeight);
            return { width: aw, height: ah };
        };
        ScaleBox.prototype.arrangeCore = function (width, height) {
            var ratio = this._fixedWidth / this._fixedHeight;
            var aratio = width / height;
            var aw, ah, ax, ay;
            if (ratio > aratio) {
                aw = width;
                ah = aw / ratio;
                ax = 0;
                ay = (height - ah) / 2;
            }
            else {
                ah = height;
                aw = ah * ratio;
                ay = 0;
                if (this._itemAlign == 'left')
                    ax = 0;
                else if (this._itemAlign == 'right')
                    ax = width - aw;
                else
                    ax = (width - aw) / 2;
            }
            var scale = aw / this._fixedWidth;
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                child.arrange(0, 0, this._fixedWidth, this._fixedHeight);
                child.transform = Ui.Matrix.createTranslate(ax, ay).multiply(Ui.Matrix.createScale(scale, scale));
            }
        };
        return ScaleBox;
    }(Ui.Container));
    Ui.ScaleBox = ScaleBox;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var TextArea = (function (_super) {
        __extends(TextArea, _super);
        function TextArea(init) {
            var _this = _super.call(this, init) || this;
            _this._value = '';
            _this.changed = new Core.Events();
            _this.selectable = true;
            _this.focusable = true;
            _this.drawing.addEventListener('change', function (e) { return _this.onChange(e); });
            _this.drawing.addEventListener('paste', function (e) { return _this.onPaste(e); });
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            _this.drawing.addEventListener('keyup', function (e) { return _this.onKeyUp(e); });
            if (init) {
                if (init.fontSize !== undefined)
                    _this.fontSize = init.fontSize;
                if (init.fontFamily !== undefined)
                    _this.fontFamily = init.fontFamily;
                if (init.fontWeight !== undefined)
                    _this.fontWeight = init.fontWeight;
                if (init.color !== undefined)
                    _this.color = init.color;
                if (init.value !== undefined)
                    _this.value = init.value;
            }
            return _this;
        }
        Object.defineProperty(TextArea.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "fontSize", {
            get: function () {
                if (this._fontSize !== undefined)
                    return this._fontSize;
                else
                    return this.getStyleProperty('fontSize');
            },
            set: function (fontSize) {
                if (this._fontSize != fontSize) {
                    this._fontSize = fontSize;
                    this.drawing.style.fontSize = this.fontSize + 'px';
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "fontFamily", {
            get: function () {
                if (this._fontFamily !== undefined)
                    return this._fontFamily;
                else
                    return this.getStyleProperty('fontFamily');
            },
            set: function (fontFamily) {
                if (this._fontFamily !== fontFamily) {
                    this._fontFamily = fontFamily;
                    this.drawing.style.fontFamily = this.fontFamily;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "fontWeight", {
            get: function () {
                if (this._fontWeight !== undefined)
                    return this._fontWeight;
                else
                    return this.getStyleProperty('fontWeight');
            },
            set: function (fontWeight) {
                if (this._fontWeight !== fontWeight) {
                    this._fontWeight = fontWeight;
                    this.drawing.style.fontWeight = this.fontWeight;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "color", {
            set: function (color) {
                if (this._color !== color) {
                    this._color = Ui.Color.create(color);
                    if (Core.Navigator.supportRgba)
                        this.drawing.style.color = this.getColor().getCssRgba();
                    else
                        this.drawing.style.color = this.getColor().getCssHtml();
                }
            },
            enumerable: true,
            configurable: true
        });
        TextArea.prototype.getColor = function () {
            if (this._color !== undefined)
                return this._color;
            else
                return Ui.Color.create(this.getStyleProperty('color'));
        };
        Object.defineProperty(TextArea.prototype, "value", {
            get: function () {
                return this.drawing.value;
            },
            set: function (value) {
                if ((value === null) || (value === undefined))
                    this.drawing.value = '';
                else
                    this.drawing.value = value;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        TextArea.prototype.setOffset = function (offsetX, offsetY) {
            this.drawing.scrollLeft = offsetX;
            this.drawing.scrollTop = offsetY;
        };
        Object.defineProperty(TextArea.prototype, "offsetX", {
            get: function () {
                return this.drawing.scrollLeft;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextArea.prototype, "offsetY", {
            get: function () {
                return this.drawing.scrollTop;
            },
            enumerable: true,
            configurable: true
        });
        TextArea.prototype.onPaste = function (event) {
            var _this = this;
            event.stopPropagation();
            new Core.DelayedTask(0, function () { return _this.onAfterPaste(); });
        };
        TextArea.prototype.onAfterPaste = function () {
            if (this.drawing.value != this._value) {
                this._value = this.drawing.value;
                this.changed.fire({ target: this, value: this._value });
                this.invalidateMeasure();
            }
        };
        TextArea.prototype.onChange = function (event) {
            if (this.drawing.value != this._value) {
                this._value = this.drawing.value;
                this.changed.fire({ target: this, value: this._value });
                this.invalidateMeasure();
            }
        };
        TextArea.prototype.onKeyDown = function (event) {
            var key = event.which;
            if ((key == 37) || (key == 39) || (key == 38) || (key == 40) || (key == 46) || (key == 8))
                event.stopPropagation();
        };
        TextArea.prototype.onKeyUp = function (event) {
            var key = event.which;
            if ((key == 37) || (key == 39) || (key == 38) || (key == 40) || (key == 46) || (key == 8))
                event.stopPropagation();
            if (this.drawing.value !== this._value) {
                this._value = this.drawing.value;
                this.changed.fire({ target: this, value: this._value });
                this.invalidateMeasure();
            }
        };
        TextArea.prototype.renderDrawing = function () {
            var drawing = document.createElement('textarea');
            drawing.setAttribute('rows', '1');
            drawing.setAttribute('cols', '1');
            drawing.style.opacity = '1';
            drawing.style.display = 'block';
            drawing.style.resize = 'none';
            drawing.style.overflow = 'hidden';
            drawing.style.border = '0px';
            drawing.style.margin = '0px';
            drawing.style.padding = '0px';
            drawing.style.outline = 'none';
            if (Core.Navigator.isIE)
                drawing.style.backgroundColor = 'rgba(255,255,255,0.01)';
            else
                drawing.style.background = 'none';
            if (Core.Navigator.isWebkit)
                drawing.style.webkitAppearance = 'none';
            drawing.style.fontSize = this.fontSize + 'px';
            drawing.style.fontFamily = this.fontFamily;
            drawing.style.fontWeight = this.fontWeight;
            if (Core.Navigator.supportRgba)
                drawing.style.color = this.getColor().getCssRgba();
            else
                drawing.style.color = this.getColor().getCssHtml();
            return drawing;
        };
        TextArea.prototype.measureCore = function (width, height) {
            this.drawing.style.width = width + 'px';
            this.drawing.style.height = '';
            var size = { width: this.drawing.scrollWidth, height: Math.max(this.fontSize, this.drawing.scrollHeight) };
            this.drawing.style.width = this.layoutWidth + 'px';
            this.drawing.style.height = this.layoutHeight + 'px';
            return size;
        };
        TextArea.prototype.arrangeCore = function (width, height) {
            this.drawing.style.width = width + 'px';
            this.drawing.style.height = height + 'px';
        };
        TextArea.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.drawing.blur();
            this.drawing.style.cursor = 'default';
            this.drawing.disabled = true;
        };
        TextArea.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.drawing.style.cursor = 'auto';
            this.drawing.disabled = false;
        };
        TextArea.prototype.onStyleChange = function () {
            this.drawing.style.fontSize = this.fontSize + 'px';
            this.drawing.style.fontFamily = this.fontFamily;
            this.drawing.style.fontWeight = this.fontWeight;
            if (Core.Navigator.supportRgba)
                this.drawing.style.color = this.getColor().getCssRgba();
            else
                this.drawing.style.color = this.getColor().getCssHtml();
            this.invalidateMeasure();
        };
        TextArea.style = {
            color: new Ui.Color(),
            fontSize: 14,
            fontFamily: 'Sans-serif',
            fontWeight: 'normal'
        };
        return TextArea;
    }(Ui.Element));
    Ui.TextArea = TextArea;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var TextAreaField = (function (_super) {
        __extends(TextAreaField, _super);
        function TextAreaField(init) {
            var _this = _super.call(this, init) || this;
            _this.changed = new Core.Events();
            _this.graphic = new Ui.TextBgGraphic();
            _this.append(_this.graphic);
            _this.textholder = new Ui.Label({
                opacity: 0.5,
                horizontalAlign: 'left',
                margin: 7,
                marginLeft: 10,
                marginRight: 10
            });
            _this.append(_this.textholder);
            _this.textarea = new Ui.TextArea({
                margin: 7,
                marginLeft: 10,
                marginRight: 10,
                fontSize: 16
            });
            _this.append(_this.textarea);
            _this.textarea.focused.connect(function () { return _this.onTextAreaFocus(); });
            _this.textarea.blurred.connect(function () { return _this.onTextAreaBlur(); });
            _this.textarea.changed.connect(function (e) { return _this.onTextAreaChange(e.target, e.value); });
            if (init) {
                if (init.textHolder !== undefined)
                    _this.textHolder = init.textHolder;
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
            }
            return _this;
        }
        Object.defineProperty(TextAreaField.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextAreaField.prototype, "textHolder", {
            set: function (text) {
                this.textholder.text = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextAreaField.prototype, "value", {
            get: function () {
                return this.textarea.value;
            },
            set: function (value) {
                this.textarea.value = value;
                if ((value === undefined) || (value === ''))
                    this.textholder.show();
                else
                    this.textholder.hide();
            },
            enumerable: true,
            configurable: true
        });
        TextAreaField.prototype.onTextAreaFocus = function () {
            this.textholder.hide();
            this.graphic.hasFocus = true;
        };
        TextAreaField.prototype.onTextAreaBlur = function () {
            if (this.value === '')
                this.textholder.show();
            this.graphic.hasFocus = false;
        };
        TextAreaField.prototype.onTextAreaChange = function (entry, value) {
            this.changed.fire({ target: this, value: value });
        };
        return TextAreaField;
    }(Ui.LBox));
    Ui.TextAreaField = TextAreaField;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Grid = (function (_super) {
        __extends(Grid, _super);
        function Grid(init) {
            var _this = _super.call(this, init) || this;
            _this._cols = [{ auto: true, star: false, absolute: false, actualWidth: 0, offset: 0, width: 0 }];
            _this._rows = [{ auto: true, star: false, absolute: false, actualHeight: 0, offset: 0, height: 0 }];
            if (init) {
                if (init.cols !== undefined)
                    _this.cols = init.cols;
                if (init.rows !== undefined)
                    _this.rows = init.rows;
            }
            return _this;
        }
        Object.defineProperty(Grid.prototype, "cols", {
            set: function (colsDef) {
                this._cols = [];
                var cols = colsDef.split(',');
                for (var i = 0; i < cols.length; i++) {
                    var col = cols[i];
                    if (col == 'auto')
                        this._cols.push({ auto: true, star: false, absolute: false, actualWidth: 0, offset: 0, width: 0 });
                    else if (col == '*')
                        this._cols.push({ auto: false, star: true, absolute: false, actualWidth: 0, offset: 0, width: 1 });
                    else if (col.match(/^[0-9]+\.?[0-9]*\*$/))
                        this._cols.push({ auto: false, star: true, absolute: false, actualWidth: 0, offset: 0, width: parseInt(col.slice(0, col.length - 1)) });
                    else if (col.match(/^[0-9]+$/))
                        this._cols.push({ auto: false, star: false, absolute: true, actualWidth: 0, offset: 0, width: parseInt(col) });
                    else if (DEBUG)
                        throw ('Ui.Grid column definition "' + col + '" not supported');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Grid.prototype, "rows", {
            set: function (rowsDef) {
                this._rows = [];
                var rows = rowsDef.split(',');
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    if (row == 'auto')
                        this._rows.push({ auto: true, star: false, absolute: false, actualHeight: 0, offset: 0, height: 0 });
                    else if (row == '*')
                        this._rows.push({ auto: false, star: true, absolute: false, actualHeight: 0, offset: 0, height: 1 });
                    else if (row.match(/^[0-9]+\.?[0-9]*\*$/))
                        this._rows.push({ auto: false, star: true, absolute: false, actualHeight: 0, offset: 0, height: parseInt(row.slice(0, row.length - 1)) });
                    else if (row.match(/^[0-9]+$/))
                        this._rows.push({ auto: false, star: false, absolute: true, actualHeight: 0, offset: 0, height: parseInt(row) });
                    else if (DEBUG)
                        throw ('Ui.Grid row definition "' + row + '" not supported');
                }
            },
            enumerable: true,
            configurable: true
        });
        Grid.prototype.attach = function (child, col, row, colSpan, rowSpan) {
            if (colSpan === void 0) { colSpan = 1; }
            if (rowSpan === void 0) { rowSpan = 1; }
            Grid.setCol(child, col);
            Grid.setRow(child, row);
            Grid.setColSpan(child, colSpan);
            Grid.setRowSpan(child, rowSpan);
            this.appendChild(child);
        };
        Grid.prototype.detach = function (child) {
            this.removeChild(child);
        };
        Object.defineProperty(Grid.prototype, "content", {
            set: function (value) {
                while (this.firstChild)
                    this.removeChild(this.firstChild);
                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                    var item = value_1[_i];
                    this.attach(item.child, item.col, item.row, item.colSpan, item.rowSpan);
                }
            },
            enumerable: true,
            configurable: true
        });
        Grid.prototype.getColMin = function (colPos) {
            var i;
            var i2;
            var currentColumn;
            var col = this._cols[colPos];
            var min = 0;
            for (i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var childCol = Ui.Grid.getCol(child);
                var childColSpan = Ui.Grid.getColSpan(child);
                if ((childColSpan == 1) && (childCol == colPos)) {
                    if (child.measureWidth > min)
                        min = child.measureWidth;
                }
                else if ((childCol <= colPos) && (childCol + childColSpan > colPos)) {
                    var isLastAuto = true;
                    var hasStar = false;
                    var prev = 0.0;
                    for (i2 = childCol; i2 < colPos; i2++) {
                        currentColumn = this._cols[i2];
                        prev += currentColumn.actualWidth;
                        if (currentColumn.star) {
                            hasStar = true;
                            break;
                        }
                    }
                    if (!hasStar) {
                        for (i2 = colPos + 1; i2 < childCol + childColSpan; i2++) {
                            currentColumn = this._cols[i2];
                            if (currentColumn.star) {
                                hasStar = true;
                                break;
                            }
                            if (currentColumn.auto) {
                                isLastAuto = false;
                                break;
                            }
                        }
                    }
                    if (!hasStar && isLastAuto) {
                        if ((child.measureWidth - prev) > min)
                            min = child.measureWidth - prev;
                    }
                }
            }
            return min;
        };
        Grid.prototype.getRowMin = function (rowPos) {
            var i;
            var i2;
            var currentRow;
            var row = this._rows[rowPos];
            var min = 0;
            for (i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var childRow = Ui.Grid.getRow(child);
                var childRowSpan = Ui.Grid.getRowSpan(child);
                if ((childRowSpan == 1) && (childRow == rowPos)) {
                    if (child.measureHeight > min)
                        min = child.measureHeight;
                }
                else if ((childRow <= rowPos) && (childRow + childRowSpan > rowPos)) {
                    var isLastAuto = true;
                    var hasStar = false;
                    var prev = 0.0;
                    for (i2 = childRow; i2 < rowPos; i2++) {
                        currentRow = this._rows[i2];
                        prev += currentRow.actualHeight;
                        if (currentRow.star) {
                            hasStar = true;
                            break;
                        }
                    }
                    if (!hasStar) {
                        for (i2 = rowPos + 1; i2 < childRow + childRowSpan; i2++) {
                            currentRow = this._rows[i2];
                            if (currentRow.star) {
                                hasStar = true;
                                break;
                            }
                            if (currentRow.auto) {
                                isLastAuto = false;
                                break;
                            }
                        }
                    }
                    if (!hasStar && isLastAuto) {
                        if ((child.measureHeight - prev) > min)
                            min = child.measureHeight - prev;
                    }
                }
            }
            return min;
        };
        Grid.prototype.measureCore = function (width, height) {
            var i;
            var child;
            var col;
            var colSpan;
            var colPos;
            var childX;
            var childWidth;
            var x;
            var row;
            var rowPos;
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                var constraintWidth = (width * Ui.Grid.getColSpan(child)) / this._cols.length;
                var constraintHeight = (height * Ui.Grid.getRowSpan(child)) / this._rows.length;
                child.measure(constraintWidth, constraintHeight);
            }
            var colStarCount = 0.0;
            var colStarSize = 0.0;
            var rowStarCount = 0.0;
            var rowStarSize = 0.0;
            var offsetX = 0;
            for (colPos = 0; colPos < this._cols.length; colPos++) {
                col = this._cols[colPos];
                col.offset = offsetX;
                if (col.absolute)
                    col.actualWidth += col.width;
                else if (col.star) {
                    col.actualWidth = 0;
                    colStarCount += col.width;
                }
                else if (col.auto) {
                    col.actualWidth = this.getColMin(colPos);
                }
                offsetX += col.actualWidth;
            }
            var starWidth = 0.0;
            if (colStarCount > 0.0)
                starWidth = (width - offsetX) / colStarCount;
            offsetX = 0;
            for (i = 0; i < this._cols.length; i++) {
                col = this._cols[i];
                col.offset = offsetX;
                if (col.star)
                    col.actualWidth = starWidth * col.width;
                offsetX += col.actualWidth;
            }
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                col = Ui.Grid.getCol(child);
                colSpan = Ui.Grid.getColSpan(child);
                childX = this._cols[col].offset;
                childWidth = 0.0;
                for (x = col; x < col + colSpan; x++)
                    childWidth += this._cols[x].actualWidth;
                child.measure(childWidth, height);
            }
            offsetX = 0;
            for (colPos = 0; colPos < this._cols.length; colPos++) {
                col = this._cols[colPos];
                col.offset = offsetX;
                if (col.absolute) {
                    col.actualWidth = col.width;
                }
                else if (col.star) {
                    col.actualWidth = Math.max(this.getColMin(colPos), starWidth * col.width);
                    colStarSize += col.actualWidth;
                }
                else if (col.auto) {
                    col.actualWidth = this.getColMin(colPos);
                }
                offsetX += col.actualWidth;
            }
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                col = Ui.Grid.getCol(child);
                colSpan = Ui.Grid.getColSpan(child);
                childX = this._cols[col].offset;
                childWidth = 0.0;
                for (x = col; x < col + colSpan; x++)
                    childWidth += this._cols[x].actualWidth;
                child.measure(childWidth, height);
            }
            var offsetY = 0;
            for (rowPos = 0; rowPos < this._rows.length; rowPos++) {
                row = this._rows[rowPos];
                row.offset = offsetY;
                if (row.absolute)
                    row.actualHeight = row.height;
                else if (row.star) {
                    row.actualHeight = 0;
                    rowStarCount += row.height;
                }
                else if (row.auto)
                    row.actualHeight = this.getRowMin(rowPos);
                offsetY += row.actualHeight;
            }
            var starHeight = 0.0;
            if (rowStarCount > 0.0)
                starHeight = (height - offsetY) / rowStarCount;
            offsetY = 0;
            for (i = 0; i < this._rows.length; i++) {
                row = this._rows[i];
                row.offset = offsetY;
                if (row.star)
                    row.actualHeight = starHeight * row.height;
                offsetY += row.actualHeight;
            }
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                col = Ui.Grid.getCol(child);
                colSpan = Ui.Grid.getColSpan(child);
                childX = this._cols[col].offset;
                childWidth = 0.0;
                for (x = col; x < col + colSpan; x++)
                    childWidth += this._cols[x].actualWidth;
                row = Ui.Grid.getRow(child);
                var rowSpan = Ui.Grid.getRowSpan(child);
                var childY = this._rows[row].offset;
                var childHeight = 0.0;
                for (var y = row; y < row + rowSpan; y++)
                    childHeight += this._rows[y].actualHeight;
                child.measure(childWidth, childHeight);
            }
            offsetY = 0;
            for (rowPos = 0; rowPos < this._rows.length; rowPos++) {
                row = this._rows[rowPos];
                row.offset = offsetY;
                if (row.absolute) {
                    row.actualHeight = row.height;
                }
                else if (row.star) {
                    var rowMin = this.getRowMin(rowPos);
                    row.actualHeight = Math.max(rowMin, starHeight * row.height);
                    rowStarSize += row.actualHeight;
                }
                else if (row.auto) {
                    row.actualHeight = this.getRowMin(rowPos);
                }
                offsetY += row.actualHeight;
            }
            return { width: offsetX, height: offsetY };
        };
        Grid.prototype.arrangeCore = function (width, height) {
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var col = Ui.Grid.getCol(child);
                var colSpan = Ui.Grid.getColSpan(child);
                var row = Ui.Grid.getRow(child);
                var rowSpan = Ui.Grid.getRowSpan(child);
                var childX = this._cols[col].offset;
                var childY = this._rows[row].offset;
                var childWidth = 0.0;
                var childHeight = 0.0;
                for (var x = col; x < col + colSpan; x++)
                    childWidth += this._cols[x].actualWidth;
                for (var y = row; y < row + rowSpan; y++)
                    childHeight += this._rows[y].actualHeight;
                child.arrange(childX, childY, childWidth, childHeight);
            }
        };
        Grid.getCol = function (child) {
            return (child['Ui.Grid.col'] !== undefined) ? child['Ui.Grid.col'] : 0;
        };
        Grid.setCol = function (child, col) {
            if (Ui.Grid.getCol(child) != col) {
                child['Ui.Grid.col'] = col;
                child.invalidateMeasure();
            }
        };
        Grid.getRow = function (child) {
            return (child['Ui.Grid.row'] !== undefined) ? child['Ui.Grid.row'] : 0;
        };
        Grid.setRow = function (child, row) {
            if (Ui.Grid.getRow(child) !== row) {
                child['Ui.Grid.row'] = row;
                child.invalidateMeasure();
            }
        };
        Grid.getColSpan = function (child) {
            return (child['Ui.Grid.colSpan'] !== undefined) ? child['Ui.Grid.colSpan'] : 1;
        };
        Grid.setColSpan = function (child, colSpan) {
            if (Ui.Grid.getColSpan(child) !== colSpan) {
                child['Ui.Grid.colSpan'] = colSpan;
                child.invalidateMeasure();
            }
        };
        Grid.getRowSpan = function (child) {
            return (child['Ui.Grid.rowSpan'] !== undefined) ? child['Ui.Grid.rowSpan'] : 1;
        };
        Grid.setRowSpan = function (child, rowSpan) {
            if (Ui.Grid.getRowSpan(child) !== rowSpan) {
                child['Ui.Grid.rowSpan'] = rowSpan;
                child.invalidateMeasure();
            }
        };
        return Grid;
    }(Ui.Container));
    Ui.Grid = Grid;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Flow = (function (_super) {
        __extends(Flow, _super);
        function Flow(init) {
            var _this = _super.call(this, init) || this;
            _this.lines = new Array();
            _this._uniform = false;
            _this.uniformWidth = 0;
            _this.uniformHeight = 0;
            _this._itemAlign = 'left';
            _this._spacing = 0;
            if (init) {
                if (init.spacing !== undefined)
                    _this.spacing = init.spacing;
                if (init.itemAlign !== undefined)
                    _this.itemAlign = init.itemAlign;
                if (init.uniform !== undefined)
                    _this.uniform = init.uniform;
                if (init.content !== undefined)
                    _this.content = init.content;
            }
            return _this;
        }
        Object.defineProperty(Flow.prototype, "content", {
            set: function (content) {
                while (this.firstChild !== undefined)
                    this.removeChild(this.firstChild);
                if (content != undefined) {
                    for (var i = 0; i < content.length; i++)
                        this.appendChild(content[i]);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "spacing", {
            get: function () {
                return this._spacing;
            },
            set: function (spacing) {
                if (this._spacing != spacing) {
                    this._spacing = spacing;
                    this.invalidateMeasure();
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "itemAlign", {
            get: function () {
                return this._itemAlign;
            },
            set: function (itemAlign) {
                if (itemAlign != this._itemAlign) {
                    this._itemAlign = itemAlign;
                    this.invalidateMeasure();
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Flow.prototype, "uniform", {
            get: function () {
                return this._uniform;
            },
            set: function (uniform) {
                if (this._uniform != uniform) {
                    this._uniform = uniform;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Flow.prototype.append = function (child) {
            this.appendChild(child);
        };
        Flow.prototype.prepend = function (child) {
            this.prependChild(child);
        };
        Flow.prototype.insertAt = function (child, position) {
            this.insertChildAt(child, position);
        };
        Flow.prototype.insertBefore = function (child, beforeChild) {
            this.insertChildBefore(child, beforeChild);
        };
        Flow.prototype.moveAt = function (child, position) {
            this.moveChildAt(child, position);
        };
        Flow.prototype.remove = function (child) {
            this.removeChild(child);
        };
        Flow.prototype.measureChildrenNonUniform = function (width, height) {
            this.lines = [];
            var line = { pos: 0, y: 0, width: 0, height: 0 };
            var ctx = { lineX: 0, lineY: 0, lineCount: 0, lineHeight: 0, minWidth: 0 };
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var size = child.measure(width, height);
                var isFirst = (ctx.lineX === 0);
                if (!isFirst && (ctx.lineX + size.width + (!isFirst ? this._spacing : 0) > width)) {
                    line.width = ctx.lineX;
                    line.height = ctx.lineHeight;
                    ctx.lineX = 0;
                    ctx.lineY += ctx.lineHeight + this._spacing;
                    ctx.lineHeight = 0;
                    isFirst = true;
                    ctx.lineCount++;
                    this.lines.push(line);
                    line = { pos: ctx.lineCount, y: ctx.lineY, width: 0, height: 0 };
                }
                child['Ui.Flow.flowLine'] = line;
                if (!isFirst && !child.isCollapsed)
                    ctx.lineX += this._spacing;
                child['Ui.Flow.flowLineX'] = ctx.lineX;
                ctx.lineX += size.width;
                if (size.height > ctx.lineHeight)
                    ctx.lineHeight = size.height;
                if (ctx.lineX > ctx.minWidth)
                    ctx.minWidth = ctx.lineX;
            }
            ctx.lineY += ctx.lineHeight;
            line.width = ctx.lineX;
            line.height = ctx.lineHeight;
            this.lines.push(line);
            return { width: ctx.minWidth, height: ctx.lineY };
        };
        Flow.prototype.measureChildrenUniform = function (width, height) {
            var i;
            var child;
            var size;
            var maxWidth = 0;
            var maxHeight = 0;
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                size = child.measure(width, height);
                if (size.width > maxWidth)
                    maxWidth = size.width;
                if (size.height > maxHeight)
                    maxHeight = size.height;
            }
            var countPerLine = Math.max(Math.floor((width + this._spacing) / (maxWidth + this._spacing)), 1);
            var nbLine = Math.ceil(this.children.length / countPerLine);
            for (i = 0; i < this.children.length; i++)
                this.children[i].measure(maxWidth, maxHeight);
            this.uniformWidth = maxWidth;
            this.uniformHeight = maxHeight;
            return {
                width: maxWidth * countPerLine + (countPerLine - 1) * this._spacing,
                height: nbLine * maxHeight + (nbLine - 1) * this._spacing
            };
        };
        Flow.prototype.measureCore = function (width, height) {
            if (this.children.length === 0)
                return { width: 0, height: 0 };
            if (this._uniform)
                return this.measureChildrenUniform(width, height);
            else
                return this.measureChildrenNonUniform(width, height);
        };
        Flow.prototype.arrangeCore = function (width, height) {
            if (this._uniform) {
                if (this._itemAlign === 'left') {
                    var x = 0;
                    var y = 0;
                    for (var i = 0; i < this.children.length; i++) {
                        var child = this.children[i];
                        if (x + this.uniformWidth > width) {
                            x = 0;
                            y += this.uniformHeight + this._spacing;
                        }
                        child.arrange(x, y, this.uniformWidth, this.uniformHeight);
                        x += this.uniformWidth + this._spacing;
                    }
                }
                else if (this._itemAlign === 'right') {
                    var nbItemPerLine = Math.max(Math.floor((width + this._spacing) / (this.uniformWidth + this._spacing)), 1);
                    var lineWidth = nbItemPerLine * this.uniformWidth + (nbItemPerLine - 1) * this._spacing;
                    var x = 0;
                    if (this.children.length < nbItemPerLine)
                        x = width - ((this.children.length * (this.uniformWidth + this._spacing)) - this._spacing);
                    else
                        x = width - lineWidth;
                    var y = 0;
                    for (var i = 0; i < this.children.length; i++) {
                        var child = this.children[i];
                        if (x + this.uniformWidth > width) {
                            if (this.children.length - i < nbItemPerLine)
                                x = width - (((this.children.length - i) * (this.uniformWidth + this._spacing)) - this._spacing);
                            else
                                x = width - lineWidth;
                            y += this.uniformHeight + this._spacing;
                        }
                        child.arrange(x, y, this.uniformWidth, this.uniformHeight);
                        x += this.uniformWidth + this._spacing;
                    }
                }
            }
            else {
                for (var i = 0; i < this.children.length; i++) {
                    var child = this.children[i];
                    if (this._itemAlign == 'left')
                        child.arrange(child['Ui.Flow.flowLineX'], child['Ui.Flow.flowLine'].y, child.measureWidth, child['Ui.Flow.flowLine'].height);
                    else
                        child.arrange(child['Ui.Flow.flowLineX'] + (width - child['Ui.Flow.flowLine'].width), child['Ui.Flow.flowLine'].y, child.measureWidth, child['Ui.Flow.flowLine'].height);
                }
            }
        };
        return Flow;
    }(Ui.Container));
    Ui.Flow = Flow;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var LimitedFlow = (function (_super) {
        __extends(LimitedFlow, _super);
        function LimitedFlow() {
            var _this = _super.call(this) || this;
            _this._canExpand = false;
            _this.canexpandchanged = new Core.Events();
            _this.linechanged = new Core.Events();
            _this.clipToBounds = true;
            return _this;
        }
        Object.defineProperty(LimitedFlow.prototype, "oncanexpandchanged", {
            set: function (value) { this.canexpandchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LimitedFlow.prototype, "onlinechanged", {
            set: function (value) { this.linechanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LimitedFlow.prototype, "maxLines", {
            get: function () {
                return this._maxLines;
            },
            set: function (value) {
                this._maxLines = value;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LimitedFlow.prototype, "linesCount", {
            get: function () {
                if (!this.uniform)
                    return this.lines.length;
                var countPerLine = Math.max(Math.floor((this.layoutWidth + this.spacing) / (this.uniformWidth + this.spacing)), 1);
                return Math.ceil(this.children.length / countPerLine);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LimitedFlow.prototype, "canExpand", {
            get: function () {
                return this._canExpand;
            },
            enumerable: true,
            configurable: true
        });
        LimitedFlow.prototype.measureCore = function (width, height) {
            var res = _super.prototype.measureCore.call(this, width, height);
            if (this._maxLines == undefined)
                return res;
            if (!this.uniform) {
                var pos = Math.min(this._maxLines, this.lines.length) - 1;
                if (pos < 0)
                    return { width: 0, height: 0 };
                else
                    return { width: res.width, height: this.lines[pos].y + this.lines[pos].height };
            }
            else {
                var countPerLine = Math.max(Math.floor((width + this.spacing) / (this.uniformWidth + this.spacing)), 1);
                var nbLine = Math.ceil(this.children.length / countPerLine);
                nbLine = Math.min(nbLine, this._maxLines);
                return {
                    width: res.width,
                    height: nbLine * this.uniformHeight + (nbLine - 1) * this.spacing
                };
            }
        };
        LimitedFlow.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, width, height);
            var linesCount = this.linesCount;
            var canExpand = this._maxLines != undefined && linesCount > this._maxLines;
            if (canExpand != this._canExpand) {
                this._canExpand = canExpand;
                this.canexpandchanged.fire({ target: this, value: this._canExpand });
            }
            if (this._linesCount != linesCount) {
                this._linesCount = linesCount;
                this.linechanged.fire({ target: this, value: linesCount });
            }
        };
        return LimitedFlow;
    }(Ui.Flow));
    Ui.LimitedFlow = LimitedFlow;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ProgressBar = (function (_super) {
        __extends(ProgressBar, _super);
        function ProgressBar(init) {
            var _this = _super.call(this, init) || this;
            _this._value = 0;
            _this.background = new Ui.Rectangle({ height: 4 });
            _this.appendChild(_this.background);
            _this.bar = new Ui.Rectangle({ height: 4 });
            _this.appendChild(_this.bar);
            if (init) {
                if (init.value !== undefined)
                    _this.value = init.value;
            }
            _this.clock = new Anim.Clock({
                repeat: 'forever', duration: 2,
                ontimeupdate: function (e) {
                    var p = e.progress;
                    var p2 = (p > 0.5) ? 2 - 2 * p : 2 * p;
                    var x = p2 * (_this.layoutWidth - _this.bar.layoutWidth);
                    _this.bar.transform = new Ui.Matrix().translate(x, 0);
                }
            });
            return _this;
        }
        Object.defineProperty(ProgressBar.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (value != this._value) {
                    this._value = value;
                    if (value == 'infinite' && this.isVisible)
                        this.clock.begin();
                    else {
                        this.clock.stop();
                        this.bar.transform = new Ui.Matrix().translate(0, 0);
                    }
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        ProgressBar.prototype.measureCore = function (width, height) {
            var minHeight = 0;
            var minWidth = 0;
            var size;
            size = this.bar.measure(width, height);
            minHeight = Math.max(size.height, minHeight);
            minWidth = Math.max(size.width, minWidth);
            size = this.background.measure(width, height);
            minHeight = Math.max(size.height, minHeight);
            minWidth = Math.max(size.width, minWidth);
            return { width: Math.max(minWidth, 12), height: minHeight };
        };
        ProgressBar.prototype.arrangeCore = function (width, height) {
            this.background.arrange(0, 0, width, height);
            var barWidth = width * (typeof this.value == 'number' ? this.value : 0.2);
            if (barWidth < 2)
                this.bar.hide();
            else {
                this.bar.show();
                this.bar.arrange(0, 0, barWidth, this.layoutHeight);
            }
        };
        ProgressBar.prototype.onVisible = function () {
            _super.prototype.onVisible.call(this);
            if (this.value == 'infinite')
                this.clock.begin();
        };
        ProgressBar.prototype.onHidden = function () {
            _super.prototype.onHidden.call(this);
            if (this.value == 'infinite')
                this.clock.stop();
        };
        ProgressBar.prototype.onStyleChange = function () {
            var radius = this.getStyleProperty('radius');
            this.bar.radius = radius;
            this.bar.fill = this.getStyleProperty('foreground');
            this.background.radius = radius;
            this.background.fill = this.getStyleProperty('background');
        };
        ProgressBar.style = {
            background: '#e1e1e1',
            foreground: '#07a0e5',
            color: '#999999',
            radius: 0
        };
        return ProgressBar;
    }(Ui.Container));
    Ui.ProgressBar = ProgressBar;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Paned = (function (_super) {
        __extends(Paned, _super);
        function Paned(init) {
            var _this = _super.call(this, init) || this;
            _this.vertical = true;
            _this.minContent1Size = 0;
            _this.minContent2Size = 0;
            _this._pos = 0.5;
            _this.changed = new Core.Events();
            _this.onCursorMove = function () {
                _this.cursor.moved.disconnect(_this.onCursorMove);
                var p;
                var aSize;
                if (_this.vertical) {
                    p = _this.cursor.positionY;
                    aSize = _this.layoutHeight - _this.cursor.layoutHeight;
                }
                else {
                    p = _this.cursor.positionX;
                    aSize = _this.layoutWidth - _this.cursor.layoutWidth;
                }
                _this._pos = p / aSize;
                if (aSize * _this._pos < _this.minContent1Size)
                    _this._pos = _this.minContent1Size / aSize;
                if (aSize * (1 - _this._pos) < _this.minContent2Size)
                    _this._pos = 1 - (_this.minContent2Size / aSize);
                p = _this._pos * aSize;
                if (p < 0)
                    p = 0;
                if (p > aSize)
                    p = aSize;
                if (_this.vertical)
                    _this.cursor.setPosition(0, p);
                else
                    _this.cursor.setPosition(p, 0);
                _this.invalidateMeasure();
                _this.cursor.moved.connect(_this.onCursorMove);
                _this.changed.fire({ target: _this, position: _this._pos });
            };
            _this.content1Box = new Ui.LBox();
            _this.appendChild(_this.content1Box);
            _this.content2Box = new Ui.LBox();
            _this.appendChild(_this.content2Box);
            _this.cursor = new Ui.Movable({
                content: new Ui.VPanedCursor(),
                onmoved: function () { return _this.onCursorMove(); }
            });
            _this.appendChild(_this.cursor);
            if (init) {
                if (init.orientation !== undefined)
                    _this.orientation = init.orientation;
                if (init.pos !== undefined)
                    _this.pos = init.pos;
                if (init.content1 !== undefined)
                    _this.content1 = init.content1;
                if (init.content2 !== undefined)
                    _this.content2 = init.content2;
            }
            return _this;
        }
        Object.defineProperty(Paned.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paned.prototype, "orientation", {
            get: function () {
                if (this.vertical)
                    return 'vertical';
                else
                    return 'horizontal';
            },
            set: function (orientation) {
                var vertical = true;
                if (orientation != 'vertical')
                    vertical = false;
                if (this.vertical != vertical) {
                    this.vertical = vertical;
                    if (this.vertical)
                        this.cursor.content = new Ui.VPanedCursor();
                    else
                        this.cursor.content = new Ui.HPanedCursor();
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paned.prototype, "pos", {
            get: function () {
                return this._pos;
            },
            set: function (pos) {
                this._pos = pos;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paned.prototype, "content1", {
            get: function () {
                return this._content1;
            },
            set: function (content1) {
                if (this._content1 !== content1) {
                    if (this._content1 !== undefined)
                        this.content1Box.remove(this._content1);
                    this._content1 = content1;
                    if (this._content1 !== undefined)
                        this.content1Box.append(this._content1);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paned.prototype, "content2", {
            get: function () {
                return this._content2;
            },
            set: function (content2) {
                if (this._content2 !== content2) {
                    if (this._content2 !== undefined)
                        this.content2Box.remove(this._content2);
                    this._content2 = content2;
                    if (this._content2 !== undefined)
                        this.content2Box.append(this._content2);
                }
            },
            enumerable: true,
            configurable: true
        });
        Paned.prototype.invert = function () {
            var tmp;
            tmp = this.content1Box;
            this.content1Box = this.content2Box;
            this.content2Box = tmp;
            tmp = this._content1;
            this._content1 = this._content2;
            this._content2 = tmp;
            this._pos = 1 - this._pos;
            this.invalidateArrange();
        };
        Paned.prototype.measureCore = function (width, height) {
            var cursorSize;
            var content1Size;
            var content2Size;
            if (this.vertical) {
                cursorSize = this.cursor.measure(width, 0);
                this.minContent1Size = this.content1Box.measure(width, 0).height;
                this.minContent2Size = this.content2Box.measure(width, 0).height;
                content1Size = this.content1Box.measure(width, (height - cursorSize.height) * this._pos);
                content2Size = this.content2Box.measure(width, (height - cursorSize.height) * (1 - this._pos));
                return { width: Math.max(cursorSize.width, Math.max(content1Size.width, content2Size.width)), height: content1Size.height + cursorSize.height + content2Size.height };
            }
            else {
                cursorSize = this.cursor.measure(0, height);
                this.minContent1Size = this.content1Box.measure(0, 0).width;
                this.minContent2Size = this.content2Box.measure(0, 0).width;
                content1Size = this.content1Box.measure((width - cursorSize.width) * this._pos, height);
                content2Size = this.content2Box.measure((width - cursorSize.width) * (1 - this._pos), height);
                return { width: content1Size.width + cursorSize.width + content2Size.width, height: Math.max(cursorSize.height, Math.max(content1Size.height, content2Size.height)) };
            }
        };
        Paned.prototype.arrangeCore = function (width, height) {
            if (this.vertical) {
                var cHeight = this.cursor.measureHeight;
                var aHeight = height - cHeight;
                this.cursor.arrange(0, 0, width, cHeight);
                this.cursor.setPosition(0, aHeight * this._pos);
                this.content1Box.arrange(0, 0, width, aHeight * this._pos);
                this.content2Box.arrange(0, (aHeight * this._pos) + cHeight, width, aHeight * (1 - this._pos));
            }
            else {
                var cWidth = this.cursor.measureWidth;
                var aWidth = width - cWidth;
                this.content1Box.arrange(0, 0, aWidth * this._pos, height);
                this.cursor.arrange(0, 0, cWidth, height);
                this.cursor.setPosition(aWidth * this._pos, 0);
                this.content2Box.arrange((aWidth * this._pos) + cWidth, 0, aWidth * (1 - this._pos), height);
            }
        };
        return Paned;
    }(Ui.Container));
    Ui.Paned = Paned;
    var VPaned = (function (_super) {
        __extends(VPaned, _super);
        function VPaned(init) {
            var _this = _super.call(this, init) || this;
            _this.orientation = 'vertical';
            return _this;
        }
        return VPaned;
    }(Paned));
    Ui.VPaned = VPaned;
    var HPaned = (function (_super) {
        __extends(HPaned, _super);
        function HPaned(init) {
            var _this = _super.call(this, init) || this;
            _this.orientation = 'horizontal';
            return _this;
        }
        return HPaned;
    }(Paned));
    Ui.HPaned = HPaned;
    var HPanedCursor = (function (_super) {
        __extends(HPanedCursor, _super);
        function HPanedCursor() {
            var _this = _super.call(this) || this;
            _this.append(new Ui.Rectangle({ fill: new Ui.Color(0, 0, 0, 0.05) }));
            _this.append(new Ui.Rectangle({ fill: 'rgba(140,140,140,1)', width: 1, margin: 5, marginRight: 10, height: 30, verticalAlign: 'center' }));
            _this.append(new Ui.Rectangle({ fill: 'rgba(140,140,140,1)', width: 1, margin: 5, marginLeft: 10, height: 30, verticalAlign: 'center' }));
            _this.append(new Ui.Frame({ frameWidth: 1, fill: 'rgba(140,140,140,1)' }));
            return _this;
        }
        return HPanedCursor;
    }(Ui.LBox));
    Ui.HPanedCursor = HPanedCursor;
    var VPanedCursor = (function (_super) {
        __extends(VPanedCursor, _super);
        function VPanedCursor() {
            var _this = _super.call(this) || this;
            _this.append(new Ui.Rectangle({ fill: 'rgba(250,250,250,1)' }));
            _this.append(new Ui.Rectangle({ fill: 'rgba(140,140,140,1)', height: 1, margin: 5, marginTop: 10, width: 30, horizontalAlign: 'center' }));
            _this.append(new Ui.Rectangle({ fill: 'rgba(140,140,140,1)', height: 1, margin: 5, marginBottom: 10, width: 30, horizontalAlign: 'center' }));
            _this.append(new Ui.Frame({ frameWidth: 1, radius: 0, fill: 'rgba(140,140,140,1)' }));
            return _this;
        }
        return VPanedCursor;
    }(Ui.LBox));
    Ui.VPanedCursor = VPanedCursor;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Slider = (function (_super) {
        __extends(Slider, _super);
        function Slider(init) {
            var _this = _super.call(this, init) || this;
            _this._value = 0;
            _this._orientation = 'horizontal';
            _this.updateLock = false;
            _this.changed = new Core.Events();
            _this.onButtonMove = function () {
                var oldValue = _this._value;
                if (_this.updateLock !== true) {
                    var pos;
                    var size;
                    var max;
                    if (_this.orientation === 'horizontal') {
                        pos = _this.button.positionX;
                        size = _this.layoutWidth;
                        max = size - _this.button.layoutWidth;
                    }
                    else {
                        size = _this.layoutHeight;
                        max = size - _this.button.layoutHeight;
                        pos = max - _this.button.positionY;
                    }
                    if (pos < 0)
                        pos = 0;
                    else if (pos > max)
                        pos = max;
                    _this._value = pos / max;
                }
                _this.button.moved.disconnect(_this.onButtonMove);
                _this.updateValue();
                _this.button.moved.connect(_this.onButtonMove);
                if (oldValue != _this._value)
                    _this.changed.fire({ target: _this, value: _this._value });
            };
            _this.background = new Ui.Rectangle({ width: 4, height: 4 });
            _this.appendChild(_this.background);
            _this.bar = new Ui.Rectangle({ width: 4, height: 4 });
            _this.appendChild(_this.bar);
            _this.button = new Ui.Movable({ moveVertical: false });
            _this.appendChild(_this.button);
            _this.button.moved.connect(_this.onButtonMove);
            _this.button.focused.connect(function () { return _this.updateColors(); });
            _this.button.blurred.connect(function () { return _this.updateColors(); });
            _this.button.downed.connect(function () { return _this.updateColors(); });
            _this.button.upped.connect(function () { return _this.updateColors(); });
            _this.buttonContent = new Ui.Rectangle({ radius: 10, width: 20, height: 20, margin: 10 });
            _this.button.content = _this.buttonContent;
            if (init) {
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.orientation !== undefined)
                    _this.orientation = init.orientation;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
            }
            return _this;
        }
        Object.defineProperty(Slider.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Slider.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        Slider.prototype.setValue = function (value, dontSignal) {
            if (dontSignal === void 0) { dontSignal = false; }
            value = Math.min(1, Math.max(0, value));
            if (this._value !== value) {
                this._value = value;
                this.button.moved.disconnect(this.onButtonMove);
                this.updateValue();
                this.button.moved.connect(this.onButtonMove);
                if (dontSignal !== true)
                    this.changed.fire({ target: this, value: this._value });
            }
        };
        Object.defineProperty(Slider.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            set: function (orientation) {
                if (this._orientation !== orientation) {
                    this._orientation = orientation;
                    this.button.moveHorizontal = true;
                    this.button.moveVertical = true;
                    this.updateValue();
                    if (this._orientation === 'horizontal') {
                        this.button.moveHorizontal = true;
                        this.button.moveVertical = false;
                    }
                    else {
                        this.button.moveHorizontal = false;
                        this.button.moveVertical = true;
                    }
                    this.invalidateMeasure();
                    this.onStyleChange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Slider.prototype.updateValue = function () {
            this.updateLock = true;
            var max;
            var width = this.layoutWidth;
            var height = this.layoutHeight;
            if (this.orientation === 'horizontal') {
                max = width - this.button.layoutWidth;
                this.button.setPosition(max * this._value, 0);
                this.bar.arrange(this.button.layoutWidth / 2, (height - this.bar.measureHeight) / 2, max * this._value, this.bar.measureHeight);
            }
            else {
                max = height - this.button.layoutHeight;
                var x = (width - 44) / 2;
                var size = (height - 36) * this._value;
                this.button.setPosition(0, max * (1 - this._value));
                this.bar.arrange((width - this.bar.measureWidth) / 2, this.button.layoutHeight / 2 + max * (1 - this._value), this.bar.measureWidth, max * this._value);
            }
            delete (this.updateLock);
        };
        Slider.prototype.getColor = function () {
            return Ui.Color.create(this.getStyleProperty('background'));
        };
        Slider.prototype.getForeground = function () {
            return Ui.Color.create(this.getStyleProperty('foreground'));
        };
        Slider.prototype.getBackground = function () {
            var yuv = Ui.Color.create(this.getStyleProperty('background')).getYuv();
            var deltaY = 0;
            if (this.button.isDown)
                deltaY = -0.30;
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v);
        };
        Slider.prototype.getButtonColor = function () {
            var yuv = Ui.Color.create(this.getStyleProperty('background')).getYuv();
            var deltaY = 0;
            if (this.button.isDown)
                deltaY = -0.30;
            else if (this.button.hasFocus)
                deltaY = 0.10;
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v);
        };
        Slider.prototype.updateColors = function () {
            this.bar.fill = this.getForeground();
            this.background.fill = this.getBackground();
            this.buttonContent.fill = this.getForeground();
        };
        Slider.prototype.measureCore = function (width, height) {
            var buttonSize = this.button.measure(0, 0);
            var size = buttonSize;
            var res;
            if (this.orientation === 'horizontal') {
                res = this.background.measure(width - buttonSize.width, 0);
                if (res.width > size.width)
                    size.width = res.width;
                if (res.height > size.height)
                    size.height = res.height;
                res = this.bar.measure(width - buttonSize.width, 0);
                if (res.width > size.width)
                    size.width = res.width;
                if (res.height > size.height)
                    size.height = res.height;
            }
            else {
                res = this.background.measure(0, height - buttonSize.height);
                if (res.width > size.width)
                    size.width = res.width;
                if (res.height > size.height)
                    size.height = res.height;
                res = this.bar.measure(0, height - buttonSize.height);
                if (res.width > size.width)
                    size.width = res.width;
                if (res.height > size.height)
                    size.height = res.height;
            }
            return size;
        };
        Slider.prototype.arrangeCore = function (width, height) {
            if (this.orientation === 'horizontal') {
                this.button.arrange(0, (height - this.button.measureHeight) / 2, this.button.measureWidth, this.button.measureHeight);
                this.background.arrange(this.button.layoutWidth / 2, (height - this.background.measureHeight) / 2, width - this.button.layoutWidth, this.background.measureHeight);
            }
            else {
                this.button.arrange((width - this.button.measureWidth) / 2, 0, this.button.measureWidth, this.button.measureHeight);
                this.background.arrange((width - this.background.measureWidth) / 2, this.button.layoutHeight / 2, this.background.measureWidth, height - this.button.layoutHeight);
            }
            this.updateValue();
        };
        Slider.prototype.onStyleChange = function () {
            this.background.radius = this.getStyleProperty('radius');
            this.bar.radius = this.getStyleProperty('radius');
            this.updateColors();
        };
        Slider.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.button.opacity = 0.2;
        };
        Slider.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.button.opacity = 1;
        };
        Slider.style = {
            radius: 0,
            background: '#e1e1e1',
            backgroundBorder: '#919191',
            foreground: '#07a0e5'
        };
        return Slider;
    }(Ui.Container));
    Ui.Slider = Slider;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Audio = (function (_super) {
        __extends(Audio, _super);
        function Audio(init) {
            var _this = _super.call(this) || this;
            _this.canplaythrough = false;
            _this._state = 'initial';
            _this.audioMeasureValid = false;
            _this.audioSize = { width: 0, height: 0 };
            _this.ready = new Core.Events();
            _this.ended = new Core.Events();
            _this.timeupdate = new Core.Events();
            _this.bufferingupdate = new Core.Events();
            _this.statechange = new Core.Events();
            _this.error = new Core.Events();
            if (init) {
                if (init.oggSrc || init.mp3Src || init.aacSrc) {
                    if (init.oggSrc && Ui.Audio.supportOgg)
                        _this.src = init.oggSrc;
                    else if (init.mp3Src && Ui.Audio.supportMp3)
                        _this.src = init.mp3Src;
                    else if (init.aacSrc && Ui.Audio.supportAac)
                        _this.src = init.aacSrc;
                }
                else if (init.src)
                    _this.src = init.src;
                if (init.volume !== undefined)
                    _this.volume = init.volume;
                if (init.currentTime !== undefined)
                    _this.currentTime = init.currentTime;
                if (init.controls !== undefined)
                    _this.controls = init.controls;
                if (init.controlsList !== undefined)
                    _this.controlsList = init.controlsList;
                if (init.onerror !== undefined)
                    _this.onerror = init.onerror;
                if (init.onready !== undefined)
                    _this.onready = init.onready;
            }
            return _this;
        }
        Object.defineProperty(Audio.prototype, "onready", {
            set: function (value) { this.ready.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "onended", {
            set: function (value) { this.ended.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "ontimeupdate", {
            set: function (value) { this.timeupdate.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "onbufferingupdate", {
            set: function (value) { this.bufferingupdate.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "onstatechange", {
            set: function (value) { this.statechange.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "onerror", {
            set: function (value) { this.error.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "src", {
            set: function (src) {
                this.canplaythrough = false;
                this._state = 'initial';
                this._src = src;
                if (src === undefined)
                    this.audioDrawing.removeAttribute('src');
                else
                    this.audioDrawing.setAttribute('src', src);
                try {
                    this.audioDrawing.load();
                }
                catch (e) { }
            },
            enumerable: true,
            configurable: true
        });
        Audio.prototype.play = function () {
            this._state = 'playing';
            this.statechange.fire({ target: this, state: this._state });
            if (this.canplaythrough)
                this.audioDrawing.play();
            else
                this.audioDrawing.load();
        };
        Audio.prototype.pause = function () {
            this._state = 'paused';
            this.statechange.fire({ target: this, state: this._state });
            if (this.canplaythrough)
                this.audioDrawing.pause();
            else
                this.audioDrawing.load();
        };
        Audio.prototype.stop = function () {
            this.audioDrawing.pause();
            this.onEnded();
        };
        Object.defineProperty(Audio.prototype, "controls", {
            get: function () {
                return this.audioDrawing.controls;
            },
            set: function (value) {
                if (value)
                    this.audioDrawing.controls = true;
                else
                    delete (this.audioDrawing.controls);
                this.audioMeasureValid = false;
                this.invalidateMeasure();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "controlsList", {
            get: function () {
                if (this.audioDrawing['controlsList'] === undefined)
                    return [];
                var controlsList = [];
                this.audioDrawing['controlsList'].forEach(function (token) { return controlsList.push(token); });
                return controlsList;
            },
            set: function (value) {
                if ('controlsList' in this.audioDrawing) {
                    var tokenList = this.audioDrawing['controlsList'];
                    for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
                        var element = value_2[_i];
                        if (!tokenList.supports(element))
                            continue;
                        tokenList.add(element);
                    }
                    this.audioMeasureValid = false;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "volume", {
            get: function () {
                return this.audioDrawing.volume;
            },
            set: function (volume) {
                this.audioDrawing.volume = volume;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "duration", {
            get: function () {
                var duration = this.audioDrawing.duration;
                if ((duration === undefined) || isNaN(duration) || (duration === null))
                    return undefined;
                else
                    return duration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "currentTime", {
            get: function () {
                if (this.audioDrawing.currentTime === undefined)
                    return 0;
                else
                    return this.audioDrawing.currentTime;
            },
            set: function (time) {
                this.audioDrawing.currentTime = time;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Audio.prototype, "isReady", {
            get: function () {
                return this.canplaythrough;
            },
            enumerable: true,
            configurable: true
        });
        Audio.prototype.onReady = function () {
            this.canplaythrough = true;
            if (this._state == 'playing')
                this.audioDrawing.play();
            else if (this._state == 'paused')
                this.audioDrawing.pause();
            this.ready.fire({ target: this });
        };
        Audio.prototype.onTimeUpdate = function () {
            this.timeupdate.fire({ target: this, time: this.audioDrawing.currentTime });
            this.checkBuffering();
        };
        Audio.prototype.onEnded = function () {
            this.audioDrawing.pause();
            this._state = 'initial';
            this.audioDrawing.currentTime = 0;
            this.ended.fire({ target: this });
            this.statechange.fire({ target: this, state: this._state });
        };
        Audio.prototype.onProgress = function () {
            this.checkBuffering();
        };
        Object.defineProperty(Audio.prototype, "currentBufferSize", {
            get: function () {
                var buffered = this.audioDrawing.buffered;
                var timebuffer = 0;
                var time = this.audioDrawing.currentTime;
                if (time === undefined)
                    time = 0;
                var lastEnd;
                for (var i = 0; i < buffered.length; i++) {
                    var start = buffered.start(i);
                    var end = buffered.end(i);
                    if (lastEnd === undefined) {
                        if ((start <= time) && (end >= time)) {
                            timebuffer = end - time;
                            lastEnd = end;
                        }
                    }
                    else {
                        if ((lastEnd >= (start - 0.01)) && (lastEnd <= end)) {
                            timebuffer += (end - lastEnd);
                            lastEnd = end;
                        }
                    }
                }
                return timebuffer;
            },
            enumerable: true,
            configurable: true
        });
        Audio.prototype.checkBuffering = function () {
            var timebuffer = this.currentBufferSize;
            var time = this.audioDrawing.currentTime;
            var duration = this.audioDrawing.duration;
            this.bufferingupdate.fire({ target: this, buffer: timebuffer });
        };
        Audio.prototype.onError = function () {
            this._state = 'error';
            this.error.fire({ target: this, code: this.audioDrawing.error.code });
            this.statechange.fire({ target: this, state: this._state });
        };
        Audio.prototype.onWaiting = function () {
            if (!this.canplaythrough)
                this.audioDrawing.load();
        };
        Audio.prototype.onUnload = function () {
            _super.prototype.onUnload.call(this);
            if (this.canplaythrough)
                this.pause();
            this.audioDrawing.removeAttribute('src');
            try {
                this.audioDrawing.load();
            }
            catch (e) { }
        };
        Audio.prototype.renderDrawing = function () {
            var _this = this;
            var drawing;
            if (Ui.Audio.htmlAudio) {
                this.audioDrawing = document.createElement('audio');
                this.audioDrawing.addEventListener('canplaythrough', function () { return _this.onReady(); });
                this.audioDrawing.addEventListener('ended', function () { return _this.onEnded(); });
                this.audioDrawing.addEventListener('timeupdate', function () { return _this.onTimeUpdate(); });
                this.audioDrawing.addEventListener('error', function () { return _this.onError(); });
                this.audioDrawing.addEventListener('progress', function () { return _this.onProgress(); });
                this.audioDrawing.addEventListener('waiting', function () { return _this.onWaiting(); });
                this.audioDrawing.setAttribute('preload', 'auto');
                this.audioDrawing.load();
                this.audioDrawing.style.position = 'absolute';
                this.audioDrawing.style.left = '0px';
                this.audioDrawing.style.top = '0px';
                drawing = this.audioDrawing;
            }
            else {
                drawing = _super.prototype.renderDrawing.call(this);
            }
            return drawing;
        };
        Audio.prototype.measureCore = function (width, height) {
            if (!this.audioMeasureValid) {
                this.audioMeasureValid = true;
                var size = Ui.Audio.measure(this.controls);
                this.audioSize = size;
            }
            return this.audioSize;
        };
        Audio.measure = function (isPlayerVisible) {
            if (!isPlayerVisible)
                return { width: 0, height: 0 };
            return Ui.Audio.measureTextHtml();
        };
        Audio.measureTextHtml = function () {
            if (Ui.Audio.measureBox === undefined)
                this.createMeasureHtml();
            return { width: Ui.Audio.measureBox.offsetWidth, height: Ui.Audio.measureBox.offsetHeight };
        };
        Audio.createMeasureHtml = function () {
            var measureWindow = window;
            if (Core.Navigator.isIE || Core.Navigator.isGecko)
                measureWindow = Ui.App.getRootWindow();
            if (measureWindow.document.body === undefined) {
                var body = measureWindow.document.createElement('body');
                measureWindow.document.body = body;
            }
            Ui.Audio.measureBox = measureWindow.document.createElement('audio');
            Ui.Audio.measureBox.controls = true;
            Ui.Audio.measureBox.style.whiteSpace = 'nowrap';
            Ui.Audio.measureBox.style.position = 'absolute';
            Ui.Audio.measureBox.style.left = '0px';
            Ui.Audio.measureBox.style.top = '0px';
            Ui.Audio.measureBox.style.position = 'absolute';
            Ui.Audio.measureBox.style.display = 'inline';
            Ui.Audio.measureBox.style.visibility = 'hidden';
            measureWindow.document.body.appendChild(Ui.Audio.measureBox);
        };
        Audio.initialize = function () {
            var audioTest = document.createElement('audio');
            if (audioTest.play !== undefined) {
                this.htmlAudio = true;
                this.supportWav = !!audioTest.canPlayType && '' !== audioTest.canPlayType('audio/wav');
                this.supportMp3 = !!audioTest.canPlayType && '' !== audioTest.canPlayType('audio/mpeg');
                this.supportOgg = !!audioTest.canPlayType && '' !== audioTest.canPlayType('audio/ogg; codecs="vorbis"');
                this.supportAac = !!audioTest.canPlayType && '' !== audioTest.canPlayType('audio/mp4; codecs="mp4a.40.2"');
            }
        };
        Audio.measureBox = undefined;
        Audio.htmlAudio = false;
        Audio.supportOgg = false;
        Audio.supportMp3 = false;
        Audio.supportWav = false;
        Audio.supportAac = false;
        return Audio;
    }(Ui.Element));
    Ui.Audio = Audio;
})(Ui || (Ui = {}));
Ui.Audio.initialize();
var Ui;
(function (Ui) {
    var LinkButton = (function (_super) {
        __extends(LinkButton, _super);
        function LinkButton(init) {
            var _this = _super.call(this, init) || this;
            _this.openWindow = true;
            _this.target = '_blank';
            _this.link = new Core.Events();
            _this.pressed.connect(function () { return _this.onLinkButtonPress(); });
            if (init) {
                if (init.src !== undefined)
                    _this.src = init.src;
                if (init.openWindow !== undefined)
                    _this.openWindow = init.openWindow;
                if (init.target !== undefined)
                    _this.target = init.target;
            }
            return _this;
        }
        Object.defineProperty(LinkButton.prototype, "onlink", {
            set: function (value) { this.link.connect(value); },
            enumerable: true,
            configurable: true
        });
        LinkButton.prototype.onLinkButtonPress = function () {
            this.link.fire({ target: this });
            if (this.src) {
                if (this.openWindow)
                    window.open(this.src, this.target);
                else
                    window.location.replace(this.src);
            }
        };
        LinkButton.style = {
            background: '#a4f4f4'
        };
        return LinkButton;
    }(Ui.Button));
    Ui.LinkButton = LinkButton;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var SFlowState = (function (_super) {
        __extends(SFlowState, _super);
        function SFlowState(init) {
            var _this = _super.call(this) || this;
            _this.x = 0;
            _this.y = 0;
            _this.width = 0;
            _this.height = 0;
            _this.xpos = 0;
            _this.ypos = 0;
            _this.lineHeight = 0;
            _this.drawCount = 0;
            _this.drawWidth = 0;
            _this.drawSpaceWidth = 0;
            _this.render = false;
            _this.spacing = 0;
            _this.align = 'left';
            _this.stretchMaxRatio = 1.7;
            _this.uniform = false;
            _this.firstLine = true;
            _this.lastLine = false;
            _this.width = init.width;
            _this.render = init.render;
            if (init.spacing !== undefined)
                _this.spacing = init.spacing;
            if (init.align !== undefined)
                _this.align = init.align;
            if (init.uniform !== undefined)
                _this.uniform = init.uniform;
            if (init.uniformWidth !== undefined) {
                _this.uniformWidth = init.uniformWidth;
                _this.stretchUniformWidth = _this.uniformWidth;
            }
            if (init.uniformHeight !== undefined)
                _this.uniformHeight = init.uniformHeight;
            if (init.stretchMaxRatio !== undefined)
                _this.stretchMaxRatio = init.stretchMaxRatio;
            _this.zones = [{ xstart: 0, xend: _this.width }];
            _this.currentZone = 0;
            _this.boxes = [];
            _this.drawCmd = [];
            return _this;
        }
        SFlowState.prototype.getSize = function () {
            this.lastLine = true;
            this.flush();
            return { width: this.width, height: this.ypos };
        };
        SFlowState.prototype.append = function (el) {
            var zone;
            var isstart;
            var isstartline;
            var isendline;
            var flushVal = SFlow.getFlush(el);
            if (flushVal === 'flush')
                this.flush();
            else if (flushVal === 'flushleft')
                this.flushLeft();
            else if (flushVal === 'flushright')
                this.flushRight();
            else if (flushVal === 'newline')
                this.nextLine();
            var floatVal = SFlow.getFloat(el);
            if (floatVal === 'none') {
                var size;
                if (this.uniform) {
                    size = el.measure(this.uniformWidth, this.uniformHeight);
                    size = { width: this.uniformWidth, height: this.uniformHeight };
                }
                else
                    size = el.measure(this.width, 0);
                while (true) {
                    zone = this.zones[this.currentZone];
                    isstart = false;
                    if (zone.xstart === this.xpos)
                        isstart = true;
                    if ((this.xpos + size.width + ((isstart) ? 0 : this.spacing) <= zone.xend) ||
                        (isstart && (zone.xend === this.width) && (size.width >= this.width))) {
                        this.pushDraw({ width: size.width, height: size.height, spaceWidth: isstart ? 0 : this.spacing, el: el });
                        if (!isstart)
                            this.xpos += this.spacing;
                        this.xpos += size.width;
                        if (size.height > this.lineHeight) {
                            this.lineHeight = size.height;
                        }
                        break;
                    }
                    else {
                        this.nextZone();
                    }
                }
            }
            else if (floatVal === 'left') {
                var size = el.measure(this.width, 0);
                while (true) {
                    zone = this.zones[this.currentZone];
                    isstartline = false;
                    if (this.xpos === 0)
                        isstartline = true;
                    if (isstartline && ((size.width <= zone.xend - this.xpos) || (zone.xend == this.width && size.width >= this.width))) {
                        if (this.render)
                            el.arrange(this.xpos, this.ypos, size.width, size.height);
                        this.insertBox({ x: this.xpos, y: this.ypos, width: size.width, height: size.height });
                        break;
                    }
                    else
                        this.nextZone();
                }
            }
            else if (floatVal === 'right') {
                var size = el.measure(this.width, 0);
                while (true) {
                    zone = this.zones[this.currentZone];
                    isendline = false;
                    if (this.width == zone.xend)
                        isendline = true;
                    if (isendline && ((size.width <= zone.xend - this.xpos) || (this.xpos == 0 && size.width >= this.width))) {
                        if (this.render)
                            el.arrange(zone.xend - size.width, this.ypos, size.width, size.height);
                        this.insertBox({ x: zone.xend - size.width, y: this.ypos, width: size.width, height: size.height });
                        break;
                    }
                    else
                        this.nextZone();
                }
            }
        };
        SFlowState.prototype.flushDraw = function () {
            if (this.render && (this.drawCmd.length > 0)) {
                var zone = this.zones[this.currentZone];
                var xpos = zone.xstart;
                var widthBonus = 0;
                var itemWidth = 0;
                if (this.align === 'right')
                    xpos += (zone.xend - zone.xstart) - (this.drawWidth + this.drawSpaceWidth);
                else if (this.align === 'center')
                    xpos += Math.floor(((zone.xend - zone.xstart) - (this.drawWidth + this.drawSpaceWidth)) / 2);
                else if (this.align === 'stretch')
                    widthBonus = Math.floor(((zone.xend - zone.xstart) - (this.drawWidth + this.drawSpaceWidth)) / this.drawCmd.length);
                for (var i = 0; i < this.drawCmd.length; i++) {
                    var cmd = this.drawCmd[i];
                    if (cmd.width + widthBonus > cmd.width * this.stretchMaxRatio)
                        itemWidth = cmd.width * this.stretchMaxRatio;
                    else
                        itemWidth = cmd.width + widthBonus;
                    if (this.uniform && (this.align === 'stretch')) {
                        if (this.lastLine && !this.firstLine)
                            itemWidth = Math.max(cmd.width, this.stretchUniformWidth);
                        else
                            this.stretchUniformWidth = itemWidth;
                    }
                    cmd.el.arrange(xpos + cmd.spaceWidth, this.ypos, itemWidth, this.lineHeight);
                    xpos += itemWidth + cmd.spaceWidth;
                }
            }
            this.drawCmd = [];
            this.drawWidth = 0;
            this.drawCount = 0;
            this.drawSpaceWidth = 0;
        };
        SFlowState.prototype.pushDraw = function (cmd) {
            this.drawCmd.push(cmd);
            this.drawCount++;
            this.drawWidth += cmd.width;
            this.drawSpaceWidth += cmd.spaceWidth;
        };
        SFlowState.prototype.insertBox = function (box) {
            this.boxes.push(box);
            this.calculZone();
        };
        SFlowState.prototype.calculZone = function () {
            var zone;
            this.zones = [{ xstart: 0, xend: this.width }];
            for (var i2 = 0; i2 < this.boxes.length; i2++) {
                var box = this.boxes[i2];
                if ((this.ypos + this.lineHeight < box.y) || (this.ypos >= box.y + box.height)) {
                    continue;
                }
                var tmpZones = [];
                for (var i = 0; i < this.zones.length; i++) {
                    zone = this.zones[i];
                    if ((box.x <= zone.xstart) && (box.x + box.width < zone.xend))
                        tmpZones.push({ xstart: box.x + box.width, xend: zone.xend });
                    else if ((box.x < zone.xend) && (box.x + box.width >= zone.xend))
                        tmpZones.push({ xstart: zone.xstart, xend: box.x });
                    else if ((box.x > zone.xstart) && (box.x + box.width < zone.xend)) {
                        tmpZones.push({ xstart: zone.xstart, xend: box.x });
                        tmpZones.push({ xstart: box.x + box.width, xend: zone.xend });
                    }
                    else if ((box.x <= zone.xstart) && (box.x + box.width >= zone.xend)) {
                    }
                    else {
                        tmpZones.push({ xstart: zone.xstart, xend: zone.xend });
                    }
                }
                this.zones = tmpZones;
            }
            for (this.currentZone = 0; this.currentZone < this.zones.length; this.currentZone++) {
                zone = this.zones[this.currentZone];
                if ((this.xpos >= zone.xstart) && (this.xpos <= zone.xend)) {
                    break;
                }
            }
            if (this.currentZone >= this.zones.length) {
                this.currentZone = -1;
                for (this.currentZone = 0; this.currentZone < this.zones.length; this.currentZone++) {
                    zone = this.zones[this.currentZone];
                    if (zone.xstart >= this.xpos) {
                        this.xpos = zone.xstart;
                        break;
                    }
                }
                if (this.currentZone >= this.zones.length) {
                    this.xpos = 0;
                    this.nextLine();
                }
            }
        };
        SFlowState.prototype.flush = function () {
            if (this.drawCount !== 0)
                this.nextLine();
            while (true) {
                var zone = this.zones[this.currentZone];
                if ((zone.xstart === 0) && (zone.xend === this.width))
                    break;
                else
                    this.nextZone();
            }
        };
        SFlowState.prototype.flushLeft = function () {
            if (this.drawCount !== 0)
                this.nextLine();
            while (true) {
                var zone = this.zones[this.currentZone];
                if (zone.xstart === 0)
                    break;
                else
                    this.nextZone();
            }
        };
        SFlowState.prototype.flushRight = function () {
            if (this.drawCount !== 0)
                this.nextLine();
            while (true) {
                var zone = this.zones[this.currentZone];
                if (zone.xend === this.width)
                    break;
                else
                    this.nextZone();
            }
        };
        SFlowState.prototype.nextLine = function () {
            this.flushDraw();
            do {
                if (this.lineHeight > 0) {
                    this.ypos += this.lineHeight + this.spacing;
                    this.lineHeight = 0;
                    this.calculZone();
                }
                else if (this.boxes.length > 0) {
                    var nexty = Number.MAX_VALUE;
                    for (var i = 0; i < this.boxes.length; i++) {
                        var box = this.boxes[i];
                        if ((this.ypos < box.y + box.height) && (nexty > box.y + box.height))
                            nexty = box.y + box.height;
                    }
                    if (nexty !== Number.MAX_VALUE)
                        this.ypos = nexty + this.spacing;
                    this.calculZone();
                }
            } while (this.zones.length === 0);
            this.currentZone = 0;
            this.xpos = this.zones[0].xstart;
            this.firstLine = false;
        };
        SFlowState.prototype.nextZone = function () {
            this.flushDraw();
            if (this.currentZone >= this.zones.length - 1) {
                this.nextLine();
            }
            else {
                this.currentZone++;
                this.xpos = this.zones[this.currentZone].xstart;
            }
        };
        return SFlowState;
    }(Core.Object));
    var SFlow = (function (_super) {
        __extends(SFlow, _super);
        function SFlow(init) {
            var _this = _super.call(this, init) || this;
            _this._uniform = false;
            _this._itemAlign = 'left';
            _this._stretchMaxRatio = 1.3;
            _this._spacing = 0;
            if (init) {
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.spacing !== undefined)
                    _this.spacing = init.spacing;
                if (init.itemAlign !== undefined)
                    _this.itemAlign = init.itemAlign;
                if (init.uniform !== undefined)
                    _this.uniform = init.uniform;
                if (init.uniformRatio !== undefined)
                    _this.uniformRatio = init.uniformRatio;
                if (init.stretchMaxRatio !== undefined)
                    _this.stretchMaxRatio = init.stretchMaxRatio;
            }
            return _this;
        }
        Object.defineProperty(SFlow.prototype, "content", {
            set: function (content) {
                while (this.firstChild !== undefined)
                    this.removeChild(this.firstChild);
                if ((content != undefined) && (typeof (content) === 'object')) {
                    for (var i = 0; i < content.length; i++)
                        this.appendChild(content[i]);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlow.prototype, "spacing", {
            get: function () {
                return this._spacing;
            },
            set: function (spacing) {
                if (this._spacing != spacing) {
                    this._spacing = spacing;
                    this.invalidateMeasure();
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlow.prototype, "itemAlign", {
            get: function () {
                return this._itemAlign;
            },
            set: function (itemAlign) {
                if (itemAlign != this._itemAlign) {
                    this._itemAlign = itemAlign;
                    this.invalidateMeasure();
                    this.invalidateArrange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlow.prototype, "uniform", {
            get: function () {
                return this._uniform;
            },
            set: function (uniform) {
                if (this._uniform != uniform) {
                    this._uniform = uniform;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlow.prototype, "uniformRatio", {
            get: function () {
                return this._uniformRatio;
            },
            set: function (uniformRatio) {
                if (this._uniformRatio != uniformRatio) {
                    this._uniformRatio = uniformRatio;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlow.prototype, "stretchMaxRatio", {
            get: function () {
                return this._stretchMaxRatio;
            },
            set: function (stretchMaxRatio) {
                if (this._stretchMaxRatio != stretchMaxRatio) {
                    this._stretchMaxRatio = stretchMaxRatio;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        SFlow.prototype.append = function (child, floatVal, flushVal) {
            this.appendChild(child);
            if (floatVal !== undefined)
                SFlow.setFloat(child, floatVal);
            if (flushVal !== undefined)
                SFlow.setFlush(child, flushVal);
        };
        SFlow.prototype.prepend = function (child, floatVal, flushVal) {
            this.prependChild(child);
            if (floatVal !== undefined)
                SFlow.setFloat(child, floatVal);
            if (flushVal !== undefined)
                SFlow.setFlush(child, flushVal);
        };
        SFlow.prototype.insertAt = function (child, position, floatVal, flushVal) {
            this.insertChildAt(child, position);
            if (floatVal !== undefined)
                SFlow.setFloat(child, floatVal);
            if (flushVal !== undefined)
                SFlow.setFlush(child, flushVal);
        };
        SFlow.prototype.insertBefore = function (child, beforeChild, floatVal, flushVal) {
            this.insertChildBefore(child, beforeChild);
            if (floatVal !== undefined)
                SFlow.setFloat(child, floatVal);
            if (flushVal !== undefined)
                SFlow.setFlush(child, flushVal);
        };
        SFlow.prototype.moveAt = function (child, position) {
            this.moveChildAt(child, position);
        };
        SFlow.prototype.remove = function (child) {
            this.removeChild(child);
        };
        SFlow.prototype.measureCore = function (width, height) {
            if (this.children.length === 0)
                return { width: 0, height: 0 };
            if (this._uniform) {
                this._uniformWidth = 0;
                this._uniformHeight = 0;
                for (var i = 0; i < this.children.length; i++) {
                    var child = this.children[i];
                    var childSize = child.measure(width, height);
                    if (childSize.width > this._uniformWidth)
                        this._uniformWidth = childSize.width;
                    if (childSize.height > this._uniformHeight)
                        this._uniformHeight = childSize.height;
                }
                if (this._uniformRatio !== undefined) {
                    var aratio = this._uniformWidth / this._uniformHeight;
                    var aw, ah;
                    if (this._uniformRatio < aratio) {
                        aw = this._uniformWidth;
                        ah = aw / this._uniformRatio;
                    }
                    else {
                        ah = this._uniformHeight;
                        aw = ah * this._uniformRatio;
                    }
                    this._uniformWidth = aw;
                    this._uniformHeight = ah;
                }
            }
            var state = new SFlowState({
                width: width, render: false, spacing: this._spacing,
                align: this.itemAlign, uniform: this._uniform,
                uniformWidth: this._uniformWidth, uniformHeight: this._uniformHeight,
                stretchMaxRatio: this._stretchMaxRatio
            });
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                if (!child.isCollapsed)
                    state.append(child);
            }
            return state.getSize();
        };
        SFlow.prototype.arrangeCore = function (width, height) {
            var state = new SFlowState({
                width: width, render: true, spacing: this._spacing,
                align: this.itemAlign, uniform: this._uniform,
                uniformWidth: this._uniformWidth, uniformHeight: this._uniformHeight,
                stretchMaxRatio: this._stretchMaxRatio
            });
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                if (!child.isCollapsed)
                    state.append(child);
            }
            state.getSize();
        };
        SFlow.getFloat = function (child) {
            return child['Ui.SFlow.float'] ? child['Ui.SFlow.float'] : 'none';
        };
        SFlow.setFloat = function (child, floatVal) {
            if (SFlow.getFloat(child) !== floatVal) {
                child['Ui.SFlow.float'] = floatVal;
                child.invalidateMeasure();
            }
        };
        SFlow.getFlush = function (child) {
            return child['Ui.SFlow.flush'] ? child['Ui.SFlow.flush'] : 'none';
        };
        SFlow.setFlush = function (child, flushVal) {
            if (SFlow.getFlush(child) !== flushVal) {
                child['Ui.SFlow.flush'] = flushVal;
                child.invalidateMeasure();
            }
        };
        return SFlow;
    }(Ui.Container));
    Ui.SFlow = SFlow;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Video = (function (_super) {
        __extends(Video, _super);
        function Video(init) {
            var _this = _super.call(this, init) || this;
            _this.loaddone = false;
            _this.canplaythrough = false;
            _this._state = 'initial';
            _this.statechanged = new Core.Events();
            _this.ready = new Core.Events();
            _this.ended = new Core.Events();
            _this.error = new Core.Events();
            _this.timeupdated = new Core.Events();
            _this.bufferingupdated = new Core.Events();
            if (init) {
                if (init.src !== undefined)
                    _this.src = init.src;
                if (init.oggSrc || init.mp4Src || init.webmSrc) {
                    if (init.mp4Src && Ui.Video.supportMp4)
                        _this.src = init.mp4Src;
                    else if (init.webmSrc && Ui.Video.supportWebm)
                        _this.src = init.webmSrc;
                    else if (init.oggSrc && Ui.Video.supportOgg)
                        _this.src = init.oggSrc;
                }
                if (init.poster !== undefined)
                    _this.poster = init.poster;
                if (init.autoplay !== undefined)
                    _this.autoplay = init.autoplay;
                if (init.volume !== undefined)
                    _this.volume = init.volume;
                if (init.currentTime !== undefined)
                    _this.currentTime = init.currentTime;
                if (init.controls !== undefined)
                    _this.controls = init.controls;
                if (init.controlsList !== undefined)
                    _this.controlsList = init.controlsList;
                if (init.onstatechanged)
                    _this.statechanged.connect(init.onstatechanged);
                if (init.onready)
                    _this.ready.connect(init.onready);
                if (init.onended)
                    _this.ended.connect(init.onended);
                if (init.onerror)
                    _this.error.connect(init.onerror);
                if (init.ontimeupdated)
                    _this.timeupdated.connect(init.ontimeupdated);
                if (init.onbufferingupdated)
                    _this.bufferingupdated.connect(init.onbufferingupdated);
            }
            return _this;
        }
        Object.defineProperty(Video.prototype, "onstatechanged", {
            set: function (value) { this.statechanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "onready", {
            set: function (value) { this.ready.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "onended", {
            set: function (value) { this.ended.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "onerror", {
            set: function (value) { this.error.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "ontimeupdated", {
            set: function (value) { this.timeupdated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "onbufferingupdated", {
            set: function (value) { this.bufferingupdated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "src", {
            set: function (src) {
                this.canplaythrough = false;
                this._state = 'initial';
                if (typeof (src) === 'object')
                    this.videoDrawing.src = URL.createObjectURL(src);
                else if (src !== undefined)
                    this.videoDrawing.setAttribute('src', src);
                else
                    this.videoDrawing.removeAttribute('src');
                try {
                    this.videoDrawing.load();
                }
                catch (e) { }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "poster", {
            set: function (src) {
                this.videoDrawing.setAttribute('poster', src);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "autoplay", {
            set: function (autoplay) {
                this.videoDrawing.autoplay = autoplay;
            },
            enumerable: true,
            configurable: true
        });
        Video.prototype.play = function () {
            this._state = 'playing';
            this.statechanged.fire({ target: this, state: this._state });
            if (this.canplaythrough)
                this.videoDrawing.play();
            else
                this.videoDrawing.load();
        };
        Video.prototype.pause = function () {
            this._state = 'paused';
            this.statechanged.fire({ target: this, state: this._state });
            if (this.canplaythrough)
                this.videoDrawing.pause();
            else
                this.videoDrawing.load();
        };
        Video.prototype.stop = function () {
            this.videoDrawing.pause();
            this.onEnded();
        };
        Object.defineProperty(Video.prototype, "controls", {
            get: function () {
                return this.videoDrawing.controls;
            },
            set: function (value) {
                if (value)
                    this.videoDrawing.controls = true;
                else
                    delete (this.videoDrawing.controls);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "controlsList", {
            get: function () {
                if (this.videoDrawing['controlsList'] === undefined)
                    return [];
                var controlsList = [];
                this.videoDrawing['controlsList'].forEach(function (token) { return controlsList.push(token); });
                return controlsList;
            },
            set: function (value) {
                if ('controlsList' in this.videoDrawing) {
                    var tokenList = this.videoDrawing['controlsList'];
                    for (var _i = 0, value_3 = value; _i < value_3.length; _i++) {
                        var element = value_3[_i];
                        if (!tokenList.supports(element))
                            continue;
                        tokenList.add(element);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "volume", {
            get: function () {
                return this.videoDrawing.volume;
            },
            set: function (volume) {
                this.videoDrawing.volume = volume;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "duration", {
            get: function () {
                return this.videoDrawing.duration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "currentTime", {
            get: function () {
                if (this.videoDrawing.currentTime === undefined)
                    return 0;
                else
                    return this.videoDrawing.currentTime;
            },
            set: function (time) {
                this.videoDrawing.currentTime = time;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "isReady", {
            get: function () {
                return this.canplaythrough;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "naturalWidth", {
            get: function () {
                return this.videoDrawing.videoWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Video.prototype, "naturalHeight", {
            get: function () {
                return this.videoDrawing.videoHeight;
            },
            enumerable: true,
            configurable: true
        });
        Video.prototype.onReady = function () {
            this.canplaythrough = true;
            this.videoDrawing.videoWidth;
            this.videoDrawing.videoHeight;
            if (this._state == 'playing')
                this.videoDrawing.play();
            else if (this._state == 'paused')
                this.videoDrawing.pause();
            this.ready.fire({ target: this });
        };
        Video.prototype.onTimeUpdate = function () {
            this.timeupdated.fire({ target: this, time: this.videoDrawing.currentTime });
            this.checkBuffering();
        };
        Video.prototype.onEnded = function () {
            this.videoDrawing.pause();
            this._state = 'initial';
            this.videoDrawing.currentTime = 0;
            this.ended.fire({ target: this });
            this.statechanged.fire({ target: this, state: this._state });
        };
        Video.prototype.onProgress = function () {
            this.checkBuffering();
        };
        Object.defineProperty(Video.prototype, "currentBufferSize", {
            get: function () {
                var buffered = this.videoDrawing.buffered;
                var timebuffer = 0;
                var time = this.videoDrawing.currentTime;
                if (time === undefined)
                    time = 0;
                var lastEnd;
                for (var i = 0; i < buffered.length; i++) {
                    var start = buffered.start(i);
                    var end = buffered.end(i);
                    if (lastEnd === undefined) {
                        if ((start <= time) && (end >= time)) {
                            timebuffer = end - time;
                            lastEnd = end;
                        }
                    }
                    else {
                        if ((lastEnd >= (start - 0.01)) && (lastEnd <= end)) {
                            timebuffer += (end - lastEnd);
                            lastEnd = end;
                        }
                    }
                }
                return timebuffer;
            },
            enumerable: true,
            configurable: true
        });
        Video.prototype.checkBuffering = function () {
            var timebuffer = this.currentBufferSize;
            var time = this.videoDrawing.currentTime;
            var duration = this.videoDrawing.duration;
            this.bufferingupdated.fire({ target: this, buffer: timebuffer });
        };
        Video.prototype.onError = function () {
            this._state = 'error';
            this.error.fire({ target: this, code: this.videoDrawing.error.code });
            this.statechanged.fire({ target: this, state: this._state });
        };
        Video.prototype.onWaiting = function () {
            if (!this.canplaythrough)
                this.videoDrawing.load();
        };
        Video.prototype.onUnload = function () {
            _super.prototype.onUnload.call(this);
            if (this.canplaythrough)
                this.pause();
            this.videoDrawing.removeAttribute('src');
            try {
                this.videoDrawing.load();
            }
            catch (e) { }
        };
        Video.prototype.renderDrawing = function () {
            var _this = this;
            if (Ui.Video.htmlVideo) {
                this.videoDrawing = document.createElement('video');
                this.videoDrawing.addEventListener('canplaythrough', function () { return _this.onReady(); });
                this.videoDrawing.addEventListener('ended', function () { return _this.onEnded(); });
                this.videoDrawing.addEventListener('timeupdate', function () { return _this.onTimeUpdate(); });
                this.videoDrawing.addEventListener('error', function () { return _this.onError(); });
                this.videoDrawing.addEventListener('progress', function () { return _this.onProgress(); });
                this.videoDrawing.addEventListener('waiting', function () { return _this.onWaiting(); });
                this.videoDrawing.setAttribute('preload', 'auto');
                this.videoDrawing.load();
                this.videoDrawing.style.position = 'absolute';
                this.videoDrawing.style.left = '0px';
                this.videoDrawing.style.top = '0px';
            }
            return this.videoDrawing;
        };
        Video.prototype.arrangeCore = function (width, height) {
            if (Ui.Video.htmlVideo) {
                this.videoDrawing.setAttribute('width', width.toString());
                this.videoDrawing.setAttribute('height', height.toString());
            }
        };
        Video.initialize = function () {
            var videoTest = document.createElement('video');
            if (videoTest.play !== undefined) {
                this.htmlVideo = true;
                this.supportMp4 = !!videoTest.canPlayType && '' !== videoTest.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"');
                this.supportOgg = !!videoTest.canPlayType && '' !== videoTest.canPlayType('video/ogg; codecs="theora, vorbis"');
                this.supportWebm = !!videoTest.canPlayType && '' !== videoTest.canPlayType('video/webm; codecs="vp8, vorbis"');
            }
        };
        Video.htmlVideo = false;
        Video.flashVideo = false;
        Video.supportOgg = false;
        Video.supportMp4 = false;
        Video.supportWebm = false;
        return Video;
    }(Ui.Element));
    Ui.Video = Video;
})(Ui || (Ui = {}));
Ui.Video.initialize();
var Ui;
(function (Ui) {
    var MonthCalendar = (function (_super) {
        __extends(MonthCalendar, _super);
        function MonthCalendar(init) {
            var _this = _super.call(this, init) || this;
            _this._mode = 'DAY';
            _this.dayselected = new Core.Events();
            _this._date = new Date();
            var hbox = new Ui.HBox();
            _this.append(hbox);
            var button = new Ui.Pressable({
                verticalAlign: 'center',
                onpressed: function () { return _this.onLeftButtonPress(); },
            });
            _this.leftarrow = new Ui.Icon({ icon: 'arrowleft', width: 24, height: 24 });
            button.append(_this.leftarrow);
            hbox.append(button);
            var datehbox = new Ui.HBox({ spacing: 5, horizontalAlign: 'center' });
            button = new Ui.Pressable({
                onpressed: function () { return _this.mode = _this.mode == 'MONTH' ? 'DAY' : 'MONTH'; }
            });
            _this.monthLabel = new Ui.Label({ fontWeight: 'bold', fontSize: 18, margin: 5 });
            button.append(_this.monthLabel);
            datehbox.append(button);
            button = new Ui.Pressable({
                onpressed: function () { return _this.mode = _this.mode == 'YEAR' ? 'DAY' : 'YEAR'; }
            });
            _this.yearLabel = new Ui.Label({ fontWeight: 'bold', fontSize: 18, margin: 5 });
            button.append(_this.yearLabel);
            datehbox.append(button);
            hbox.append(datehbox, true);
            button = new Ui.Pressable({
                verticalAlign: 'center',
                onpressed: function () { return _this.onRightButtonPress(); }
            });
            _this.rightarrow = new Ui.Icon({ icon: 'arrowright', width: 24, height: 24 });
            button.append(_this.rightarrow);
            hbox.append(button);
            _this.updateDate();
            if (init) {
                if (init.date !== undefined)
                    _this.date = init.date;
                if (init.selectedDate !== undefined)
                    _this.selectedDate = init.selectedDate;
                if (init.dayFilter !== undefined)
                    _this.dayFilter = init.dayFilter;
                if (init.dateFilter !== undefined)
                    _this.dateFilter = init.dateFilter;
                if (init.ondayselected)
                    _this.dayselected.connect(init.ondayselected);
            }
            return _this;
        }
        Object.defineProperty(MonthCalendar.prototype, "ondayselected", {
            set: function (value) { this.dayselected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonthCalendar.prototype, "dayFilter", {
            set: function (dayFilter) {
                this._dayFilter = dayFilter;
                this.updateDate();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonthCalendar.prototype, "dateFilter", {
            set: function (dateFilter) {
                this._dateFilter = dateFilter;
                this.updateDate();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonthCalendar.prototype, "date", {
            set: function (date) {
                this._date = date;
                this.updateDate();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonthCalendar.prototype, "selectedDate", {
            get: function () {
                return this._selectedDate;
            },
            set: function (selectedDate) {
                this._selectedDate = selectedDate;
                this.updateDate();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MonthCalendar.prototype, "mode", {
            get: function () {
                return this._mode;
            },
            set: function (value) {
                if (value != this.mode) {
                    this._mode = value;
                    this.updateDate(false);
                }
            },
            enumerable: true,
            configurable: true
        });
        MonthCalendar.prototype.onLeftButtonPress = function () {
            if (this.mode == 'YEAR')
                this._date.setFullYear(this._date.getFullYear() - 12);
            else {
                this._date.setDate(1);
                this._date.setMonth(this._date.getMonth() - 1);
            }
            this.updateDate();
        };
        MonthCalendar.prototype.onRightButtonPress = function () {
            if (this.mode == 'YEAR')
                this._date.setFullYear(this._date.getFullYear() + 12);
            else {
                this._date.setDate(1);
                this._date.setMonth(this._date.getMonth() + 1);
            }
            this.updateDate();
        };
        MonthCalendar.prototype.onDaySelect = function (button) {
            this._selectedDate = button.monthCalendarDate;
            this.updateDate();
            this.dayselected.fire({ target: this, value: this._selectedDate });
        };
        MonthCalendar.prototype.updateDate = function (reuseGrid) {
            if (reuseGrid === void 0) { reuseGrid = true; }
            var monthNames = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
            this.monthLabel.text = monthNames[this._date.getMonth()];
            this.yearLabel.text = this._date.getFullYear().toString();
            if (this.mode == 'DAY')
                this.updateDayGrid(reuseGrid);
            else if (this.mode == 'MONTH')
                this.updateMonthGrid(reuseGrid);
            else
                this.updateYearGrid(reuseGrid);
            this.onStyleChange();
        };
        MonthCalendar.prototype.updateDayGrid = function (reuseGrid) {
            var _this = this;
            var i;
            var dayPivot = [6, 0, 1, 2, 3, 4, 5];
            var dayNames = ['Lu', 'Ma', 'Me', 'Je', 'Ve', 'Sa', 'Di'];
            if (reuseGrid && this.grid)
                while (this.grid.firstChild !== undefined)
                    this.grid.detach(this.grid.firstChild);
            else {
                this.remove(this.grid);
                this.grid = new Ui.Grid({
                    cols: '*,*,*,*,*,*,*',
                    rows: '*,*,*,*,*,*,*',
                    horizontalAlign: 'stretch'
                });
                this.append(this.grid);
            }
            for (i = 0; i < 7; i++)
                this.grid.attach(new Ui.Label({ text: dayNames[i], fontWeight: 'bold', margin: 5 }), i, 0);
            var month = this._date.getMonth();
            var current = new Date(this._date.getTime());
            current.setDate(1);
            var row = 1;
            var now = new Date();
            var _loop_1 = function () {
                var day = new DayButton({
                    onpressed: function () { return _this.onDaySelect(day); }
                });
                day.monthCalendarDate = current;
                var bg = void 0;
                if ((current.getFullYear() == now.getFullYear()) && (current.getMonth() == now.getMonth()) && (current.getDate() == now.getDate())) {
                    day.monthCalendarCurrent = true;
                    bg = new Ui.Rectangle({ fill: new Ui.Color(0.2, 0.4, 1, 0.4), margin: 1 });
                    day.append(bg);
                }
                else {
                    bg = new Ui.Rectangle({ fill: new Ui.Color(0.8, 0.8, 0.8, 0.4), margin: 1 });
                    day.append(bg);
                }
                if ((this_1._selectedDate !== undefined) && (current.getFullYear() === this_1._selectedDate.getFullYear()) && (current.getMonth() === this_1._selectedDate.getMonth()) && (current.getDate() === this_1._selectedDate.getDate()))
                    day.append(new Ui.Frame({ frameWidth: 3, fill: 'red', radius: 0 }));
                var disable = false;
                if (this_1._dayFilter !== undefined) {
                    var weekday = current.getDay();
                    for (i = 0; (i < this_1._dayFilter.length) && !disable; i++)
                        if (weekday == this_1._dayFilter[i])
                            disable = true;
                }
                if (this_1._dateFilter !== undefined) {
                    var daystr = current.getFullYear() + '/';
                    if (current.getMonth() + 1 < 10)
                        daystr += '0';
                    daystr += (current.getMonth() + 1) + '/';
                    if (current.getDate() < 10)
                        daystr += '0';
                    daystr += current.getDate();
                    for (i = 0; (i < this_1._dateFilter.length) && !disable; i++) {
                        var re = new RegExp(this_1._dateFilter[i]);
                        if (re.test(daystr)) {
                            disable = true;
                        }
                    }
                }
                if (disable) {
                    day.disable();
                    day.opacity = 0.2;
                }
                day.append(new Ui.Label({ text: current.getDate().toString(), margin: 5 }));
                this_1.grid.attach(day, dayPivot[current.getDay()], row);
                current = new Date(current.getTime() + 1000 * 60 * 60 * 24);
                if (dayPivot[current.getDay()] === 0)
                    row++;
            };
            var this_1 = this;
            do {
                _loop_1();
            } while (month == current.getMonth());
        };
        MonthCalendar.prototype.updateMonthGrid = function (reuseGrid) {
            var _this = this;
            if (reuseGrid && this.grid)
                while (this.grid.firstChild !== undefined)
                    this.grid.detach(this.grid.firstChild);
            else {
                this.remove(this.grid);
                this.grid = new Ui.Grid({
                    cols: '*,*,*,*',
                    rows: '*,*,*',
                    horizontalAlign: 'stretch'
                });
                this.append(this.grid);
            }
            var monthNames = ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Jun', 'Jui', 'Aoû', 'Sep', 'Oct', 'Nov', 'Déc'];
            var nbCols = 4;
            var _loop_2 = function (i) {
                var row = Math.trunc(i / nbCols);
                var col = i % nbCols;
                var current = new Date(this_2._date.getTime());
                current.setDate(1);
                current.setMonth(i);
                var month = new MonthYearButton({
                    onpressed: function () {
                        _this._date = month.monthCalendarDate;
                        _this.mode = 'DAY';
                    },
                });
                month.monthCalendarDate = current;
                var label = new Ui.Label({
                    text: monthNames[i], fontWeight: 'bold',
                    marginLeft: 10, marginRight: 25,
                    marginBottom: 10, marginTop: 10,
                    color: this_2._date && this_2._date.getMonth() == current.getMonth() ? '#ff0000' : undefined
                });
                month.append(label);
                var disable = false;
                if (this_2._dateFilter !== undefined) {
                    var daystr = current.getFullYear() + '/';
                    if (current.getMonth() + 1 < 10)
                        daystr += '0';
                    daystr += (current.getMonth() + 1) + '/';
                    for (i = 0; (i < this_2._dateFilter.length) && !disable; i++) {
                        var re = new RegExp(this_2._dateFilter[i]);
                        if (re.test(daystr)) {
                            disable = true;
                        }
                    }
                }
                if (disable) {
                    month.disable();
                    month.opacity = 0.2;
                }
                this_2.grid.attach(month, col, row);
                out_i_1 = i;
            };
            var this_2 = this, out_i_1;
            for (var i = 0; i < monthNames.length; i++) {
                _loop_2(i);
                i = out_i_1;
            }
        };
        MonthCalendar.prototype.updateYearGrid = function (reuseGrid) {
            var _this = this;
            if (reuseGrid && this.grid)
                while (this.grid.firstChild !== undefined)
                    this.grid.detach(this.grid.firstChild);
            else {
                this.remove(this.grid);
                this.grid = new Ui.Grid({
                    cols: '*,*,*,*',
                    rows: '*,*,*',
                    horizontalAlign: 'stretch'
                });
                this.append(this.grid);
            }
            var nbCols = 4;
            var _loop_3 = function (i) {
                var currentYear = this_3._date.getFullYear() - 6 + i;
                var row = Math.trunc(i / nbCols);
                var col = i % nbCols;
                var current = new Date(currentYear, 0, 1);
                var year = new MonthYearButton({
                    onpressed: function () {
                        _this._date = year.monthCalendarDate;
                        _this.mode = 'DAY';
                    },
                });
                year.monthCalendarDate = current;
                var label = new Ui.Label({
                    text: currentYear.toString(), fontWeight: 'bold',
                    marginLeft: 10, marginRight: 25,
                    marginBottom: 10, marginTop: 10,
                    color: this_3._date && this_3._date.getFullYear() == current.getFullYear() ? '#ff0000' : undefined
                });
                year.append(label);
                var disable = false;
                if (this_3._dateFilter !== undefined) {
                    var daystr = current.getFullYear() + '/';
                    for (currentYear = 0; (currentYear < this_3._dateFilter.length) && !disable; currentYear++) {
                        var re = new RegExp(this_3._dateFilter[currentYear]);
                        if (re.test(daystr)) {
                            disable = true;
                        }
                    }
                }
                if (disable) {
                    year.disable();
                    year.opacity = 0.2;
                }
                this_3.grid.attach(year, col, row);
            };
            var this_3 = this;
            for (var i = 0; i < 12; i++) {
                _loop_3(i);
            }
        };
        MonthCalendar.prototype.onStyleChange = function () {
            var color = this.getStyleProperty('color');
            var dayColor = this.getStyleProperty('dayColor');
            var currentDayColor = this.getStyleProperty('currentDayColor');
            this.monthLabel.color = color;
            this.yearLabel.color = color;
            this.leftarrow.fill = color;
            this.rightarrow.fill = color;
            for (var i = 0; i < this.grid.children.length; i++) {
                var child = this.grid.children[i];
                if (child instanceof Ui.Label)
                    child.color = color;
                else if (child instanceof DayButton) {
                    for (var i2 = 0; i2 < child.children.length; i2++) {
                        var child2 = child.children[i2];
                        if (child2 instanceof Ui.Label)
                            child2.color = color;
                        else if (child2 instanceof Ui.Rectangle) {
                            if (child.monthCalendarCurrent)
                                child2.fill = currentDayColor;
                            else
                                child2.fill = dayColor;
                        }
                    }
                }
            }
        };
        MonthCalendar.style = {
            color: 'black',
            dayColor: new Ui.Color(0.81, 0.81, 0.81, 0.5),
            currentDayColor: new Ui.Color(1, 0.31, 0.66, 0.5)
        };
        return MonthCalendar;
    }(Ui.VBox));
    Ui.MonthCalendar = MonthCalendar;
    var DayButton = (function (_super) {
        __extends(DayButton, _super);
        function DayButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return DayButton;
    }(Ui.Pressable));
    var MonthYearButton = (function (_super) {
        __extends(MonthYearButton, _super);
        function MonthYearButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MonthYearButton;
    }(Ui.Pressable));
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var TextFieldButton = (function (_super) {
        __extends(TextFieldButton, _super);
        function TextFieldButton() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.style = {
                padding: 6,
                iconSize: 22,
                background: 'rgba(250,250,250,0)',
                backgroundBorder: 'rgba(140,140,140,0)'
            };
            return _this;
        }
        return TextFieldButton;
    }(Ui.Button));
    Ui.TextFieldButton = TextFieldButton;
    var TextButtonField = (function (_super) {
        __extends(TextButtonField, _super);
        function TextButtonField(init) {
            var _this = _super.call(this, init) || this;
            _this.changed = new Core.Events();
            _this.buttonpressed = new Core.Events();
            _this.validated = new Core.Events();
            _this.padding = 0;
            _this.graphic = new Ui.TextBgGraphic();
            _this.append(_this.graphic);
            _this._textholder = new Ui.Label({
                opacity: 0.5, horizontalAlign: 'left', margin: 5,
                marginLeft: 10, marginRight: 10
            });
            _this.append(_this._textholder);
            var hbox = new Ui.HBox();
            _this.append(hbox);
            _this.entry = new Ui.Entry({
                margin: 5, marginLeft: 10, marginRight: 10, fontSize: 16
            });
            _this.entry.focused.connect(function () { return _this.onEntryFocus(); });
            _this.entry.blurred.connect(function () { return _this.onEntryBlur(); });
            hbox.append(_this.entry, true);
            _this.entry.changed.connect(function (e) { return _this.onEntryChange(e.target, e.value); });
            _this.button = new TextFieldButton({ orientation: 'horizontal', margin: 0 });
            hbox.append(_this.button);
            _this.submited.connect(function () { return _this.onFormSubmit(); });
            _this.button.pressed.connect(function () { return _this.onButtonPress(); });
            if (init) {
                if (init.textHolder !== undefined)
                    _this.textHolder = init.textHolder;
                if (init.widthText !== undefined)
                    _this.widthText = init.widthText;
                if (init.buttonIcon !== undefined)
                    _this.buttonIcon = init.buttonIcon;
                if (init.buttonText !== undefined)
                    _this.buttonText = init.buttonText;
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
                if (init.onbuttonpressed)
                    _this.buttonpressed.connect(init.onbuttonpressed);
                if (init.onvalidated)
                    _this.validated.connect(init.onvalidated);
            }
            return _this;
        }
        Object.defineProperty(TextButtonField.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "onbuttonpressed", {
            set: function (value) { this.buttonpressed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "onvalidated", {
            set: function (value) { this.validated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "textHolder", {
            set: function (text) {
                this._textholder.text = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "widthText", {
            set: function (nbchar) {
                this.entry.width = nbchar * 16 * 2 / 3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "buttonIcon", {
            set: function (icon) {
                this.button.icon = icon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "buttonText", {
            set: function (text) {
                this.button.text = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "textValue", {
            get: function () {
                return this.entry.value;
            },
            set: function (value) {
                this.entry.value = value;
                if (value && value != '')
                    this._textholder.hide();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextButtonField.prototype, "value", {
            get: function () {
                return this.textValue;
            },
            set: function (value) {
                this.textValue = value;
            },
            enumerable: true,
            configurable: true
        });
        TextButtonField.prototype.onButtonPress = function () {
            this.buttonpressed.fire({ target: this });
            this.validated.fire({ target: this, value: this.value });
        };
        TextButtonField.prototype.onEntryChange = function (entry, value) {
            this.changed.fire({ target: this, value: value });
        };
        TextButtonField.prototype.onFormSubmit = function () {
            this.validated.fire({ target: this, value: this.value });
        };
        TextButtonField.prototype.onEntryFocus = function () {
            this._textholder.hide();
            this.graphic.hasFocus = true;
        };
        TextButtonField.prototype.onEntryBlur = function () {
            if (this.value === '')
                this._textholder.show();
            this.graphic.hasFocus = false;
        };
        return TextButtonField;
    }(Ui.Form));
    Ui.TextButtonField = TextButtonField;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var DatePicker = (function (_super) {
        __extends(DatePicker, _super);
        function DatePicker(init) {
            var _this = _super.call(this, init) || this;
            _this._isValid = false;
            _this.buttonIcon = 'calendar';
            _this.widthText = 9;
            _this.buttonpressed.connect(function () { return _this.onDatePickerButtonPress(); });
            _this.changed.connect(function () { return _this.onDatePickerChange(); });
            if (init) {
                if (init.dayFilter !== undefined)
                    _this.dayFilter = init.dayFilter;
                if (init.dateFilter !== undefined)
                    _this.dateFilter = init.dateFilter;
                if (init.selectedDate !== undefined)
                    _this.selectedDate = init.selectedDate;
            }
            return _this;
        }
        Object.defineProperty(DatePicker.prototype, "dayFilter", {
            set: function (dayFilter) {
                this._dayFilter = dayFilter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "dateFilter", {
            set: function (dateFilter) {
                this._dateFilter = dateFilter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "isValid", {
            get: function () {
                return this._isValid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatePicker.prototype, "selectedDate", {
            get: function () {
                return this._selectedDate;
            },
            set: function (date) {
                if (date === undefined) {
                    this._selectedDate = undefined;
                    this.textValue = '';
                }
                else {
                    this._selectedDate = date;
                    this.textValue = this.zeroPad(date.getDate(), 2) + "/" + this.zeroPad(date.getMonth() + 1, 2) + "/" + date.getFullYear();
                }
                this._isValid = true;
            },
            enumerable: true,
            configurable: true
        });
        DatePicker.prototype.onDatePickerButtonPress = function () {
            var _this = this;
            var splitDate = this.textValue.match(/^(\d{1,2})\/(\d{1,2})\/(\d{1,4})$/);
            if (splitDate !== null)
                this.selectedDate = new Date(parseInt(splitDate[3]), parseInt(splitDate[2]) - 1, parseInt(splitDate[1]));
            this.popup = new Ui.Popup();
            if (this.selectedDate !== undefined)
                this.calendar = new Ui.MonthCalendar({ horizontalAlign: 'center', margin: 10, selectedDate: new Date(this.selectedDate.getTime()), date: new Date(this.selectedDate.getTime()) });
            else
                this.calendar = new Ui.MonthCalendar({ horizontalAlign: 'center', margin: 10 });
            if (this._dayFilter !== undefined)
                this.calendar.dayFilter = this._dayFilter;
            if (this._dateFilter !== undefined)
                this.calendar.dateFilter = this._dateFilter;
            this.popup.content = this.calendar;
            this.calendar.dayselected.connect(function (e) { return _this.onDaySelect(e.target, e.value); });
            this.popup.openElement(this);
        };
        DatePicker.prototype.onDatePickerChange = function () {
            this._isValid = false;
            this._selectedDate = undefined;
            var dateStr = this.textValue;
            if (dateStr.match(/^(\d{1,2})\/(\d{1,2})\/(\d{1,4})$/)) {
                var splitDate = this.textValue.match(/^(\d{1,2})\/(\d{1,2})\/(\d{1,4})$/);
                var date = new Date(parseInt(splitDate[3]), parseInt(splitDate[2]) - 1, parseInt(splitDate[1]));
                var newStr = ((date.getDate() < 10) ? '0' : '') + date.getDate() + '/' + ((date.getMonth() < 9) ? '0' : '') + (date.getMonth() + 1) + '/' + date.getFullYear();
                if (!((parseInt(splitDate[3]) != date.getFullYear()) || (parseInt(splitDate[2]) - 1 != date.getMonth()) || (parseInt(splitDate[1]) != date.getDate()))) {
                    this._selectedDate = date;
                    this._isValid = true;
                }
            }
        };
        DatePicker.prototype.zeroPad = function (val, size) {
            if (size === void 0) { size = 2; }
            var s = val.toString();
            while (s.length < size)
                s = "0" + s;
            return s;
        };
        DatePicker.prototype.onDaySelect = function (monthcalendar, date) {
            this.selectedDate = date;
            this.popup.close();
            this.popup = undefined;
            this.changed.fire({ target: this, value: this.textValue });
        };
        return DatePicker;
    }(Ui.TextButtonField));
    Ui.DatePicker = DatePicker;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var DownloadButton = (function (_super) {
        __extends(DownloadButton, _super);
        function DownloadButton(init) {
            var _this = _super.call(this, init) || this;
            _this.download = new Core.Events();
            _this.style = {
                background: '#a4f4a4'
            };
            _this.link.connect(function () { return _this.onLinkPress(); });
            return _this;
        }
        Object.defineProperty(DownloadButton.prototype, "ondownload", {
            set: function (value) { this.download.connect(value); },
            enumerable: true,
            configurable: true
        });
        DownloadButton.prototype.onLinkPress = function () {
            this.download.fire({ target: this });
        };
        return DownloadButton;
    }(Ui.LinkButton));
    Ui.DownloadButton = DownloadButton;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var SVGElement = (function (_super) {
        __extends(SVGElement, _super);
        function SVGElement() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SVGElement.prototype.renderSVG = function (svg) {
        };
        SVGElement.prototype.renderDrawing = function () {
            var svg = document.createElementNS(svgNS, 'svg');
            svg.setAttribute('focusable', 'false');
            var content = this.renderSVG(svg);
            if (content !== undefined)
                svg.appendChild(content);
            return svg;
        };
        return SVGElement;
    }(Ui.Element));
    Ui.SVGElement = SVGElement;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ShapeIcon = (function (_super) {
        __extends(ShapeIcon, _super);
        function ShapeIcon(init) {
            var _this = _super.call(this, init) || this;
            if (init) {
                if (init.icon !== undefined)
                    _this.icon = init.icon;
            }
            return _this;
        }
        Object.defineProperty(ShapeIcon.prototype, "icon", {
            set: function (icon) {
                this.path = Ui.Icon.icons[icon];
            },
            enumerable: true,
            configurable: true
        });
        ShapeIcon.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, width, height);
            this.scale = Math.min(width, height) / 48;
        };
        return ShapeIcon;
    }(Ui.Shape));
    Ui.ShapeIcon = ShapeIcon;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var IFrame = (function (_super) {
        __extends(IFrame, _super);
        function IFrame(init) {
            var _this = _super.call(this, init) || this;
            _this._isReady = false;
            _this.ready = new Core.Events();
            _this.iframeDrawing.addEventListener('load', function () { return _this.onIFrameLoad(); });
            if (init) {
                if (init.src !== undefined)
                    _this.src = init.src;
            }
            return _this;
        }
        Object.defineProperty(IFrame.prototype, "onready", {
            set: function (value) { this.ready.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IFrame.prototype, "src", {
            get: function () {
                return this.iframeDrawing.getAttribute('src');
            },
            set: function (src) {
                this._isReady = false;
                this.iframeDrawing.setAttribute('src', src);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IFrame.prototype, "isReady", {
            get: function () {
                return this._isReady;
            },
            enumerable: true,
            configurable: true
        });
        IFrame.prototype.onIFrameLoad = function () {
            if (!this._isReady) {
                this._isReady = true;
                this.ready.fire({ target: this });
            }
        };
        IFrame.prototype.renderDrawing = function () {
            if (Core.Navigator.iOs) {
                var drawing = _super.prototype.renderDrawing.call(this);
                drawing.style.overflow = 'scroll';
                drawing.style.webkitOverflowScrolling = 'touch';
                this.iframeDrawing = document.createElement('iframe');
                this.iframeDrawing.scrolling = 'no';
                this.iframeDrawing.style.border = '0px';
                this.iframeDrawing.style.margin = '0px';
                this.iframeDrawing.style.padding = '0px';
                this.iframeDrawing.style.width = '100%';
                this.iframeDrawing.style.height = '100%';
                drawing.appendChild(this.iframeDrawing);
                return drawing;
            }
            else {
                this.iframeDrawing = document.createElement('iframe');
                this.iframeDrawing.style.border = '0px';
                this.iframeDrawing.style.margin = '0px';
                this.iframeDrawing.style.padding = '0px';
                this.iframeDrawing.style.width = '100%';
                this.iframeDrawing.style.height = '100%';
                if (Core.Navigator.isIE)
                    this.iframeDrawing.frameBorder = '0';
                return this.iframeDrawing;
            }
        };
        IFrame.prototype.arrangeCore = function (width, height) {
            this.iframeDrawing.style.width = width + 'px';
        };
        return IFrame;
    }(Ui.Element));
    Ui.IFrame = IFrame;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ContentEditable = (function (_super) {
        __extends(ContentEditable, _super);
        function ContentEditable(init) {
            var _this = _super.call(this, init) || this;
            _this.anchorOffset = 0;
            _this._hasSelection = false;
            _this.anchorchanged = new Core.Events();
            _this.changed = new Core.Events();
            _this.validated = new Core.Events();
            _this.selectionentered = new Core.Events();
            _this.selectionleaved = new Core.Events();
            _this._lastHtml = '';
            _this.testAnchorChange = function () {
                var node = window.getSelection().anchorNode;
                var currentNode = node;
                while (currentNode != null && currentNode != _this.drawing) {
                    currentNode = currentNode.parentNode;
                }
                var hasSelection = (currentNode != null);
                if (_this._hasSelection != hasSelection) {
                    _this._hasSelection = hasSelection;
                    if (hasSelection)
                        _this.selectionentered.fire({ target: _this });
                    else
                        _this.selectionleaved.fire({ target: _this });
                }
                if (!hasSelection) {
                    if (_this.hasFocus)
                        _this.onBlur();
                    return;
                }
                if (!_this.hasFocus)
                    _this.onFocus();
                if ((window.getSelection().anchorNode != _this.anchorNode) ||
                    (window.getSelection().anchorOffset != _this.anchorOffset)) {
                    _this.anchorNode = window.getSelection().anchorNode;
                    _this.anchorOffset = window.getSelection().anchorOffset;
                    _this.anchorchanged.fire({ target: _this });
                }
            };
            _this.selectable = true;
            _this.drawing.removeAttribute('tabindex');
            _this.htmlDrawing.setAttribute('contenteditable', 'true');
            _this.drawing.addEventListener('blur', function (e) {
                var node = window.getSelection().anchorNode;
                if (window.getSelection().isCollapsed && _this._hasSelection) {
                    _this._hasSelection = false;
                    _this.selectionleaved.fire({ target: _this });
                }
                _this.onBlur();
            }, true);
            _this.drawing.addEventListener('focus', function (e) { return _this.onFocus(); }, true);
            _this.drawing.addEventListener('keyup', function (e) { return _this.onKeyUp(e); });
            if (window.MutationObserver) {
                var observer = new MutationObserver(function (e) { return _this.onContentSubtreeModified(e); });
                observer.observe(_this.drawing, {
                    attributes: false,
                    childList: true,
                    subtree: true,
                    characterData: true
                });
            }
            if (init) {
                if (init.onanchorchanged)
                    _this.anchorchanged.connect(init.onanchorchanged);
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
                if (init.onvalidated)
                    _this.validated.connect(init.onvalidated);
            }
            return _this;
        }
        Object.defineProperty(ContentEditable.prototype, "onanchorchanged", {
            set: function (value) { this.anchorchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentEditable.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentEditable.prototype, "onvalidated", {
            set: function (value) { this.validated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentEditable.prototype, "onselectionentered", {
            set: function (value) { this.selectionentered.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContentEditable.prototype, "onselectionleaved", {
            set: function (value) { this.selectionleaved.connect(value); },
            enumerable: true,
            configurable: true
        });
        ContentEditable.prototype.onLoad = function () {
            _super.prototype.onLoad.call(this);
            document.addEventListener('selectionchange', this.testAnchorChange);
        };
        ContentEditable.prototype.onUnload = function () {
            _super.prototype.onUnload.call(this);
            document.removeEventListener('selectionchange', this.testAnchorChange);
        };
        ContentEditable.prototype.onKeyUp = function (event) {
            this.testAnchorChange();
            var key = event.which;
            if (key == 13)
                this.validated.fire({ target: this });
        };
        ContentEditable.prototype.onContentSubtreeModified = function (event) {
            this.testAnchorChange();
            this.invalidateMeasure();
        };
        ContentEditable.prototype.measureCore = function (width, height) {
            var html = this.htmlDrawing.outerHTML;
            if (this._lastHtml !== html) {
                this._lastHtml = html;
                this.changed.fire({ target: this });
            }
            return _super.prototype.measureCore.call(this, width, height);
        };
        return ContentEditable;
    }(Ui.Html));
    Ui.ContentEditable = ContentEditable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ScrollLoader = (function (_super) {
        __extends(ScrollLoader, _super);
        function ScrollLoader() {
            var _this = _super.call(this) || this;
            _this.changed = new Core.Events();
            return _this;
        }
        ScrollLoader.prototype.getMin = function () {
            return 0;
        };
        ScrollLoader.prototype.getMax = function () {
            return -1;
        };
        ScrollLoader.prototype.getElementAt = function (position) {
            return undefined;
        };
        return ScrollLoader;
    }(Core.Object));
    Ui.ScrollLoader = ScrollLoader;
    var VBoxScrollable = (function (_super) {
        __extends(VBoxScrollable, _super);
        function VBoxScrollable(init) {
            var _this = _super.call(this, init) || this;
            _this._scrollHorizontal = true;
            _this._scrollVertical = true;
            _this.scrollbarHorizontalNeeded = false;
            _this.scrollbarVerticalNeeded = false;
            _this.showShadows = false;
            _this.lock = false;
            _this.isOver = false;
            _this.offsetX = 0;
            _this.offsetY = 0;
            _this.viewWidth = 0;
            _this.viewHeight = 0;
            _this.contentWidth = 0;
            _this.contentHeight = 0;
            _this.scrollLock = false;
            _this.scrolled = new Core.Events();
            _this.autoShowScrollbars = function () {
                if (_this.showClock == undefined) {
                    _this.showClock = new Anim.Clock({ duration: 'forever' });
                    _this.showClock.timeupdate.connect(function (e) { return _this.onShowBarsTick(e.target, e.progress, e.deltaTick); });
                    _this.showClock.begin();
                }
            };
            _this.autoHideScrollbars = function () {
                if (_this.contentBox.isDown || _this.contentBox.isInertia || _this.isOver ||
                    (_this.scrollbarVertical && _this.scrollbarVertical.isDown) ||
                    (_this.scrollbarHorizontal && _this.scrollbarHorizontal.isDown))
                    return;
                if (_this.showClock === undefined) {
                    _this.showClock = new Anim.Clock({ duration: 'forever' });
                    _this.showClock.timeupdate.connect(function (e) { return _this.onShowBarsTick(e.target, e.progress, e.deltaTick); });
                    _this.showClock.begin();
                }
            };
            _this.onScrollbarHorizontalMove = function () {
                if (_this.scrollLock)
                    return;
                var totalWidth = _this.viewWidth - _this.scrollbarHorizontal.layoutWidth;
                var offsetX = Math.min(1, Math.max(0, _this.scrollbarHorizontal.positionX / totalWidth));
                _this.setOffset(offsetX, undefined);
                _this.scrollbarHorizontal.setPosition(offsetX * totalWidth, undefined);
            };
            _this.onScrollbarVerticalMove = function () {
                if (_this.scrollLock)
                    return;
                var totalHeight = _this.viewHeight - _this.scrollbarVertical.layoutHeight;
                var offsetY = Math.min(1, Math.max(0, _this.scrollbarVertical.positionY / totalHeight));
                _this.setOffset(undefined, offsetY);
                _this.scrollbarVertical.setPosition(undefined, offsetY * totalHeight);
            };
            _this.contentBox = new VBoxScrollableContent();
            _this.contentBox.scrolled.connect(function () { return _this.onScroll(); });
            _this.contentBox.downed.connect(function () { return _this.autoShowScrollbars(); });
            _this.contentBox.inertiaended.connect(function () { return _this.autoHideScrollbars(); });
            _this.appendChild(_this.contentBox);
            _this.ptrmoved.connect(function (event) {
                if (!_this.isDisabled && !event.pointer.getIsDown() && (_this.overWatcher === undefined)) {
                    _this.overWatcher = event.pointer.watch(_this);
                    _this.isOver = true;
                    _this.autoShowScrollbars();
                    _this.overWatcher.moved.connect(function () {
                        if (!_this.overWatcher.getIsInside())
                            _this.overWatcher.cancel();
                    });
                    _this.overWatcher.downed.connect(function () {
                        _this.overWatcher.cancel();
                    });
                    _this.overWatcher.upped.connect(function () {
                        _this.overWatcher.cancel();
                    });
                    _this.overWatcher.cancelled.connect(function () {
                        _this.overWatcher = undefined;
                        _this.isOver = false;
                        _this.autoHideScrollbars();
                    });
                }
            });
            _this.wheelchanged.connect(function (e) { return _this.onWheel(e); });
            if (init) {
                if (init.loader !== undefined)
                    _this.loader = init.loader;
                if (init.maxScale !== undefined)
                    _this.maxScale = init.maxScale;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.scrollHorizontal !== undefined)
                    _this.scrollHorizontal = init.scrollHorizontal;
                if (init.scrollVertical !== undefined)
                    _this.scrollVertical = init.scrollVertical;
                if (init.scrollbarVertical !== undefined)
                    _this.scrollbarVertical = init.scrollbarVertical;
                if (init.scrollbarHorizontal !== undefined)
                    _this.scrollbarHorizontal = init.scrollbarHorizontal;
            }
            return _this;
        }
        Object.defineProperty(VBoxScrollable.prototype, "onscrolled", {
            set: function (value) { this.scrolled.connect(value); },
            enumerable: true,
            configurable: true
        });
        VBoxScrollable.prototype.reload = function () {
            this.contentBox.reload();
        };
        VBoxScrollable.prototype.getActiveItems = function () {
            return this.contentBox.getActiveItems();
        };
        Object.defineProperty(VBoxScrollable.prototype, "loader", {
            set: function (loader) {
                this.contentBox.setLoader(loader);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VBoxScrollable.prototype, "maxScale", {
            set: function (maxScale) {
                this.contentBox.maxScale = maxScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VBoxScrollable.prototype, "content", {
            get: function () {
                return this.contentBox.content;
            },
            set: function (content) {
                this.contentBox.content = content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VBoxScrollable.prototype, "scrollHorizontal", {
            get: function () {
                return this._scrollHorizontal;
            },
            set: function (scroll) {
                if (scroll !== this._scrollHorizontal) {
                    this._scrollHorizontal = scroll;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VBoxScrollable.prototype, "scrollVertical", {
            get: function () {
                return this._scrollVertical;
            },
            set: function (scroll) {
                if (scroll !== this._scrollVertical) {
                    this._scrollVertical = scroll;
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VBoxScrollable.prototype, "scrollbarVertical", {
            get: function () {
                return this._scrollbarVertical;
            },
            set: function (scrollbarVertical) {
                if (this._scrollbarVertical) {
                    this._scrollbarVertical.downed.disconnect(this.autoShowScrollbars);
                    this._scrollbarVertical.upped.disconnect(this.autoHideScrollbars);
                    this._scrollbarVertical.moved.disconnect(this.onScrollbarVerticalMove);
                    this.removeChild(this._scrollbarVertical);
                }
                if (scrollbarVertical) {
                    this._scrollbarVertical = scrollbarVertical;
                    this._scrollbarVertical.moveHorizontal = false;
                    this._scrollbarVertical.downed.connect(this.autoShowScrollbars);
                    this._scrollbarVertical.upped.connect(this.autoHideScrollbars);
                    this._scrollbarVertical.moved.connect(this.onScrollbarVerticalMove);
                    this._scrollbarVertical.opacity = 0;
                    this.appendChild(this._scrollbarVertical);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VBoxScrollable.prototype, "scrollbarHorizontal", {
            get: function () {
                return this._scrollbarHorizontal;
            },
            set: function (scrollbarHorizontal) {
                if (this._scrollbarHorizontal) {
                    this._scrollbarHorizontal.downed.disconnect(this.autoShowScrollbars);
                    this._scrollbarHorizontal.upped.disconnect(this.autoHideScrollbars);
                    this._scrollbarHorizontal.moved.disconnect(this.onScrollbarHorizontalMove);
                    this.removeChild(this._scrollbarHorizontal);
                }
                if (scrollbarHorizontal) {
                    this._scrollbarHorizontal = scrollbarHorizontal;
                    this._scrollbarHorizontal.moveVertical = false;
                    this._scrollbarHorizontal.downed.connect(this.autoShowScrollbars);
                    this._scrollbarHorizontal.upped.connect(this.autoHideScrollbars);
                    this._scrollbarHorizontal.moved.connect(this.onScrollbarHorizontalMove);
                    this._scrollbarHorizontal.opacity = 0;
                    this.appendChild(this._scrollbarHorizontal);
                }
            },
            enumerable: true,
            configurable: true
        });
        VBoxScrollable.prototype.setOffset = function (offsetX, offsetY, absolute) {
            if (absolute === void 0) { absolute = false; }
            if (offsetX === undefined)
                offsetX = this.offsetX;
            else if (!absolute)
                offsetX *= this.contentWidth - this.viewWidth;
            if (offsetY === undefined)
                offsetY = this.offsetY;
            else if (!absolute)
                offsetY *= this.contentHeight - this.viewHeight;
            if (offsetX < 0)
                offsetX = 0;
            else if (this.viewWidth + offsetX > this.contentWidth)
                offsetX = this.contentWidth - this.viewWidth;
            if (offsetY < 0)
                offsetY = 0;
            else if (this.viewHeight + offsetY > this.contentHeight)
                offsetY = this.contentHeight - this.viewHeight;
            this.relativeOffsetX = offsetX / (this.contentWidth - this.viewWidth);
            this.relativeOffsetY = offsetY / (this.contentHeight - this.viewHeight);
            if ((this.offsetX !== offsetX) || (this.offsetY !== offsetY)) {
                this.offsetX = offsetX;
                this.offsetY = offsetY;
                this.contentBox.setOffset(offsetX, offsetY);
                return true;
            }
            else
                return false;
        };
        VBoxScrollable.prototype.getOffsetX = function () {
            return this.contentBox.offsetX;
        };
        VBoxScrollable.prototype.getRelativeOffsetX = function () {
            return this.relativeOffsetX;
        };
        VBoxScrollable.prototype.getOffsetY = function () {
            return this.contentBox.offsetY;
        };
        VBoxScrollable.prototype.getRelativeOffsetY = function () {
            return this.relativeOffsetY;
        };
        VBoxScrollable.prototype.onWheel = function (event) {
            if (this.setOffset(this.contentBox.offsetX + event.deltaX * 3, this.contentBox.offsetY + event.deltaY * 3, true)) {
                event.stopPropagation();
            }
        };
        VBoxScrollable.prototype.onShowBarsTick = function (clock, progress, delta) {
            var show = (this.contentBox.isDown || this.contentBox.isInertia || this.isOver ||
                (this.scrollbarVertical && this.scrollbarVertical.isDown) ||
                (this.scrollbarHorizontal && this.scrollbarHorizontal.isDown));
            var stop = false;
            var speed = 2;
            var opacity = this.scrollbarHorizontal.opacity;
            if (show) {
                opacity += (delta * speed);
                if (opacity >= 1) {
                    opacity = 1;
                    stop = true;
                }
            }
            else {
                opacity -= (delta * speed);
                if (opacity <= 0) {
                    opacity = 0;
                    stop = true;
                }
            }
            this.scrollbarHorizontal.opacity = opacity;
            this.scrollbarVertical.opacity = opacity;
            if (stop) {
                this.showClock.stop();
                this.showClock = undefined;
            }
        };
        VBoxScrollable.prototype.onScroll = function () {
            this.updateOffset();
            this.scrolled.fire({ target: this, offsetX: this.offsetX, offsetY: this.offsetY });
        };
        VBoxScrollable.prototype.updateOffset = function () {
            if (this.contentBox === undefined)
                return;
            this.offsetX = this.contentBox.offsetX;
            this.offsetY = this.contentBox.offsetY;
            this.viewWidth = this.layoutWidth;
            this.viewHeight = this.layoutHeight;
            this.contentWidth = this.contentBox.getContentWidth();
            this.contentHeight = this.contentBox.getContentHeight();
            this.relativeOffsetX = this.offsetX / (this.contentWidth - this.viewWidth);
            this.relativeOffsetY = this.offsetY / (this.contentHeight - this.viewHeight);
            if (this.contentHeight > this.viewHeight)
                this.scrollbarVerticalNeeded = true;
            else
                this.scrollbarVerticalNeeded = false;
            if (this.contentWidth > this.viewWidth)
                this.scrollbarHorizontalNeeded = true;
            else
                this.scrollbarHorizontalNeeded = false;
            if (this.scrollbarVerticalNeeded) {
                this.scrollbarVerticalHeight = Math.max((this.viewHeight / this.contentHeight) * this.viewHeight, this.scrollbarVertical.measureHeight);
                this.scrollbarVertical.arrange(this.layoutWidth - this.scrollbarVertical.measureWidth, 0, this.scrollbarVertical.measureWidth, this.scrollbarVerticalHeight);
                this.scrollbarVertical.show();
            }
            else {
                this.scrollbarVertical.hide();
                this.offsetY = 0;
            }
            if (this.scrollbarHorizontalNeeded) {
                this.scrollbarHorizontalWidth = Math.max((this.viewWidth / this.contentWidth) * this.viewWidth, this.scrollbarHorizontal.measureWidth);
                this.scrollbarHorizontal.arrange(0, this.layoutHeight - this.scrollbarHorizontal.measureHeight, this.scrollbarHorizontalWidth, this.scrollbarHorizontal.measureHeight);
                this.scrollbarHorizontal.show();
            }
            else {
                this.scrollbarHorizontal.hide();
                this.offsetX = 0;
            }
            this.scrollLock = true;
            if (this.scrollbarHorizontalNeeded) {
                var relOffsetX = this.offsetX / (this.contentWidth - this.viewWidth);
                if (relOffsetX > 1) {
                    relOffsetX = 1;
                    this.setOffset(relOffsetX, undefined);
                }
                this.scrollbarHorizontal.setPosition((this.viewWidth - this.scrollbarHorizontalWidth) * relOffsetX, undefined);
            }
            if (this.scrollbarVerticalNeeded) {
                var relOffsetY = this.offsetY / (this.contentHeight - this.viewHeight);
                if (relOffsetY > 1) {
                    relOffsetY = 1;
                    this.setOffset(undefined, relOffsetY);
                }
                this.scrollbarVertical.setPosition(undefined, (this.viewHeight - this.scrollbarVerticalHeight) * relOffsetY);
            }
            this.scrollLock = false;
        };
        VBoxScrollable.prototype.measureCore = function (width, height) {
            var size = { width: 0, height: 0 };
            this.scrollbarHorizontal.measure(width, height);
            var sSize = this.scrollbarVertical.measure(width, height);
            var contentSize = this.contentBox.measure(width, height);
            if (contentSize.width < width)
                size.width = contentSize.width;
            else
                size.width = width;
            if (contentSize.height < height)
                size.height = contentSize.height;
            else
                size.height = height;
            if (!this.scrollVertical)
                size.height = contentSize.height;
            if (!this.scrollHorizontal)
                size.width = contentSize.width;
            return size;
        };
        VBoxScrollable.prototype.arrangeCore = function (width, height) {
            this.viewWidth = width;
            this.viewHeight = height;
            this.contentBox.arrange(0, 0, this.viewWidth, this.viewHeight);
            this.contentWidth = this.contentBox.getContentWidth();
            this.contentHeight = this.contentBox.getContentHeight();
            this.updateOffset();
        };
        return VBoxScrollable;
    }(Ui.Container));
    Ui.VBoxScrollable = VBoxScrollable;
    var VBoxScrollableContent = (function (_super) {
        __extends(VBoxScrollableContent, _super);
        function VBoxScrollableContent() {
            var _this = _super.call(this) || this;
            _this.contentWidth = 0;
            _this.contentHeight = 0;
            _this.estimatedHeight = 36;
            _this.estimatedHeightNeeded = true;
            _this.beforeRemoveItems = [];
            _this.activeItemsPos = 0;
            _this.activeItemsY = 0;
            _this.activeItemsHeight = 0;
            _this.reloadNeeded = false;
            _this.scrolled = new Core.Events();
            _this.onLoaderChange = function () {
                _this.reloadNeeded = true;
                _this.invalidateMeasure();
            };
            _this.activeItems = [];
            _this.allowLeftMouse = false;
            _this.clipToBounds = true;
            _this.drawing.addEventListener('scroll', function () {
                _this.translateX -= _this.drawing.scrollLeft;
                _this.translateY -= _this.drawing.scrollTop;
                _this.drawing.scrollLeft = 0;
                _this.drawing.scrollTop = 0;
                _this.onContentTransform(false);
            });
            _this.allowTranslate = true;
            _this.allowRotate = false;
            _this.minScale = 1;
            _this.maxScale = 1;
            _this.inertia = true;
            _this.setTransformOrigin(0, 0);
            _this.removeChild(_this.contentBox);
            return _this;
        }
        Object.defineProperty(VBoxScrollableContent.prototype, "onscrolled", {
            set: function (value) { this.scrolled.connect(value); },
            enumerable: true,
            configurable: true
        });
        VBoxScrollableContent.prototype.setLoader = function (loader) {
            if (this.loader !== loader) {
                if (this.loader !== undefined)
                    this.loader.changed.disconnect(this.onLoaderChange);
                this.loader = loader;
                if (this.loader !== undefined)
                    this.loader.changed.connect(this.onLoaderChange);
                this.reload();
            }
        };
        VBoxScrollableContent.prototype.getActiveItems = function () {
            return this.activeItems;
        };
        Object.defineProperty(VBoxScrollableContent.prototype, "offsetX", {
            get: function () {
                return -this.translateX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VBoxScrollableContent.prototype, "offsetY", {
            get: function () {
                return Math.max(0, (((-this.translateY) / this.scale) - this.getMinY()) * this.scale);
            },
            enumerable: true,
            configurable: true
        });
        VBoxScrollableContent.prototype.setOffset = function (x, y) {
            var minY = this.getMinY();
            var translateY = -(((y / this.scale) + minY) * this.scale);
            this.setContentTransform(-x, translateY, undefined, undefined);
        };
        VBoxScrollableContent.prototype.getContentWidth = function () {
            return this.contentWidth;
        };
        VBoxScrollableContent.prototype.getContentHeight = function () {
            return this.getEstimatedContentHeight() * this.scale;
        };
        VBoxScrollableContent.prototype.getEstimatedContentHeight = function () {
            var itemsBefore = (this.activeItemsPos - this.loader.getMin());
            var itemsAfter = (this.loader.getMax() + 1 - (this.activeItemsPos + this.activeItems.length));
            var minY = this.activeItemsY - (itemsBefore * this.estimatedHeight);
            var maxY = this.activeItemsY + this.activeItemsHeight + (itemsAfter * this.estimatedHeight);
            return maxY - minY;
        };
        VBoxScrollableContent.prototype.getMinY = function () {
            var itemsBefore = (this.activeItemsPos - this.loader.getMin());
            var minY = this.activeItemsY - (itemsBefore * this.estimatedHeight);
            return minY;
        };
        VBoxScrollableContent.prototype.getMaxY = function () {
            var itemsAfter = (this.loader.getMax() + 1 - (this.activeItemsPos + this.activeItems.length));
            var maxY = this.activeItemsY + this.activeItemsHeight + (itemsAfter * this.estimatedHeight);
            return maxY;
        };
        VBoxScrollableContent.prototype.loadItems = function (w, h) {
            if (w === void 0) { w = this.layoutWidth; }
            if (h === void 0) { h = this.layoutHeight; }
            if (this.loader.getMax() - this.loader.getMin() < 0)
                return;
            if ((w === 0) || (h === 0))
                return;
            var matrix = this.matrix;
            var invMatrix = matrix.inverse();
            var p0 = (new Ui.Point(0, 0)).multiply(invMatrix);
            var p1 = (new Ui.Point(w, h)).multiply(invMatrix);
            var refPos;
            var refY;
            var stillActiveItems = [];
            var stillActiveHeight = 0;
            var y = this.activeItemsY;
            for (var i = 0; i < this.activeItems.length; i++) {
                var activeItem = this.activeItems[i];
                var itemHeight = activeItem.measureHeight;
                if (((y >= p0.y) && (y <= p1.y)) || ((y + itemHeight >= p0.y) && (y + itemHeight <= p1.y)) ||
                    ((y <= p0.y) && (y + itemHeight >= p1.y))) {
                    if (refPos === undefined) {
                        refPos = (i + this.activeItemsPos);
                        refY = y;
                    }
                    stillActiveItems.push(activeItem);
                    stillActiveHeight += activeItem.measureHeight;
                }
                else {
                    this.removeChild(activeItem);
                }
                y += itemHeight;
            }
            if (refPos === undefined) {
                refPos = Math.floor((-this.translateY) / (this.estimatedHeight * this.scale));
                refPos = Math.max(this.loader.getMin(), Math.min(this.loader.getMax(), refPos));
                refY = -this.translateY / this.scale;
                this.activeItemsPos = refPos;
                this.activeItems = [];
                var item = this.loader.getElementAt(refPos);
                if (item.parent !== this)
                    this.appendChild(item);
                var size = item.measure(w, h);
                item.arrange(0, 0, w, size.height);
                item.setTransformOrigin(0, 0);
                this.activeItems.push(item);
                this.activeItemsHeight = size.height;
            }
            else {
                this.activeItemsPos = refPos;
                this.activeItems = stillActiveItems;
                this.activeItemsHeight = stillActiveHeight;
            }
            while (refY > p0.y) {
                var pos = this.activeItemsPos - 1;
                if (pos < this.loader.getMin())
                    break;
                var item = this.loader.getElementAt(pos);
                this.prependChild(item);
                var size = item.measure(w, h);
                item.arrange(0, 0, w, size.height);
                item.setTransformOrigin(0, 0);
                this.activeItems.unshift(item);
                this.activeItemsHeight += size.height;
                refY -= size.height;
                this.activeItemsPos = pos;
            }
            while (refY + this.activeItemsHeight < p1.y) {
                var pos = this.activeItemsPos + this.activeItems.length;
                if (pos > this.loader.getMax())
                    break;
                var item = this.loader.getElementAt(pos);
                this.appendChild(item);
                var size = item.measure(w, h);
                item.arrange(0, 0, w, size.height);
                item.setTransformOrigin(0, 0);
                this.activeItems.push(item);
                this.activeItemsHeight += size.height;
            }
            this.activeItemsY = refY;
            this.activeItemsHeight = 0;
            for (var i = 0; i < this.activeItems.length; i++) {
                var item = this.activeItems[i];
                item.transform = matrix.clone().translate(0, this.activeItemsY + this.activeItemsHeight);
                this.activeItemsHeight += item.measureHeight;
            }
            if (this.estimatedHeightNeeded) {
                this.estimatedHeightNeeded = false;
                this.estimatedHeight = this.activeItemsHeight / this.activeItems.length;
            }
            for (var i = 0; i < this.beforeRemoveItems.length; i++) {
                if (this.activeItems.indexOf(this.beforeRemoveItems[i]) == -1)
                    this.removeChild(this.beforeRemoveItems[i]);
            }
            this.beforeRemoveItems = [];
        };
        VBoxScrollableContent.prototype.updateItems = function () {
            var w = this.layoutWidth;
            var h = this.layoutHeight;
        };
        VBoxScrollableContent.prototype.reload = function () {
            for (var i = 0; i < this.beforeRemoveItems.length; i++)
                this.removeChild(this.beforeRemoveItems[i]);
            this.beforeRemoveItems = this.activeItems;
            this.activeItems = [];
            this.activeItems = [];
            this.activeItemsPos = 0;
            this.activeItemsY = 0;
            this.activeItemsHeight = 0;
            this.estimatedHeightNeeded = true;
            this.onContentTransform(false);
        };
        VBoxScrollableContent.prototype.measureCore = function (width, height) {
            if (this.reloadNeeded) {
                this.reloadNeeded = false;
                this.reload();
            }
            this.loadItems(width, height);
            var y = 0;
            var minWidth = 0;
            for (var i = 0; i < this.activeItems.length; i++) {
                var item = this.activeItems[i];
                var size = item.measure(width, 0);
                minWidth = Math.max(minWidth, size.width);
                y += size.height;
            }
            this.activeItemsHeight = y;
            return { width: minWidth, height: this.getEstimatedContentHeight() };
        };
        VBoxScrollableContent.prototype.arrangeCore = function (width, height) {
            for (var i = 0; i < this.activeItems.length; i++) {
                var item = this.activeItems[i];
                width = Math.max(width, item.measureWidth);
            }
            for (var i = 0; i < this.activeItems.length; i++) {
                var activeItem = this.activeItems[i];
                activeItem.arrange(0, 0, width, activeItem.measureHeight);
            }
            this.loadItems();
        };
        VBoxScrollableContent.prototype.onContentTransform = function (testOnly) {
            var scale = this.scale;
            if (this.translateX > 0)
                this.translateX = 0;
            var itemsBefore = (this.activeItemsPos - this.loader.getMin());
            var itemsAfter = (this.loader.getMax() + 1 - (this.activeItemsPos + this.activeItems.length));
            var minY = this.activeItemsY - (itemsBefore * this.estimatedHeight);
            var maxY = this.activeItemsY + this.activeItemsHeight + (itemsAfter * this.estimatedHeight);
            minY *= scale;
            maxY *= scale;
            var viewWidth = this.layoutWidth;
            var viewHeight = this.layoutHeight;
            var contentWidth = 0;
            for (var _i = 0, _a = this.activeItems; _i < _a.length; _i++) {
                var item = _a[_i];
                contentWidth = Math.max(contentWidth, item.measureWidth);
            }
            this.contentWidth = Math.max(contentWidth, viewWidth) * scale;
            this.contentHeight = this.getEstimatedContentHeight() * scale;
            this.translateX = Math.max(this.translateX, -(this.contentWidth - viewWidth));
            if (this.translateY < -(maxY - viewHeight))
                this.translateY = -(maxY - viewHeight);
            if (this.translateY > -minY)
                this.translateY = -minY;
            this.loadItems();
            contentWidth = 0;
            for (var _b = 0, _c = this.activeItems; _b < _c.length; _b++) {
                var item = _c[_b];
                contentWidth = Math.max(contentWidth, item.measureWidth);
            }
            this.contentWidth = contentWidth * scale;
            this.contentHeight = this.getEstimatedContentHeight() * scale;
            if (testOnly !== true)
                this.scrolled.fire({ target: this, offsetX: this.offsetX, offsetY: this.offsetY });
        };
        return VBoxScrollableContent;
    }(Ui.Transformable));
    Ui.VBoxScrollableContent = VBoxScrollableContent;
    var VBoxScrollingArea = (function (_super) {
        __extends(VBoxScrollingArea, _super);
        function VBoxScrollingArea(init) {
            var _this = _super.call(this, init) || this;
            _this.horizontalScrollbar = new Ui.Scrollbar('horizontal');
            _this.scrollbarHorizontal = _this.horizontalScrollbar;
            _this.verticalScrollbar = new Ui.Scrollbar('vertical');
            _this.scrollbarVertical = _this.verticalScrollbar;
            return _this;
        }
        VBoxScrollingArea.prototype.onStyleChange = function () {
            var radius = this.getStyleProperty('radius');
            this.horizontalScrollbar.radius = radius;
            this.verticalScrollbar.radius = radius;
            var color = this.getStyleProperty('color');
            this.horizontalScrollbar.fill = color;
            this.verticalScrollbar.fill = color;
        };
        VBoxScrollingArea.style = {
            color: 'rgba(50,50,50,0.7)',
            radius: 0
        };
        return VBoxScrollingArea;
    }(VBoxScrollable));
    Ui.VBoxScrollingArea = VBoxScrollingArea;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var SelectionArea = (function (_super) {
        __extends(SelectionArea, _super);
        function SelectionArea(init) {
            var _this = _super.call(this, init) || this;
            _this.lastSelection = new Date('1970-01-01');
            _this.lock = false;
            if ('PointerEvent' in window)
                _this.drawing.addEventListener('pointerdown', function (e) { return _this.onPointerDown(e); }, { passive: false });
            else
                _this.drawing.addEventListener('mousedown', function (e) { return _this.onMouseDown(e); });
            _this.drawing.addEventListener('click', function (e) {
                if (Math.abs(Date.now() - _this.lastSelection.getTime()) < 60)
                    return;
                var selection = _this.getParentSelectionHandler();
                if (selection.elements.length > 0) {
                    selection.clear();
                    e.stopImmediatePropagation();
                }
            });
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            return _this;
        }
        SelectionArea.prototype.getParentSelectionHandler = function () {
            var parent = this.parent;
            while (parent !== undefined) {
                if ('getSelectionHandler' in parent)
                    return parent.getSelectionHandler();
                parent = parent.parent;
            }
            return undefined;
        };
        SelectionArea.prototype.findAreaElements = function (p1, p2) {
            var _this = this;
            var res = new Array();
            var p = new Ui.Point(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y));
            var s = { width: Math.abs(p1.x - p2.x), height: Math.abs(p1.y - p2.y) };
            var intersect = function (el) {
                var m = el.transformToElement(_this);
                var pe1 = (new Ui.Point(0, 0)).multiply(m);
                var pe2 = (new Ui.Point(el.layoutWidth, el.layoutHeight)).multiply(m);
                var pe = new Ui.Point(Math.min(pe1.x, pe2.x), Math.min(pe1.y, pe2.y));
                var se = { width: Math.abs(pe1.x - pe2.x), height: Math.abs(pe1.y - pe2.y) };
                var hoverlap = (p.x < pe.x + se.width) && (pe.x < p.x + s.width);
                var voverlap = (p.y < pe.y + se.height) && (pe.y < p.y + s.height);
                return hoverlap && voverlap;
            };
            var addSelectionable = function (el) {
                var watcher = Ui.SelectionableWatcher.getSelectionableWatcher(el);
                if (watcher) {
                    if (intersect(watcher.element))
                        res.push(watcher);
                }
                else if (el instanceof Ui.Container)
                    el.children.forEach(function (el2) { return addSelectionable(el2); });
            };
            addSelectionable(this);
            res = res.sort(function (a, b) {
                var m = a.element.transformToElement(_this);
                var c1 = (new Ui.Point(a.element.layoutWidth / 2, a.element.layoutHeight / 2)).multiply(m);
                var d1 = Math.sqrt(Math.pow((c1.x - p2.x), 2) + Math.pow((c1.y - p2.y), 2));
                m = b.element.transformToElement(_this);
                var c2 = (new Ui.Point(b.element.layoutWidth / 2, b.element.layoutHeight / 2)).multiply(m);
                var d2 = Math.sqrt(Math.pow((c2.x - p2.x), 2) + Math.pow((c2.y - p2.y), 2));
                return d2 - d1;
            });
            return res;
        };
        SelectionArea.prototype.findSelectionableWatchers = function () {
            var res = new Array();
            var addSelectionable = function (el) {
                var watcher = Ui.SelectionableWatcher.getSelectionableWatcher(el);
                if (watcher)
                    res.push(watcher);
                else if (el instanceof Ui.Container)
                    el.children.forEach(function (el2) { return addSelectionable(el2); });
            };
            addSelectionable(this);
            return res;
        };
        SelectionArea.prototype.findMatchSelectionable = function (element, filter) {
            var _this = this;
            var all = this.findSelectionableWatchers();
            if (all.length == 0)
                return undefined;
            var m = element.transformToElement(this);
            var p1 = (new Ui.Point(0, 0)).multiply(m);
            var p2 = (new Ui.Point(element.layoutWidth, element.layoutHeight)).multiply(m);
            var p = new Ui.Point(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y));
            var s = { width: Math.abs(p1.x - p2.x), height: Math.abs(p1.y - p2.y) };
            var c = new Ui.Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);
            var distance = 0;
            var found;
            all.forEach(function (w) {
                var el = w.element;
                var m = el.transformToElement(_this);
                var pe1 = (new Ui.Point(0, 0)).multiply(m);
                var pe2 = (new Ui.Point(el.layoutWidth, el.layoutHeight)).multiply(m);
                var pe = new Ui.Point(Math.min(pe1.x, pe2.x), Math.min(pe1.y, pe2.y));
                var se = { width: Math.abs(pe1.x - pe2.x), height: Math.abs(pe1.y - pe2.y) };
                var ce = new Ui.Point((pe1.x + pe2.x) / 2, (pe1.y + pe2.y) / 2);
                if (!filter(p, s, c, pe, se, ce))
                    return;
                var d = Math.sqrt(Math.pow((c.x - ce.x), 2) + Math.pow((c.y - ce.y), 2));
                if (!found || d < distance) {
                    distance = d;
                    found = w;
                }
            });
            return found;
        };
        SelectionArea.prototype.findRightSelectionable = function (element) {
            return this.findMatchSelectionable(element, function (p, s, c, pe, se, ce) {
                if (pe.x < p.x + s.width)
                    return false;
                var voverlap = (p.y < pe.y + se.height) && (pe.y < p.y + s.height);
                if (!voverlap)
                    return false;
                return true;
            });
        };
        SelectionArea.prototype.findLeftSelectionable = function (element) {
            return this.findMatchSelectionable(element, function (p, s, c, pe, se, ce) {
                if (pe.x + se.width > p.x)
                    return false;
                var voverlap = (p.y < pe.y + se.height) && (pe.y < p.y + s.height);
                if (!voverlap)
                    return false;
                return true;
            });
        };
        SelectionArea.prototype.findBottomSelectionable = function (element) {
            return this.findMatchSelectionable(element, function (p, s, c, pe, se, ce) {
                if (p.y + s.height > pe.y)
                    return false;
                var hoverlap = (p.x < pe.x + se.width) && (pe.x < p.x + s.width);
                if (!hoverlap)
                    return false;
                return true;
            });
        };
        SelectionArea.prototype.findTopSelectionable = function (element) {
            return this.findMatchSelectionable(element, function (p, s, c, pe, se, ce) {
                if (pe.y + se.height > p.y)
                    return false;
                var hoverlap = (p.x < pe.x + se.width) && (pe.x < p.x + s.width);
                if (!hoverlap)
                    return false;
                return true;
            });
        };
        SelectionArea.prototype.onPointerDown = function (event) {
            var _this = this;
            if (this._pointerId != undefined)
                return;
            if (this.isDisabled || this.lock || event.pointerType == 'touch')
                return;
            if (event.pointerType == 'mouse' && event.button != 0)
                return;
            this._pointerId = event.pointerId;
            var initialPosition = new Ui.Point(event.clientX, event.clientY);
            this.drawing.setPointerCapture(event.pointerId);
            this.startPos = this.pointFromWindow(initialPosition);
            var onPointerMove = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                e.stopImmediatePropagation();
                var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                if (_this.rectangle == undefined) {
                    _this.rectangle = new Ui.Rectangle({
                        width: 0, height: 0,
                        fill: 'rgba(0,0,0,0.1)'
                    });
                    _this.append(_this.rectangle);
                }
                else {
                    var movePos = current;
                    _this.rectangle.arrange(Math.min(movePos.x, _this.startPos.x), Math.min(movePos.y, _this.startPos.y), Math.abs(movePos.x - _this.startPos.x), Math.abs(movePos.y - _this.startPos.y));
                }
            };
            var onPointerCancel = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                _this.drawing.removeEventListener('pointermove', onPointerMove);
                _this.drawing.removeEventListener('pointercancel', onPointerCancel);
                _this.drawing.removeEventListener('pointerup', onPointerUp);
                _this.drawing.releasePointerCapture(event.pointerId);
                _this._pointerId = undefined;
                if (_this.rectangle != undefined) {
                    _this.remove(_this.rectangle);
                    _this.rectangle = undefined;
                }
                e.stopImmediatePropagation();
            };
            var onPointerUp = function (e) {
                if (e.pointerId != _this._pointerId)
                    return;
                _this.drawing.removeEventListener('pointermove', onPointerMove);
                _this.drawing.removeEventListener('pointercancel', onPointerCancel);
                _this.drawing.removeEventListener('pointerup', onPointerUp);
                _this.drawing.releasePointerCapture(event.pointerId);
                _this._pointerId = undefined;
                if (_this.rectangle != undefined) {
                    var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                    var res_1 = _this.findAreaElements(_this.startPos, current);
                    var selection = _this.getParentSelectionHandler();
                    _this.lastSelection = new Date();
                    if (e.shiftKey)
                        selection.append(res_1);
                    else if (e.ctrlKey) {
                        var watchers_2 = selection.watchers;
                        var res2_1 = new Array();
                        watchers_2.forEach(function (w) {
                            if (res_1.indexOf(w) == -1)
                                res2_1.push(w);
                        });
                        res_1.forEach(function (w) {
                            if (watchers_2.indexOf(w) == -1)
                                res2_1.push(w);
                        });
                        selection.watchers = res2_1;
                    }
                    else
                        selection.watchers = res_1;
                    _this.remove(_this.rectangle);
                    _this.rectangle = undefined;
                }
                e.stopImmediatePropagation();
            };
            this.drawing.addEventListener('pointermove', onPointerMove);
            this.drawing.addEventListener('pointercancel', onPointerCancel);
            this.drawing.addEventListener('pointerup', onPointerUp);
            event.stopImmediatePropagation();
        };
        SelectionArea.prototype.onMouseDown = function (event) {
            var _this = this;
            if (this._pointerId != undefined)
                return;
            if (this.isDisabled || this.lock || event.button != 0)
                return;
            var initialPosition = new Ui.Point(event.clientX, event.clientY);
            this.startPos = this.pointFromWindow(initialPosition);
            var onMouseMove = function (e) {
                e.stopImmediatePropagation();
                var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                if (_this.rectangle == undefined) {
                    _this.rectangle = new Ui.Rectangle({
                        width: 0, height: 0,
                        fill: 'rgba(0,0,0,0.1)'
                    });
                    _this.append(_this.rectangle);
                }
                else {
                    var movePos = current;
                    _this.rectangle.arrange(Math.min(movePos.x, _this.startPos.x), Math.min(movePos.y, _this.startPos.y), Math.abs(movePos.x - _this.startPos.x), Math.abs(movePos.y - _this.startPos.y));
                }
            };
            var onMouseUp = function (e) {
                window.removeEventListener('mousemove', onMouseMove, true);
                window.removeEventListener('mouseup', onMouseUp, true);
                if (_this.rectangle != undefined) {
                    var current = _this.pointFromWindow(new Ui.Point(e.clientX, e.clientY));
                    var res_2 = _this.findAreaElements(_this.startPos, current);
                    var selection = _this.getParentSelectionHandler();
                    _this.lastSelection = new Date();
                    if (e.shiftKey)
                        selection.append(res_2);
                    else if (e.ctrlKey) {
                        var watchers_3 = selection.watchers;
                        var res2_2 = new Array();
                        watchers_3.forEach(function (w) {
                            if (res_2.indexOf(w) == -1)
                                res2_2.push(w);
                        });
                        res_2.forEach(function (w) {
                            if (watchers_3.indexOf(w) == -1)
                                res2_2.push(w);
                        });
                        selection.watchers = res2_2;
                    }
                    else
                        selection.watchers = res_2;
                    _this.remove(_this.rectangle);
                    _this.rectangle = undefined;
                }
                e.stopImmediatePropagation();
            };
            window.addEventListener('mousemove', onMouseMove, true);
            window.addEventListener('mouseup', onMouseUp, true);
            event.stopImmediatePropagation();
        };
        SelectionArea.prototype.onKeyDown = function (event) {
            var _this = this;
            if ((event.which >= 37 && event.which <= 40) || event.which == 65 || event.which == 16 || event.which == 46) {
                var selection = this.getParentSelectionHandler();
                if (!selection)
                    return;
                var ours = new Array();
                ours = selection.watchers.filter(function (w) { return w.element.getIsChildOf(_this); });
                if (ours.length == 0)
                    return;
                var focusElement = void 0;
                var focusWatcher = ours.find(function (w) { return w.element.hasFocus; });
                if (!focusWatcher)
                    focusWatcher = ours[0];
                focusElement = focusWatcher.element;
                var found = void 0;
                if (event.which == 37) {
                    found = this.findLeftSelectionable(focusElement);
                }
                else if (event.which == 39) {
                    found = this.findRightSelectionable(focusElement);
                }
                else if (event.which == 38) {
                    found = this.findTopSelectionable(focusElement);
                }
                else if (event.which == 40) {
                    found = this.findBottomSelectionable(focusElement);
                }
                if (found) {
                    event.stopPropagation();
                    event.preventDefault();
                    var shiftStart = this.shiftStart || focusWatcher;
                    if (event.shiftKey)
                        selection.watchers = selection.findRangeElements(shiftStart, found);
                    else
                        selection.watchers = [found];
                    if (found.element.focusable)
                        found.element.focus();
                }
                if (event.which == 65 && event.ctrlKey)
                    selection.watchers = this.findSelectionableWatchers();
                if (event.which == 16)
                    this.shiftStart = focusWatcher;
                if (event.which == 46)
                    selection.executeDeleteAction();
            }
        };
        return SelectionArea;
    }(Ui.LBox));
    Ui.SelectionArea = SelectionArea;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Combo = (function (_super) {
        __extends(Combo, _super);
        function Combo(init) {
            var _this = _super.call(this, init) || this;
            _this._position = -1;
            _this._placeHolder = '';
            _this.allowNone = false;
            _this.changed = new Core.Events();
            _this.text = _this._placeHolder;
            _this.arrowbottom = new Ui.Icon({ icon: 'arrowbottom', width: 16, height: 16 });
            _this.marker = new Ui.VBox({
                verticalAlign: 'center', marginRight: 5,
                content: [_this.arrowbottom]
            });
            if (init) {
                if (init.placeHolder !== undefined)
                    _this.placeHolder = init.placeHolder;
                if (init.field !== undefined)
                    _this.field = init.field;
                if (init.iconField !== undefined)
                    _this.iconField = init.iconField;
                if (init.data !== undefined)
                    _this.data = init.data;
                if (init.position !== undefined)
                    _this.position = init.position;
                if (init.current !== undefined)
                    _this.current = init.current;
                if (init.search !== undefined)
                    _this.search = init.search;
                if (init.allowNone !== undefined)
                    _this.allowNone = init.allowNone;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
            }
            return _this;
        }
        Object.defineProperty(Combo.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Combo.prototype, "placeHolder", {
            set: function (placeHolder) {
                this._placeHolder = placeHolder;
                if (this._position === -1)
                    this.text = this._placeHolder;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Combo.prototype, "field", {
            set: function (field) {
                this._field = field;
                if (this._data !== undefined)
                    this.data = this._data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Combo.prototype, "iconField", {
            set: function (field) {
                this._iconField = field;
                if (this._data !== undefined)
                    this.data = this._data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Combo.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (data) {
                var oldPosition = this.position;
                this._data = data;
                this._position = -1;
                this._current = undefined;
                this.text = this._placeHolder;
                this.position = oldPosition;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Combo.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (position) {
                if (this.position == position)
                    return;
                if (position === -1) {
                    this._position = -1;
                    this._current = undefined;
                    this.text = this._placeHolder;
                    this.icon = undefined;
                    this.changed.fire({ target: this, value: this._current, position: this._position });
                }
                else if ((position >= 0) && (position < this._data.length)) {
                    this._current = this._data[position];
                    this._position = position;
                    this.text = this._current[this._field];
                    if (this._iconField)
                        this.icon = this._current[this._iconField];
                    this.changed.fire({ target: this, value: this._current, position: this._position });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Combo.prototype, "current", {
            get: function () {
                return this._current;
            },
            set: function (current) {
                if (current == undefined)
                    this.position = -1;
                var position = -1;
                for (var i = 0; i < this._data.length; i++) {
                    if (this._data[i] == current) {
                        position = i;
                        break;
                    }
                }
                if (position != -1)
                    this.position = position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Combo.prototype, "value", {
            get: function () {
                return this._current;
            },
            enumerable: true,
            configurable: true
        });
        Combo.prototype.onItemPress = function (popup, item, position) {
            this.position = position;
        };
        Combo.prototype.onPress = function () {
            var _this = this;
            var popup = new Ui.ComboPopup({
                field: this._field,
                iconField: this._iconField
            }).assign({
                data: this._data,
                search: this.search, allowNone: this.allowNone
            });
            if (this._position !== -1)
                popup.position = this._position;
            popup.item.connect(function (e) { return _this.onItemPress(e.target, e.item, e.position); });
            popup.openElement(this, 'bottom');
        };
        Combo.prototype.updateColors = function () {
            _super.prototype.updateColors.call(this);
            this.arrowbottom.fill = this.getForegroundColor();
        };
        Combo.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.arrowbottom.opacity = 0.1;
        };
        Combo.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.arrowbottom.opacity = 1;
        };
        Combo.style = {
            textTransform: 'none',
            textAlign: 'left'
        };
        return Combo;
    }(Ui.Button));
    Ui.Combo = Combo;
    var ComboPopup = (function (_super) {
        __extends(ComboPopup, _super);
        function ComboPopup(init) {
            var _this = _super.call(this, init) || this;
            _this.list = new Ui.VBox();
            _this._allowNone = false;
            _this.searchField = new Ui.TextField();
            _this.emptyField = new ComboItem();
            _this.item = new Core.Events();
            _this.autoClose = true;
            _this.content = new Ui.VBox().assign({
                content: [
                    _this.searchField.assign({
                        textHolder: 'Recherche', margin: 5,
                        onchanged: function (e) { return _this.onSearchChange(e.target, e.value); }
                    }),
                    _this.emptyField.assign({
                        text: '',
                        onpressed: function () {
                            _this.item.fire({ target: _this, item: _this.emptyField, position: -1 });
                            _this.close();
                        }
                    }),
                    _this.list
                ]
            });
            _this.searchField.hide(true);
            _this.emptyField.hide(true);
            if (init) {
                if (init.search !== undefined)
                    _this.search = init.search;
                if (init.allowNone !== undefined)
                    _this.allowNone = init.allowNone;
                if (init.field !== undefined)
                    _this.field = init.field;
                if (init.iconField !== undefined)
                    _this.iconField = init.iconField;
                if (init.data !== undefined)
                    _this.data = init.data;
                if (init.position !== undefined)
                    _this.position = init.position;
            }
            return _this;
        }
        ComboPopup.prototype.onSearchChange = function (field, value) {
            if (value == '' && this.allowNone)
                this.emptyField.show();
            else
                this.emptyField.hide(true);
            this.list.children.forEach(function (item) {
                if (value == '')
                    item.show();
                else {
                    var text = Core.Util.toNoDiacritics(item.text).toLocaleLowerCase();
                    var search = Core.Util.toNoDiacritics(value).toLowerCase().split(' ');
                    if (search.length == 0)
                        item.show();
                    else {
                        var match = true;
                        for (var i = 0; match && (i < search.length); i++) {
                            var word = search[i];
                            match = (text.indexOf(word) != -1);
                        }
                        if (match)
                            item.show();
                        else
                            item.hide(true);
                    }
                }
            });
        };
        Object.defineProperty(ComboPopup.prototype, "search", {
            set: function (value) {
                if (value)
                    this.searchField.show();
                else
                    this.searchField.hide(true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComboPopup.prototype, "allowNone", {
            get: function () {
                return this._allowNone;
            },
            set: function (value) {
                this._allowNone = value;
                if (value)
                    this.emptyField.show();
                else
                    this.emptyField.hide(true);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComboPopup.prototype, "field", {
            get: function () {
                return this._field;
            },
            set: function (field) {
                this._field = field;
                if (this._data !== undefined)
                    this.data = this._data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComboPopup.prototype, "iconField", {
            get: function () {
                return this._iconField;
            },
            set: function (field) {
                this._iconField = field;
                if (this._data !== undefined)
                    this.data = this._data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComboPopup.prototype, "data", {
            set: function (data) {
                var _this = this;
                this._data = data;
                if (this._field === undefined)
                    return;
                var _loop_4 = function (i) {
                    var item = new ComboItem({
                        text: data[i][this_4._field],
                        onpressed: function () { return _this.onItemPress(item); }
                    });
                    if (this_4._iconField)
                        item.icon = data[i][this_4._iconField];
                    this_4.list.append(item);
                };
                var this_4 = this;
                for (var i = 0; i < data.length; i++) {
                    _loop_4(i);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComboPopup.prototype, "position", {
            set: function (position) {
                this.list.children[position].isActive = true;
            },
            enumerable: true,
            configurable: true
        });
        ComboPopup.prototype.onItemPress = function (item) {
            var position = -1;
            for (var i = 0; i < this.list.children.length; i++) {
                if (this.list.children[i] == item) {
                    position = i;
                    break;
                }
            }
            this.item.fire({ target: this, item: item, position: position });
            this.close();
        };
        return ComboPopup;
    }(Ui.MenuPopup));
    Ui.ComboPopup = ComboPopup;
    var ComboItem = (function (_super) {
        __extends(ComboItem, _super);
        function ComboItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ComboItem.style = {
            borderWidth: 0,
            textTransform: 'none',
            textAlign: 'left'
        };
        return ComboItem;
    }(Ui.Button));
    Ui.ComboItem = ComboItem;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var ListViewHeader = (function (_super) {
        __extends(ListViewHeader, _super);
        function ListViewHeader(headerDef) {
            var _this = _super.call(this) || this;
            _this.headerDef = headerDef;
            _this.background = new Ui.Rectangle();
            _this.sortBox = new Ui.HBox();
            _this.sortOrderLabel = new Ui.Label();
            _this.sortArrow = new Ui.Icon();
            _this._sortInvert = false;
            if (headerDef.title instanceof Ui.Element)
                _this.ui = headerDef.title;
            else
                _this.ui = new Ui.Label().assign({ text: headerDef.title, margin: 4, fontWeight: 'bold' });
            _this.ui.resizable = true;
            _this.content = [
                _this.sortBox.assign({
                    isVisible: false,
                    horizontalAlign: 'right', verticalAlign: 'center',
                    content: [
                        _this.sortOrderLabel.assign({ fontSize: 10, fontWeight: 'bold', text: '1' }),
                        _this.sortArrow.assign({ icon: 'sortarrow', width: 16, height: 16 })
                    ]
                }),
                new Ui.VBox().assign({
                    content: [
                        new Ui.HBox().assign({
                            resizable: true,
                            content: [
                                _this.ui,
                                new ListViewColBar(_this, _this.headerDef)
                            ]
                        }),
                        _this.background.assign({ height: 4 })
                    ]
                })
            ];
            _this.downed.connect(function () { return _this.onListViewHeaderDown(); });
            _this.upped.connect(function () { return _this.onListViewHeaderUp(); });
            return _this;
        }
        Object.defineProperty(ListViewHeader.prototype, "sort", {
            get: function () {
                return { order: this._sortOrder, invert: this._sortInvert };
            },
            set: function (value) {
                this._sortOrder = value.order;
                this._sortInvert = value.invert;
                this.sortBox.isVisible = (value.order != undefined);
                if (value.order == undefined)
                    this.sortBox.hide();
                else {
                    this.sortBox.show();
                    this.sortOrderLabel.text = (value.order > 1) ? value.order.toFixed().toString() : '';
                    if (value.invert)
                        this.sortArrow.transform = Ui.Matrix.createRotate(180);
                    else
                        this.sortArrow.transform = undefined;
                }
            },
            enumerable: true,
            configurable: true
        });
        ListViewHeader.prototype.getColor = function () {
            return Ui.Color.create(this.getStyleProperty('color'));
        };
        ListViewHeader.prototype.getColorDown = function () {
            var yuv = Ui.Color.create(this.getStyleProperty('color')).getYuv();
            return Ui.Color.createFromYuv(yuv.y + 0.40, yuv.u, yuv.v);
        };
        ListViewHeader.prototype.onListViewHeaderDown = function () {
            this.background.fill = this.getColorDown();
        };
        ListViewHeader.prototype.onListViewHeaderUp = function () {
            this.background.fill = this.getColor();
        };
        ListViewHeader.prototype.onStyleChange = function () {
            this.background.fill = this.getStyleProperty('color');
        };
        ListViewHeader.style = {
            color: '#444444'
        };
        return ListViewHeader;
    }(Ui.Pressable));
    Ui.ListViewHeader = ListViewHeader;
    var ListViewHeaderSortPopup = (function (_super) {
        __extends(ListViewHeaderSortPopup, _super);
        function ListViewHeaderSortPopup(headers) {
            var _this = _super.call(this) || this;
            _this.headers = headers;
            _this._changedLock = false;
            _this.vbox = new Ui.VBox();
            _this.fields = new Array();
            _this.changed = new Core.Events();
            _this.content = _this.vbox.assign({
                padding: 10, spacing: 10,
                content: [
                    new Ui.Label().assign({ text: 'Ordre de tri', fontWeight: 'bold', horizontalAlign: 'left' })
                ]
            });
            var _loop_5 = function (i) {
                var sortBox = new Ui.HBox();
                if (i > 0)
                    sortBox.disable();
                var sortField = new Ui.Combo();
                var sortDir = new Ui.Combo();
                var field = { box: sortBox, field: sortField, dir: sortDir, position: i };
                sortBox.assign({
                    spacing: 10,
                    content: [
                        sortField.assign({
                            field: 'title', allowNone: true,
                            data: this_5.headers.filter(function (h) { return h.key != undefined; }),
                            onchanged: function () { return _this.onChanged(field); }
                        }),
                        sortDir.assign({
                            field: 'name',
                            data: [
                                { name: 'Asc', value: false },
                                { name: 'Desc', value: true }
                            ],
                            onchanged: function () { return _this.onChanged(field); }
                        })
                    ]
                });
                this_5.vbox.append(sortBox);
                this_5.fields.push(field);
            };
            var this_5 = this;
            for (var i = 0; i < 3; i++) {
                _loop_5(i);
            }
            return _this;
        }
        Object.defineProperty(ListViewHeaderSortPopup.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        ListViewHeaderSortPopup.prototype.onChanged = function (field) {
            if (this._changedLock)
                return;
            this._changedLock = true;
            try {
                this.updateFields();
            }
            catch (e) { }
            this._changedLock = false;
            this.changed.fire({ target: this, sortOrder: this.sortOrder });
        };
        ListViewHeaderSortPopup.prototype.updateFields = function () {
            var needClear = false;
            for (var i = 0; i < this.fields.length; i++) {
                if (needClear) {
                    this.fields[i].box.disable();
                    this.fields[i].dir.position = -1;
                    this.fields[i].field.position = -1;
                }
                else {
                    this.fields[i].box.enable();
                    if (this.fields[i].field.position == -1) {
                        this.fields[i].dir.position = -1;
                        needClear = true;
                    }
                    else {
                        if (this.fields[i].dir.position == -1)
                            this.fields[i].dir.position = 0;
                    }
                }
            }
        };
        Object.defineProperty(ListViewHeaderSortPopup.prototype, "sortOrder", {
            get: function () {
                var order = new Array();
                for (var i = 0; i < this.fields.length; i++) {
                    var item = this.fields[i];
                    if (item.field.value)
                        order.push({ key: item.field.value.key, invert: item.dir.value ? item.dir.value.value : false });
                }
                return order;
            },
            set: function (value) {
                this._changedLock = true;
                var _loop_6 = function (i) {
                    var field = this_6.fields[i];
                    field.field.position = field.field.data.findIndex(function (f) { return f.key == value[i].key; });
                    field.dir.position = value[i].invert ? 1 : 0;
                };
                var this_6 = this;
                for (var i = 0; i < value.length && i < this.fields.length; i++) {
                    _loop_6(i);
                }
                this.updateFields();
                this._changedLock = false;
            },
            enumerable: true,
            configurable: true
        });
        return ListViewHeaderSortPopup;
    }(Ui.Popup));
    var ListViewHeadersBar = (function (_super) {
        __extends(ListViewHeadersBar, _super);
        function ListViewHeadersBar(init) {
            var _this = _super.call(this) || this;
            _this.allowMultiSort = true;
            _this._sortOrder = new Array();
            _this.rowsHeight = 0;
            _this.headersHeight = 0;
            _this.sortchanged = new Core.Events();
            _this.headers = init.headers;
            _this.uis = [];
            var _loop_7 = function (i) {
                var headerDef = init.headers[i];
                var headerUi = new ListViewHeader(headerDef).assign({
                    width: headerDef.width,
                    onpressed: function (e) {
                        if (headerDef.key !== undefined)
                            _this.sortBy(headerDef.key, headerDef.key == _this.sortColKey ? !headerUi.sort.invert : false);
                        _this.sortchanged.fire({ target: _this, sortOrder: _this.sortOrder });
                    }
                });
                this_7.uis.push(headerUi);
                this_7.appendChild(headerUi);
            };
            var this_7 = this;
            for (var i = 0; i < init.headers.length; i++) {
                _loop_7(i);
            }
            new Ui.ContextMenuWatcher({
                element: _this,
                press: function (e) {
                    if (_this.allowMultiSort)
                        new ListViewHeaderSortPopup(_this.headers).assign({
                            sortOrder: _this._sortOrder,
                            onchanged: function (e) {
                                _this.sortOrder = e.sortOrder;
                                _this.sortchanged.fire({ target: _this, sortOrder: _this.sortOrder });
                            }
                        }).openAt(e.x, e.y);
                }
            });
            return _this;
        }
        Object.defineProperty(ListViewHeadersBar.prototype, "onsortchanged", {
            set: function (value) { this.sortchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewHeadersBar.prototype, "sortColKey", {
            get: function () {
                return (this._sortOrder.length > 0) ? this._sortOrder[0].key : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewHeadersBar.prototype, "sortInvert", {
            get: function () {
                return (this._sortOrder.length > 0) ? this._sortOrder[0].invert : false;
            },
            enumerable: true,
            configurable: true
        });
        ListViewHeadersBar.prototype.sortBy = function (key, invert) {
            this.sortOrder = [{ key: key, invert: invert }];
        };
        Object.defineProperty(ListViewHeadersBar.prototype, "sortOrder", {
            get: function () {
                return this._sortOrder;
            },
            set: function (value) {
                this._sortOrder = value;
                var _loop_8 = function (ui) {
                    pos = this_8._sortOrder.findIndex(function (s) { return s.key == ui.headerDef.key; });
                    if (pos == -1)
                        ui.sort = { order: undefined, invert: this_8.sortInvert };
                    else
                        ui.sort = { order: pos + 1, invert: this_8._sortOrder[pos].invert };
                };
                var this_8 = this, pos;
                for (var _i = 0, _a = this.uis; _i < _a.length; _i++) {
                    var ui = _a[_i];
                    _loop_8(ui);
                }
            },
            enumerable: true,
            configurable: true
        });
        ListViewHeadersBar.prototype.measureCore = function (width, height) {
            this.rowsHeight = 0;
            this.headersHeight = 0;
            var minHeight = 0;
            for (var col = 0; col < this.uis.length; col++) {
                var size = this.uis[col].measure(0, 0);
                if (size.height > minHeight)
                    minHeight = size.height;
            }
            this.headersHeight = minHeight;
            var minWidth = 0;
            for (var col = 0; col < this.uis.length; col++)
                minWidth += this.uis[col].measureWidth;
            return { width: minWidth, height: this.headersHeight };
        };
        ListViewHeadersBar.prototype.arrangeCore = function (width, height) {
            var x = 0;
            var colWidth;
            var col;
            var availableWidth = width;
            for (col = 0; col < this.headers.length; col++) {
                var ui = this.uis[col];
                colWidth = ui.measureWidth;
                if (col == this.headers.length - 1)
                    colWidth = Math.max(colWidth, availableWidth);
                ui.arrange(x, 0, colWidth, this.headersHeight);
                x += colWidth;
                availableWidth -= colWidth;
            }
        };
        return ListViewHeadersBar;
    }(Ui.Container));
    Ui.ListViewHeadersBar = ListViewHeadersBar;
    var ListViewRow = (function (_super) {
        __extends(ListViewRow, _super);
        function ListViewRow(init) {
            var _this = _super.call(this) || this;
            _this.selected = new Core.Events();
            _this.unselected = new Core.Events();
            _this.drawing.style.boxSizing = 'border-box';
            _this.drawing.style.borderBottomStyle = 'solid';
            _this.drawing.style.borderBottomWidth = '1px';
            _this.listView = init.listView;
            _this.headers = _this.listView.headers;
            _this._data = init.data;
            if (typeof (_this.listView.selectionActions) == 'function')
                _this.selectionActions = _this.listView.selectionActions(_this._data);
            else
                _this.selectionActions = _this.listView.selectionActions;
            if (init.height)
                _this.height = init.height;
            _this.cells = [];
            for (var col = 0; col < _this.headers.length; col++) {
                var key = _this.headers[col].key;
                var cell = void 0;
                if (_this.headers[col].ui !== undefined)
                    cell = new _this.headers[col].ui();
                else
                    cell = new ListViewCellString();
                cell.setKey(key);
                cell.setRow(_this);
                cell.setValue((key != undefined) ? _this.getValueFrom(key, _this._data) : _this._data);
                _this.cells.push(cell);
                _this.appendChild(cell);
            }
            _this.selectionWatcher = new Ui.SelectionableWatcher({
                element: _this,
                selectionActions: _this.selectionActions,
                onselected: function () {
                    _this.selected.fire({ target: _this });
                    _this.onStyleChange();
                    if (_this.listView)
                        _this.listView.onRowSelectionChanged();
                },
                onunselected: function () {
                    _this.unselected.fire({ target: _this });
                    _this.onStyleChange();
                    if (_this.listView)
                        _this.listView.onRowSelectionChanged();
                }
            });
            return _this;
        }
        Object.defineProperty(ListViewRow.prototype, "onselected", {
            set: function (value) { this.selected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewRow.prototype, "onunselected", {
            set: function (value) { this.unselected.connect(value); },
            enumerable: true,
            configurable: true
        });
        ListViewRow.prototype.getValueFrom = function (key, data) {
            if (key.indexOf('.') == -1 && key.indexOf('[') == -1)
                return data[key];
            var pathIndex = key.replace(/]/g, "").replace(/\[/g, ".");
            var result = pathIndex.split('.').reduce(function (o, i) { return o != undefined && i in o ? o[i] : undefined; }, data);
            return result != undefined ? result : data;
        };
        Object.defineProperty(ListViewRow.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (data) {
                this._data = data;
                for (var col = 0; col < this.headers.length; col++) {
                    var key = this.headers[col].key;
                    var cell = this.cells[col];
                    cell.setValue((key != undefined) ? this.getValueFrom(key, this._data) : this._data);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListViewRow.prototype, "isSelected", {
            get: function () {
                return this.selectionWatcher.isSelected;
            },
            set: function (value) {
                this.selectionWatcher.isSelected = value;
            },
            enumerable: true,
            configurable: true
        });
        ListViewRow.prototype.measureCore = function (width, height) {
            var minHeight = 0;
            var minWidth = 0;
            for (var col = 0; col < this.headers.length; col++) {
                var child = this.cells[col];
                var size = child.measure(0, 0);
                if (size.height > minHeight)
                    minHeight = size.height;
                minWidth += this.listView.headersBar.uis[col].measureWidth;
            }
            return { width: minWidth, height: minHeight };
        };
        ListViewRow.prototype.arrangeCore = function (width, height) {
            var x = 0;
            for (var col = 0; col < this.headers.length; col++) {
                var cell = this.cells[col];
                var colWidth = this.listView.headersBar.uis[col].layoutWidth;
                cell.arrange(x, 0, colWidth, height);
                x += colWidth;
            }
        };
        ListViewRow.prototype.onStyleChange = function () {
            if (this.selectionWatcher.isSelected)
                this.drawing.style.background = Ui.Color.create(this.getStyleProperty('selectColor')).getCssRgba();
            else
                this.drawing.style.background = Ui.Color.create(this.getStyleProperty('color')).getCssRgba();
            this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('sepColor')).getCssRgba();
        };
        ListViewRow.style = {
            sepColor: 'rgba(0,0,0,0.5)',
            color: new Ui.Color(0.99, 0.99, 0.99, 0.1),
            selectColor: new Ui.Color(0.88, 0.88, 0.88)
        };
        return ListViewRow;
    }(Ui.Container));
    Ui.ListViewRow = ListViewRow;
    var ListViewRowOdd = (function (_super) {
        __extends(ListViewRowOdd, _super);
        function ListViewRowOdd(init) {
            return _super.call(this, init) || this;
        }
        ListViewRowOdd.style = {
            color: new Ui.Color(0.5, 0.5, 0.5, 0.05),
            selectColor: 'rgba(8,160,229,0.6)'
        };
        return ListViewRowOdd;
    }(ListViewRow));
    Ui.ListViewRowOdd = ListViewRowOdd;
    var ListViewRowEven = (function (_super) {
        __extends(ListViewRowEven, _super);
        function ListViewRowEven(init) {
            return _super.call(this, init) || this;
        }
        ListViewRowEven.style = {
            color: new Ui.Color(0.5, 0.5, 0.5, 0.1),
            selectColor: 'rgba(8,160,229,0.8)'
        };
        return ListViewRowEven;
    }(ListViewRow));
    Ui.ListViewRowEven = ListViewRowEven;
    var ListViewScrollLoader = (function (_super) {
        __extends(ListViewScrollLoader, _super);
        function ListViewScrollLoader(listView, data) {
            var _this = _super.call(this) || this;
            _this.listView = listView;
            _this.data = data;
            return _this;
        }
        ListViewScrollLoader.prototype.signalChange = function () {
            this.changed.fire({ target: this });
        };
        ListViewScrollLoader.prototype.getMin = function () {
            return 0;
        };
        ListViewScrollLoader.prototype.getMax = function () {
            return this.data.length - 1;
        };
        ListViewScrollLoader.prototype.getElementAt = function (position) {
            return this.listView.getElementAt(position);
        };
        return ListViewScrollLoader;
    }(Ui.ScrollLoader));
    Ui.ListViewScrollLoader = ListViewScrollLoader;
    var ListView = (function (_super) {
        __extends(ListView, _super);
        function ListView(init) {
            var _this = _super.call(this, init) || this;
            _this.rowsHeight = 0;
            _this.headersHeight = 0;
            _this.headersVisible = true;
            _this._scrolled = true;
            _this._scrollVertical = true;
            _this._scrollHorizontal = true;
            _this._selectionChangedLock = false;
            _this.selectionchanged = new Core.Events();
            _this.selected = new Core.Events();
            _this.unselected = new Core.Events();
            _this.activated = new Core.Events();
            _this.sortchanged = new Core.Events();
            _this.datachanged = new Core.Events();
            if (init && init.headers != undefined)
                _this.headers = init.headers;
            else
                _this.headers = [{ width: 100, type: 'string', title: 'Title', key: 'default' }];
            _this.selectionActions = {
                edit: {
                    "default": true,
                    text: 'Edit', icon: 'edit', multiple: false,
                    callback: function (s) { return _this.onSelectionEdit(s); }
                }
            };
            _this.headersScroll = new Ui.ScrollingArea({
                scrollVertical: false, scrollHorizontal: true
            });
            _this.headersScroll.setScrollbarHorizontal(new Ui.Movable());
            _this.append(_this.headersScroll);
            _this.headersBar = new ListViewHeadersBar({ headers: _this.headers }).assign({
                onsortchanged: function (e) { return _this.sortOrder = e.sortOrder; }
            });
            _this.headersScroll.content = _this.headersBar;
            _this._data = [];
            _this.vboxScroll = new Ui.ScrollingArea();
            _this.append(_this.vboxScroll, true);
            _this.vbox = new Ui.VBox();
            _this.vboxScroll.content = _this.vbox;
            _this.vboxScroll.scrolled.connect(function (e) { return _this.headersScroll.setOffset(e.offsetX, undefined, true, true); });
            _this.headersScroll.scrolled.connect(function (e) { return _this.vboxScroll.setOffset(e.offsetX, undefined, true, true); });
            if (init) {
                if (init.scrolled !== undefined)
                    _this.scrolled = init.scrolled;
                if (init.scrollVertical !== undefined)
                    _this.scrollVertical = init.scrollVertical;
                if (init.scrollHorizontal !== undefined)
                    _this.scrollHorizontal = init.scrollHorizontal;
                if (init.selectionActions !== undefined)
                    _this.selectionActions = init.selectionActions;
                if (init.onselected)
                    _this.selected.connect(init.onselected);
                if (init.onunselected)
                    _this.unselected.connect(init.onunselected);
                if (init.onactivated)
                    _this.activated.connect(init.onactivated);
                if (init.onsortchanged)
                    _this.sortchanged.connect(init.onsortchanged);
                if (init.onselectionchanged)
                    _this.selectionchanged.connect(init.onselectionchanged);
                if (init.allowMultiSort != undefined)
                    _this.allowMultiSort = init.allowMultiSort;
            }
            return _this;
        }
        Object.defineProperty(ListView.prototype, "onselectionchanged", {
            set: function (value) { this.selectionchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "onselected", {
            set: function (value) { this.selected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "onunselected", {
            set: function (value) { this.unselected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "onactivated", {
            set: function (value) { this.activated.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "onsortchanged", {
            set: function (value) { this.sortchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "ondatachanged", {
            set: function (value) { this.datachanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "scrolled", {
            set: function (scrolled) {
                this.scrollVertical = scrolled;
                this.scrollHorizontal = scrolled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "scrollVertical", {
            set: function (value) {
                if (this._scrollVertical !== value) {
                    this._scrollVertical = value;
                    this.vboxScroll.scrollVertical = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "scrollHorizontal", {
            set: function (value) {
                if (this._scrollHorizontal !== value) {
                    this.headersScroll.scrollHorizontal = value;
                    this._scrollHorizontal = value;
                    this.vboxScroll.scrollHorizontal = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "allowMultiSort", {
            get: function () {
                return this.headersBar.allowMultiSort;
            },
            set: function (value) {
                this.headersBar.allowMultiSort = value;
            },
            enumerable: true,
            configurable: true
        });
        ListView.prototype.showHeaders = function () {
            if (!this.headersVisible) {
                this.headersVisible = true;
                this.headersBar.show();
            }
        };
        ListView.prototype.hideHeaders = function () {
            if (this.headersVisible) {
                this.headersVisible = false;
                this.headersBar.hide(true);
            }
        };
        ListView.prototype.getSelectionActions = function () {
            return this.selectionActions;
        };
        ListView.prototype.setSelectionActions = function (value) {
            this.selectionActions = value;
        };
        ListView.prototype.getElementAt = function (position) {
            if ((position % 2) === 0)
                return new ListViewRowOdd({
                    listView: this, data: this._data[position]
                });
            else
                return new ListViewRowEven({
                    listView: this, data: this._data[position]
                });
        };
        ListView.prototype.appendData = function (data) {
            this._data.push(data);
            this.sortData();
            this.vbox.append(this.getElementAt(this._data.length - 1));
            this.datachanged.fire({ target: this });
        };
        ListView.prototype.updateData = function () {
            this.sortData();
            this.vbox.clear();
            for (var i = 0; i < this._data.length; i++) {
                this.vbox.append(this.getElementAt(i));
            }
            this.datachanged.fire({ target: this });
        };
        ListView.prototype.removeData = function (data) {
            var row = this.findDataRow(data);
            if (row != -1)
                this.removeDataAt(row);
        };
        ListView.prototype.removeDataAt = function (position) {
            if (position < this._data.length) {
                this._data.splice(position, 1);
                this.vbox.clear();
                for (var i = 0; i < this._data.length; i++)
                    this.vbox.append(this.getElementAt(i));
            }
            this.datachanged.fire({ target: this });
        };
        ListView.prototype.clearData = function () {
            this._data = [];
            this.vbox.clear();
            this.datachanged.fire({ target: this });
        };
        Object.defineProperty(ListView.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (data) {
                this._data = data;
                this.sortData();
                this.vbox.clear();
                for (var i = 0; i < this._data.length; i++) {
                    this.vbox.append(this.getElementAt(i));
                }
                this.datachanged.fire({ target: this });
            },
            enumerable: true,
            configurable: true
        });
        ListView.prototype.sortData = function () {
            var sortOrder = this.sortOrder;
            if (this.sortFunc)
                return this.sortFunc(this._data, sortOrder);
            var cmp = function (a, b) {
                return (a < b) ? -1 : (a > b) ? 1 : 0;
            };
            this._data.sort(function (a, b) {
                var res = 0;
                for (var i = 0; i < sortOrder.length && res == 0; i++) {
                    res = cmp(a[sortOrder[i].key], b[sortOrder[i].key]);
                    res = sortOrder[i].invert ? -res : res;
                }
                return res;
            });
        };
        ListView.prototype.sortBy = function (key, invert) {
            this.sortOrder = [{ key: key, invert: invert }];
        };
        Object.defineProperty(ListView.prototype, "sortOrder", {
            get: function () {
                return this.headersBar.sortOrder;
            },
            set: function (value) {
                this.headersBar.sortOrder = value;
                this.sortData();
                this.vbox.clear();
                for (var i = 0; i < this._data.length; i++) {
                    this.vbox.append(this.getElementAt(i));
                }
                this.sortchanged.fire({ target: this, sortOrder: this.sortOrder });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "sortColKey", {
            get: function () {
                return this.headersBar.sortColKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "sortInvert", {
            get: function () {
                return this.headersBar.sortInvert;
            },
            enumerable: true,
            configurable: true
        });
        ListView.prototype.findDataRow = function (data) {
            for (var row = 0; row < this._data.length; row++) {
                if (data == this._data[row])
                    return row;
            }
            return -1;
        };
        ListView.prototype.onSelectionEdit = function (selection) {
            var data = selection.elements[0].data;
            this.activated.fire({ target: this, position: this.findDataRow(data), value: data });
        };
        ListView.prototype.onChildInvalidateArrange = function (child) {
            _super.prototype.onChildInvalidateArrange.call(this, child);
            if (child === this.headersScroll) {
                for (var _i = 0, _a = this.vbox.children; _i < _a.length; _i++) {
                    var item = _a[_i];
                    item.invalidateMeasure();
                }
            }
        };
        ListView.prototype.onRowSelectionChanged = function () {
            if (!this._selectionChangedLock)
                this.selectionchanged.fire({ target: this });
        };
        Object.defineProperty(ListView.prototype, "rows", {
            get: function () {
                return this.vbox.children;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListView.prototype, "selectedRows", {
            get: function () {
                return this.rows.filter(function (value) { return value.isSelected; });
            },
            enumerable: true,
            configurable: true
        });
        ListView.prototype.selectAll = function () {
            var rows = this.rows;
            if (rows.length > 0) {
                var selection = Ui.Selectionable.getParentSelectionHandler(this);
                if (selection) {
                    this._selectionChangedLock = true;
                    selection.elements = rows;
                    this._selectionChangedLock = false;
                    this.onRowSelectionChanged();
                }
            }
        };
        ListView.prototype.unselectAll = function () {
            var rows = this.selectedRows;
            if (rows.length > 0) {
                var selection = Ui.Selectionable.getParentSelectionHandler(this);
                if (selection) {
                    this._selectionChangedLock = true;
                    selection.elements = selection.elements.filter(function (v) { return !(v instanceof ListViewRow) || (rows.indexOf(v) == -1); });
                    this._selectionChangedLock = false;
                    this.onRowSelectionChanged();
                }
            }
        };
        return ListView;
    }(Ui.VBox));
    Ui.ListView = ListView;
    var ListViewCell = (function (_super) {
        __extends(ListViewCell, _super);
        function ListViewCell() {
            var _this = _super.call(this) || this;
            _this.clipToBounds = true;
            _this.ui = _this.generateUi();
            _this.append(_this.ui);
            return _this;
        }
        ListViewCell.prototype.getKey = function () {
            return this.key;
        };
        ListViewCell.prototype.setKey = function (key) {
            this.key = key;
        };
        ListViewCell.prototype.setRow = function (row) {
            this.row = row;
        };
        ListViewCell.prototype.getValue = function () {
            return this.value;
        };
        ListViewCell.prototype.setValue = function (value) {
            this.value = value;
            this.onValueChange(value);
        };
        ListViewCell.prototype.generateUi = function () {
            return new Ui.Label({ margin: 8, horizontalAlign: 'left' });
        };
        ListViewCell.prototype.onValueChange = function (value) {
            this.ui.text = value;
        };
        ListViewCell.prototype.onStyleChange = function () {
            var spacing = this.getStyleProperty('spacing');
            this.ui.margin = spacing + 2;
        };
        ListViewCell.style = {
            spacing: 5
        };
        return ListViewCell;
    }(Ui.LBox));
    Ui.ListViewCell = ListViewCell;
    var ListViewCellString = (function (_super) {
        __extends(ListViewCellString, _super);
        function ListViewCellString() {
            return _super.call(this) || this;
        }
        ListViewCellString.prototype.generateUi = function () {
            return new Ui.Label({ margin: 8, horizontalAlign: 'left' });
        };
        ListViewCellString.prototype.onValueChange = function (value) {
            this.ui.text = value === undefined ? '' : (value === null ? 'null' : value.toString());
        };
        return ListViewCellString;
    }(ListViewCell));
    Ui.ListViewCellString = ListViewCellString;
    var ListViewCellNumber = (function (_super) {
        __extends(ListViewCellNumber, _super);
        function ListViewCellNumber() {
            return _super.call(this) || this;
        }
        ListViewCellNumber.prototype.generateUi = function () {
            return new Ui.Label({ margin: 8, horizontalAlign: 'right' });
        };
        ListViewCellNumber.prototype.onValueChange = function (value) {
            this.ui.text = value.toString();
        };
        return ListViewCellNumber;
    }(ListViewCell));
    Ui.ListViewCellNumber = ListViewCellNumber;
    var ListViewColBar = (function (_super) {
        __extends(ListViewColBar, _super);
        function ListViewColBar(header, headerDef) {
            var _this = _super.call(this) || this;
            _this.gripR1 = new Ui.Rectangle();
            _this.gripR2 = new Ui.Rectangle();
            _this.header = header;
            _this.headerDef = headerDef;
            _this.grip = new Ui.Movable().assign({
                moveVertical: false,
                content: new Ui.LBox().assign({
                    content: [
                        _this.gripR1.assign({ width: 1, opacity: 0.2, fill: 'black', marginLeft: 7, marginRight: 8 + 2, marginTop: 6, marginBottom: 6 }),
                        _this.gripR2.assign({ width: 1, opacity: 0.2, fill: 'black', marginLeft: 12, marginRight: 3 + 2, marginTop: 6, marginBottom: 6 })
                    ]
                }),
                onmoved: function () { return _this.onMove(); },
                onupped: function () { return _this.onUp(); }
            });
            _this.appendChild(_this.grip);
            if (headerDef.resizable === false)
                _this.grip.hide(true);
            _this.separator = new Ui.Rectangle().assign({ width: 1, fill: 'black', opacity: 0.3 });
            _this.appendChild(_this.separator);
            return _this;
        }
        ListViewColBar.prototype.setHeader = function (header) {
            this.header = header;
        };
        ListViewColBar.prototype.onMove = function () {
            this.separator.transform = Ui.Matrix.createTranslate(this.grip.positionX, 0);
        };
        ListViewColBar.prototype.onUp = function () {
            var delta = this.grip.positionX;
            this.header.width = Math.max(this.measureWidth, this.header.measureWidth + delta);
            this.invalidateArrange();
        };
        ListViewColBar.prototype.measureCore = function (width, height) {
            var size = this.grip.measure(width, height);
            this.separator.measure(width, height);
            return { width: Math.max(size.width, 1), height: 0 };
        };
        ListViewColBar.prototype.arrangeCore = function (width, height) {
            this.grip.setPosition(0, 0);
            this.separator.transform = Ui.Matrix.createTranslate(0, 0);
            this.grip.arrange(0, 0, width, height);
            this.separator.arrange(width - 1, 0, 1, height);
        };
        ListViewColBar.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            if (this.headerDef.resizable !== false)
                this.grip.hide();
        };
        ListViewColBar.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            if (this.headerDef.resizable !== false)
                this.grip.show();
        };
        ListViewColBar.prototype.onStyleChange = function () {
            _super.prototype.onStyleChange.call(this);
            var color = this.getStyleProperty('color');
            this.gripR1.fill = color;
            this.gripR2.fill = color;
            this.separator.fill = color;
        };
        return ListViewColBar;
    }(Ui.Container));
    Ui.ListViewColBar = ListViewColBar;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Uploadable = (function (_super) {
        __extends(Uploadable, _super);
        function Uploadable(init) {
            var _this = _super.call(this, init) || this;
            _this.file = new Core.Events();
            _this.drawing.style.cursor = 'pointer';
            _this.focusable = true;
            _this.role = 'button';
            _this.input = new UploadableFileWrapper();
            _this.append(_this.input);
            _this.input.file.connect(function (e) { return _this.onFile(e.target, e.file); });
            return _this;
        }
        Object.defineProperty(Uploadable.prototype, "onfile", {
            set: function (value) { this.file.connect(value); },
            enumerable: true,
            configurable: true
        });
        Uploadable.prototype.setDirectoryMode = function (active) {
            this.input.setDirectoryMode(active);
        };
        Object.defineProperty(Uploadable.prototype, "directoryMode", {
            set: function (active) {
                this.input.directoryMode = active;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Uploadable.prototype, "multiple", {
            set: function (active) {
                this.input.multiple = active;
            },
            enumerable: true,
            configurable: true
        });
        Uploadable.prototype.onFile = function (fileWrapper, file) {
            this.file.fire({ target: this, file: file });
        };
        Uploadable.prototype.onPress = function () {
            if (this.input instanceof UploadableFileWrapper)
                this.input.select();
        };
        Object.defineProperty(Uploadable.prototype, "content", {
            set: function (content) {
                if (this._content !== content) {
                    if (this._content !== undefined)
                        this.remove(this._content);
                    if (content !== undefined) {
                        if (this.input instanceof Ui.UploadableWrapper)
                            this.prepend(content);
                        else
                            this.append(content);
                    }
                    this._content = content;
                }
            },
            enumerable: true,
            configurable: true
        });
        return Uploadable;
    }(Ui.Pressable));
    Ui.Uploadable = Uploadable;
    var UploadableFileWrapper = (function (_super) {
        __extends(UploadableFileWrapper, _super);
        function UploadableFileWrapper() {
            var _this = _super.call(this) || this;
            _this._directoryMode = false;
            _this._multiple = false;
            _this.file = new Core.Events();
            _this.onChange = function (event) {
                event.preventDefault();
                event.stopPropagation();
                for (var i = 0; i < _this.inputDrawing.files.length; i++)
                    _this.file.fire({ target: _this, file: _this.inputDrawing.files[i] });
            };
            _this.opacity = 0;
            _this.clipToBounds = true;
            return _this;
        }
        UploadableFileWrapper.prototype.select = function () {
            this.inputDrawing.click();
        };
        Object.defineProperty(UploadableFileWrapper.prototype, "multiple", {
            set: function (active) {
                this._multiple = active;
                if (this.inputDrawing !== undefined) {
                    if (active)
                        this.inputDrawing.setAttribute('multiple', '');
                    else
                        this.inputDrawing.removeAttribute('multiple');
                }
            },
            enumerable: true,
            configurable: true
        });
        UploadableFileWrapper.prototype.setDirectoryMode = function (active) {
            this.directoryMode = active;
        };
        Object.defineProperty(UploadableFileWrapper.prototype, "directoryMode", {
            set: function (active) {
                this._directoryMode = active;
                if (this.inputDrawing !== undefined) {
                    if (this._directoryMode)
                        this.inputDrawing.setAttribute('webkitdirectory', '');
                    else
                        this.inputDrawing.removeAttribute('webkitdirectory');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UploadableFileWrapper.prototype, "accept", {
            set: function (value) {
                this._accept = value;
                if (this.inputDrawing !== undefined) {
                    if (this._accept)
                        this.inputDrawing.setAttribute('accept', value);
                    else
                        this.inputDrawing.removeAttribute('accept');
                }
            },
            enumerable: true,
            configurable: true
        });
        UploadableFileWrapper.prototype.createInput = function () {
            this.formDrawing = document.createElement('form');
            this.formDrawing.addEventListener('click', function (e) { return e.stopPropagation(); });
            this.formDrawing.addEventListener('touchstart', function (e) { return e.stopPropagation(); });
            this.formDrawing.method = 'POST';
            this.formDrawing.enctype = 'multipart/form-data';
            this.formDrawing.encoding = 'multipart/form-data';
            this.formDrawing.style.position = 'absolute';
            this.inputDrawing = document.createElement('input');
            this.inputDrawing.type = 'file';
            this.inputDrawing.setAttribute('name', 'file');
            if (this._directoryMode)
                this.inputDrawing.setAttribute('webkitdirectory', '');
            if (this._multiple)
                this.inputDrawing.setAttribute('multiple', '');
            if (this._accept)
                this.inputDrawing.setAttribute('accept', this._accept);
            this.inputDrawing.style.position = 'absolute';
            this.inputDrawing.tabIndex = -1;
            this.inputDrawing.addEventListener('change', this.onChange);
            this.formDrawing.appendChild(this.inputDrawing);
            if (Core.Navigator.supportFileAPI) {
                while (this.drawing.childNodes.length > 0)
                    this.drawing.removeChild(this.drawing.childNodes[0]);
                this.drawing.appendChild(this.formDrawing);
                this.arrange(this.layoutX, this.layoutY, this.layoutWidth, this.layoutHeight);
            }
            else {
                this.iframeDrawing = document.createElement('iframe');
                this.iframeDrawing.style.position = 'absolute';
                this.iframeDrawing.style.top = '0px';
                this.iframeDrawing.style.left = '0px';
                this.iframeDrawing.style.width = '0px';
                this.iframeDrawing.style.height = '0px';
                this.iframeDrawing.style.clip = 'rect(0px 0px 0px 0px)';
                document.body.appendChild(this.iframeDrawing);
                this.iframeDrawing.contentWindow.document.write("<!DOCTYPE html><html><body></body></html>");
                this.iframeDrawing.contentWindow.document.body.appendChild(this.formDrawing);
            }
        };
        UploadableFileWrapper.prototype.onLoad = function () {
            _super.prototype.onLoad.call(this);
            this.createInput();
        };
        UploadableFileWrapper.prototype.onUnload = function () {
            this.inputDrawing.removeEventListener('change', this.onChange);
            if (this.iframeDrawing !== undefined)
                document.body.removeChild(this.iframeDrawing);
            _super.prototype.onUnload.call(this);
        };
        UploadableFileWrapper.prototype.arrangeCore = function (w, h) {
            _super.prototype.arrangeCore.call(this, w, h);
            if (this.formDrawing !== undefined) {
                this.formDrawing.style.top = '0px';
                this.formDrawing.style.left = '0px';
                this.formDrawing.style.width = Math.round(w) + 'px';
                this.formDrawing.style.height = Math.round(h) + 'px';
            }
            if (this.inputDrawing !== undefined) {
                this.inputDrawing.style.top = '0px';
                this.inputDrawing.style.left = '0px';
                this.inputDrawing.style.width = Math.round(w) + 'px';
                this.inputDrawing.style.height = Math.round(h) + 'px';
            }
        };
        return UploadableFileWrapper;
    }(Ui.Element));
    Ui.UploadableFileWrapper = UploadableFileWrapper;
    var UploadableWrapper = (function (_super) {
        __extends(UploadableWrapper, _super);
        function UploadableWrapper() {
            var _this = _super.call(this) || this;
            _this.directoryMode = false;
            _this.file = new Core.Events();
            _this.clipToBounds = true;
            _this.opacity = 0;
            return _this;
        }
        UploadableWrapper.prototype.setDirectoryMode = function (active) {
        };
        UploadableWrapper.prototype.createInput = function () {
            var _this = this;
            this.formDrawing = document.createElement('form');
            this.formDrawing.method = 'POST';
            this.formDrawing.enctype = 'multipart/form-data';
            this.formDrawing.encoding = 'multipart/form-data';
            this.formDrawing.style.display = 'block';
            this.formDrawing.style.position = 'absolute';
            this.formDrawing.style.left = '0px';
            this.formDrawing.style.top = '0px';
            this.formDrawing.style.width = this.layoutWidth + 'px';
            this.formDrawing.style.height = this.layoutHeight + 'px';
            this.inputDrawing = document.createElement('input');
            this.inputDrawing.type = 'file';
            this.inputDrawing.name = 'file';
            this.inputDrawing.tabIndex = -1;
            this.inputDrawing.style.fontSize = '200px';
            this.inputDrawing.style.display = 'block';
            this.inputDrawing.style.cursor = 'pointer';
            this.inputDrawing.style.position = 'absolute';
            this.inputDrawing.style.left = '0px';
            this.inputDrawing.style.top = '0px';
            this.inputDrawing.style.width = this.layoutWidth + 'px';
            this.inputDrawing.style.height = this.layoutHeight + 'px';
            this.formDrawing.appendChild(this.inputDrawing);
            this.inputDrawing.addEventListener('change', function (e) { return _this.onChange(e); });
            if (Core.Navigator.isWebkit)
                this.inputDrawing.style.webkitUserSelect = 'none';
            this.inputDrawing.addEventListener('touchstart', function (event) {
                event.dontPreventDefault = true;
            });
            this.inputDrawing.addEventListener('touchend', function (event) {
                event.dontPreventDefault = true;
            });
            return this.formDrawing;
        };
        UploadableWrapper.prototype.onChange = function (event) {
            for (var i = 0; i < this.inputDrawing.files.length; i++)
                this.file.fire({ target: this, file: this.inputDrawing.files[i] });
        };
        UploadableWrapper.prototype.renderDrawing = function () {
            var drawing = _super.prototype.renderDrawing.call(this);
            drawing.appendChild(this.createInput());
        };
        UploadableWrapper.prototype.arrangeCore = function (width, height) {
            this.formDrawing.style.width = Math.round(width) + 'px';
            this.formDrawing.style.height = Math.round(height) + 'px';
            this.inputDrawing.style.width = Math.round(width) + 'px';
            this.inputDrawing.style.height = Math.round(height) + 'px';
        };
        return UploadableWrapper;
    }(Ui.Element));
    Ui.UploadableWrapper = UploadableWrapper;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var UploadButton = (function (_super) {
        __extends(UploadButton, _super);
        function UploadButton(init) {
            var _this = _super.call(this, init) || this;
            _this.filechanged = new Core.Events();
            _this.input = new Ui.UploadableFileWrapper();
            _this.prepend(_this.input);
            _this.input.file.connect(function (e) { return _this.onFile(e.target, e.file); });
            _this.pressed.connect(function () { return _this.onUploadButtonPress(); });
            new Ui.DropableWatcher({
                element: _this,
                ondroppedfile: function (w, f) { _this.onFile(undefined, f); return true; },
                types: [{ type: 'files', effects: 'copy' }]
            });
            if (init) {
                if (init.directoryMode !== undefined)
                    _this.directoryMode = init.directoryMode;
                if (init.onfilechanged)
                    _this.filechanged.connect(init.onfilechanged);
            }
            return _this;
        }
        Object.defineProperty(UploadButton.prototype, "onfilechanged", {
            set: function (value) { this.filechanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UploadButton.prototype, "directoryMode", {
            set: function (active) {
                this.input.setDirectoryMode(active);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UploadButton.prototype, "multiple", {
            set: function (active) {
                this.input.multiple = active;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UploadButton.prototype, "accept", {
            set: function (value) {
                this.input.accept = value;
            },
            enumerable: true,
            configurable: true
        });
        UploadButton.prototype.onUploadButtonPress = function () {
            this.input.select();
        };
        UploadButton.prototype.onFile = function (wrapper, file) {
            this.filechanged.fire({ target: this, file: file });
        };
        return UploadButton;
    }(Ui.Button));
    Ui.UploadButton = UploadButton;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Transition = (function (_super) {
        __extends(Transition, _super);
        function Transition() {
            return _super.call(this) || this;
        }
        Transition.prototype.run = function (current, next, progress) {
            throw ('transition classes MUST override run method');
        };
        Transition.register = function (transitionName, classType) {
            this.transitions[transitionName] = classType;
        };
        Transition.parse = function (transition) {
            return new this.transitions[transition]();
        };
        Transition.create = function (transition) {
            if (transition instanceof Transition)
                return transition;
            return new this.transitions[transition]();
        };
        Transition.transitions = {};
        return Transition;
    }(Core.Object));
    Ui.Transition = Transition;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Fade = (function (_super) {
        __extends(Fade, _super);
        function Fade() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Fade.prototype.run = function (current, next, progress) {
            if (current !== undefined) {
                if (progress == 1) {
                    current.hide();
                    current.opacity = 1;
                }
                else
                    current.opacity = Math.min(1, Math.max(0, 1 - progress * 3));
            }
            if (next !== undefined)
                next.opacity = progress;
        };
        return Fade;
    }(Ui.Transition));
    Ui.Fade = Fade;
})(Ui || (Ui = {}));
Ui.Transition.register('fade', Ui.Fade);
var Ui;
(function (Ui) {
    var Slide = (function (_super) {
        __extends(Slide, _super);
        function Slide(init) {
            var _this = _super.call(this) || this;
            _this._direction = 'right';
            if (init) {
                if (init.direction !== undefined)
                    _this.direction = init.direction;
            }
            return _this;
        }
        Object.defineProperty(Slide.prototype, "direction", {
            set: function (direction) {
                this._direction = direction;
            },
            enumerable: true,
            configurable: true
        });
        Slide.prototype.run = function (current, next, progress) {
            if (current !== undefined) {
                if (progress === 1) {
                    current.hide();
                    current.setTransformOrigin(0, 0);
                    current.transform = undefined;
                }
                else {
                    current.setTransformOrigin(0, 0);
                    if (this._direction == 'right')
                        current.transform = Ui.Matrix.createTranslate(-current.layoutWidth * progress, 0);
                    else if (this._direction == 'left')
                        current.transform = Ui.Matrix.createTranslate(current.layoutWidth * progress, 0);
                    else if (this._direction == 'top')
                        current.transform = Ui.Matrix.createTranslate(0, current.layoutHeight * progress);
                    else
                        current.transform = Ui.Matrix.createTranslate(0, -current.layoutHeight * progress);
                }
            }
            if (next !== undefined) {
                if (progress === 1) {
                    next.setTransformOrigin(0, 0);
                    next.transform = undefined;
                }
                else {
                    next.setTransformOrigin(0, 0);
                    if (this._direction == 'right')
                        next.transform = Ui.Matrix.createTranslate(next.layoutWidth * (1 - progress), 0);
                    else if (this._direction == 'left')
                        next.transform = Ui.Matrix.createTranslate(-next.layoutWidth * (1 - progress), 0);
                    else if (this._direction == 'top')
                        next.transform = Ui.Matrix.createTranslate(0, -next.layoutHeight * (1 - progress));
                    else
                        next.transform = Ui.Matrix.createTranslate(0, next.layoutHeight * (1 - progress));
                }
            }
        };
        return Slide;
    }(Ui.Transition));
    Ui.Slide = Slide;
})(Ui || (Ui = {}));
Ui.Transition.register('slide', Ui.Slide);
var Ui;
(function (Ui) {
    var Flip = (function (_super) {
        __extends(Flip, _super);
        function Flip(init) {
            var _this = _super.call(this) || this;
            _this.orientation = 'horizontal';
            if (init) {
                if (init.orientation !== undefined)
                    _this.orientation = init.orientation;
            }
            return _this;
        }
        Flip.prototype.run = function (current, next, progress) {
            if (progress < 0.5) {
                if (current !== undefined) {
                    current.setTransformOrigin(0.5, 0.5);
                    if (this.orientation == 'horizontal')
                        current.transform = Ui.Matrix.createScale((1 - progress * 2), 1);
                    else
                        current.transform = Ui.Matrix.createScale(1, (1 - progress * 2));
                }
                if (next !== undefined)
                    next.hide();
            }
            else {
                if (current !== undefined) {
                    current.hide();
                    current.setTransformOrigin(0, 0);
                    current.transform = undefined;
                }
                if (next !== undefined) {
                    if (progress == 1) {
                        next.show();
                        next.setTransformOrigin(0, 0);
                        next.transform = undefined;
                    }
                    else {
                        next.show();
                        next.setTransformOrigin(0.5, 0.5);
                        if (this.orientation == 'horizontal')
                            next.transform = Ui.Matrix.createScale((progress - 0.5) * 2, 1);
                        else
                            next.transform = Ui.Matrix.createScale(1, (progress - 0.5) * 2);
                    }
                }
            }
        };
        return Flip;
    }(Ui.Transition));
    Ui.Flip = Flip;
})(Ui || (Ui = {}));
Ui.Transition.register('flip', Ui.Flip);
var Ui;
(function (Ui) {
    var TransitionBox = (function (_super) {
        __extends(TransitionBox, _super);
        function TransitionBox(init) {
            var _this = _super.call(this, init) || this;
            _this._duration = 0.5;
            _this._position = -1;
            _this.replaceMode = false;
            _this.changed = new Core.Events();
            _this.onTransitionComplete = function () {
                var i;
                _this.transitionClock = undefined;
                var current = _this.next;
                if (_this._current !== undefined)
                    _this._current.hide();
                _this.next = undefined;
                if (_this.replaceMode) {
                    _this.replaceMode = false;
                    var removeList = [];
                    for (i = 0; i < _this.children.length; i++) {
                        var item = _this.children[i];
                        if (item !== current)
                            removeList.push(item.firstChild);
                    }
                    for (i = 0; i < removeList.length; i++)
                        _this.remove(removeList[i]);
                }
                _this.changed.fire({ target: _this, position: _this._position });
            };
            _this.clipToBounds = true;
            _this.transition = 'fade';
            if (init) {
                if (init.duration !== undefined)
                    _this.duration = init.duration;
                if (init.ease !== undefined)
                    _this.ease = init.ease;
                if (init.transition !== undefined)
                    _this.transition = init.transition;
                if (init.position !== undefined)
                    _this.position = init.position;
                if (init.current !== undefined)
                    _this.current = init.current;
            }
            return _this;
        }
        Object.defineProperty(TransitionBox.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransitionBox.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (position) {
                this.setCurrentAt(position);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransitionBox.prototype, "duration", {
            set: function (duration) {
                this._duration = duration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransitionBox.prototype, "ease", {
            set: function (ease) {
                this._ease = Anim.EasingFunction.create(ease);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransitionBox.prototype, "transition", {
            set: function (transition) {
                this._transition = Ui.Transition.create(transition);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TransitionBox.prototype, "current", {
            get: function () {
                if (this._position == -1)
                    return undefined;
                else
                    return this.children[this._position].children[0];
            },
            set: function (child) {
                var pos = this.getChildPosition(child);
                if (pos != -1)
                    this.setCurrentAt(pos);
            },
            enumerable: true,
            configurable: true
        });
        TransitionBox.prototype.setCurrentAt = function (position) {
            var _this = this;
            if (this._position != position) {
                if (this.next !== undefined) {
                    if (this._current !== undefined) {
                        this._current.hide();
                        this._current = this.next;
                        this._current.show();
                        this.next = undefined;
                    }
                }
                if (this.transitionClock !== undefined) {
                    this.transitionClock.completed.disconnect(this.onTransitionComplete);
                    this.transitionClock.stop();
                    this.transitionClock = undefined;
                }
                if (this._position != -1)
                    this._current = this.children[this._position];
                else
                    this._current = undefined;
                this.next = this.children[position];
                this.next.show();
                this._transition.run(this._current, this.next, 0);
                this.transitionClock = new Anim.Clock({ duration: this._duration, ease: this._ease });
                this.transitionClock.timeupdate.connect(function (e) { return _this.onTransitionTick(e.target, e.progress); });
                this.transitionClock.completed.connect(this.onTransitionComplete);
                this.transitionClock.begin();
                this._position = position;
            }
        };
        TransitionBox.prototype.replaceContent = function (content) {
            this.replaceMode = true;
            this.append(content);
            this.current = content;
        };
        TransitionBox.prototype.onLoad = function () {
            _super.prototype.onLoad.call(this);
            this.onTransitionBoxLoad();
        };
        TransitionBox.prototype.onTransitionBoxLoad = function () {
        };
        TransitionBox.prototype.onUnload = function () {
            _super.prototype.onUnload.call(this);
            this.onTransitionBoxUnload();
        };
        TransitionBox.prototype.onTransitionBoxUnload = function () {
            if (this.transitionClock !== undefined) {
                this.transitionClock.stop();
                this.transitionClock = undefined;
            }
        };
        TransitionBox.prototype.onTransitionTick = function (clock, progress) {
            this.progress = progress;
            this._transition.run(this._current, this.next, progress);
        };
        TransitionBox.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, width, height);
            if (this.transitionClock !== undefined)
                this._transition.run(this._current, this.next, this.transitionClock.progress);
        };
        TransitionBox.prototype.append = function (child) {
            if (this.getChildPosition(child) != -1)
                return;
            var content = new TransitionBoxContent();
            content.append(child);
            content.hide();
            _super.prototype.append.call(this, content);
        };
        TransitionBox.prototype.prepend = function (child) {
            if (this.getChildPosition(child) != -1)
                return;
            if (this._position !== -1)
                this._position++;
            var content = new TransitionBoxContent();
            content.append(child);
            content.hide();
            _super.prototype.prepend.call(this, child);
        };
        TransitionBox.prototype.remove = function (child) {
            for (var i = 0; i < this.children.length; i++) {
                if (this.children[i].firstChild == child) {
                    if (i < this._position)
                        this._position--;
                    else if (i == this._position)
                        this._position = -1;
                    this.children[i].remove(child);
                    _super.prototype.remove.call(this, this.children[i]);
                    break;
                }
            }
        };
        TransitionBox.prototype.getChildPosition = function (child) {
            for (var i = 0; i < this.children.length; i++) {
                if (this.children[i].children[0] == child)
                    return i;
            }
            return -1;
        };
        return TransitionBox;
    }(Ui.LBox));
    Ui.TransitionBox = TransitionBox;
    var TransitionBoxContent = (function (_super) {
        __extends(TransitionBoxContent, _super);
        function TransitionBoxContent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransitionBoxContent;
    }(Ui.LBox));
    Ui.TransitionBoxContent = TransitionBoxContent;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Fold = (function (_super) {
        __extends(Fold, _super);
        function Fold(init) {
            var _this = _super.call(this, init) || this;
            _this._offset = 0;
            _this._position = 'bottom';
            _this._isFolded = true;
            _this._over = true;
            _this._mode = 'extend';
            _this.contentSize = 0;
            _this._animDuration = 0.5;
            _this.folded = new Core.Events();
            _this.unfolded = new Core.Events();
            _this.positionchanged = new Core.Events();
            _this.progress = new Core.Events();
            _this.headerBox = new Ui.LBox();
            _this.appendChild(_this.headerBox);
            _this.contentBox = new Ui.LBox();
            _this.appendChild(_this.contentBox);
            _this.contentBox.hide();
            if (init) {
                if (init.isFolded !== undefined)
                    _this.isFolded = init.isFolded;
                if (init.over !== undefined)
                    _this.over = init.over;
                if (init.mode !== undefined)
                    _this.mode = init.mode;
                if (init.header !== undefined)
                    _this.header = init.header;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.background !== undefined)
                    _this.background = init.background;
                if (init.position !== undefined)
                    _this.position = init.position;
                if (init.animDuration !== undefined)
                    _this.animDuration = init.animDuration;
                if (init.onfolded)
                    _this.folded.connect(init.onfolded);
                if (init.onunfolded)
                    _this.unfolded.connect(init.onunfolded);
                if (init.onpositionchanged)
                    _this.positionchanged.connect(init.onpositionchanged);
                if (init.onprogress)
                    _this.progress.connect(init.onprogress);
            }
            return _this;
        }
        Object.defineProperty(Fold.prototype, "onfolded", {
            set: function (value) { this.folded.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "onunfolded", {
            set: function (value) { this.unfolded.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "onpositionchanged", {
            set: function (value) { this.positionchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "onprogress", {
            set: function (value) { this.progress.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "isFolded", {
            get: function () {
                return this._isFolded;
            },
            set: function (isFolded) {
                if (this._isFolded != isFolded) {
                    this._isFolded = isFolded;
                    if (this._isFolded) {
                        this.offset = 0;
                        this.contentBox.hide();
                        this.folded.fire({ target: this });
                    }
                    else {
                        this.offset = 1;
                        this.contentBox.show();
                        this.unfolded.fire({ target: this });
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Fold.prototype.fold = function () {
            if (!this._isFolded) {
                this._isFolded = true;
                this.startAnimation();
                this.folded.fire({ target: this });
            }
        };
        Fold.prototype.unfold = function () {
            if (this._isFolded) {
                this._isFolded = false;
                this.startAnimation();
                this.unfolded.fire({ target: this });
            }
        };
        Object.defineProperty(Fold.prototype, "over", {
            get: function () {
                return this._over;
            },
            set: function (over) {
                if (this._over != over) {
                    this._over = over;
                    this.stopAnimation();
                    this.transform = Ui.Matrix.createTranslate(0, 0);
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "mode", {
            get: function () {
                return this._mode;
            },
            set: function (mode) {
                if (this._mode != mode) {
                    this._mode = mode;
                    this.stopAnimation();
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "header", {
            get: function () {
                return this._header;
            },
            set: function (header) {
                if (header !== this._header) {
                    this._header = header;
                    this.headerBox.content = this._header;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (this._content !== content) {
                    this._content = content;
                    this.contentBox.content = this._content;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "background", {
            get: function () {
                return this._background;
            },
            set: function (background) {
                if (this._background !== background) {
                    if (this._background !== undefined)
                        this.removeChild(this._background);
                    this._background = background;
                    if (this._background !== undefined)
                        this.prependChild(this._background);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (position) {
                if (this._position != position) {
                    this._position = position;
                    this.positionchanged.fire({ target: this, position: position });
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Fold.prototype.invert = function () {
            if (this._isFolded)
                this.unfold();
            else
                this.fold();
        };
        Object.defineProperty(Fold.prototype, "animDuration", {
            get: function () {
                return this._animDuration;
            },
            set: function (duration) {
                this._animDuration = duration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fold.prototype, "offset", {
            get: function () {
                return this._offset;
            },
            set: function (offset) {
                if (this._offset === offset)
                    return;
                this._offset = offset;
                if (!this._over)
                    this.invalidateMeasure();
                else {
                    if (this._position === 'right') {
                        if (this._mode === 'slide')
                            this.transform = Ui.Matrix.createTranslate(-this._offset * this.contentSize, 0);
                        else
                            this.transform = Ui.Matrix.createTranslate(0, 0);
                        this.contentBox.setClipRectangle(0, 0, Math.round(this.contentSize * this._offset), this.layoutHeight);
                        if (this._background !== undefined)
                            this._background.arrange(0, 0, Math.round(this.headerBox.measureWidth + this.contentSize * this._offset), Math.round(this.layoutHeight));
                    }
                    else if (this._position === 'left') {
                        if (this._mode === 'slide')
                            this.transform = Ui.Matrix.createTranslate(-this.contentSize + (this._offset * this.contentSize), 0);
                        else
                            this.transform = Ui.Matrix.createTranslate(-this.contentSize, 0);
                        this.contentBox.setClipRectangle(Math.round(this.contentSize * (1 - this._offset)), 0, this.contentSize, this.layoutHeight);
                        if (this._background !== undefined)
                            this._background.arrange(Math.round(this.contentSize * (1 - this._offset)), 0, Math.round(this.headerBox.measureWidth + this.contentSize * this._offset), Math.round(this.layoutHeight));
                    }
                    else if (this._position === 'top') {
                        if (this._mode === 'slide')
                            this.transform = Ui.Matrix.createTranslate(0, -this.contentSize + (this._offset * this.contentSize));
                        else
                            this.transform = Ui.Matrix.createTranslate(0, -this.contentSize);
                        this.contentBox.setClipRectangle(0, Math.round(this.contentSize * (1 - this._offset)), this.layoutWidth, Math.round(this.contentSize * this._offset));
                        if (this._background !== undefined)
                            this._background.arrange(0, Math.round(this.contentSize * (1 - this._offset)), this.layoutWidth, Math.round(this.headerBox.measureHeight + this.contentSize * this._offset));
                    }
                    else {
                        if (this._mode === 'slide')
                            this.transform = Ui.Matrix.createTranslate(0, -this._offset * this.contentSize);
                        else
                            this.transform = Ui.Matrix.createTranslate(0, 0);
                        this.contentBox.setClipRectangle(0, 0, this.layoutWidth, Math.round(this.contentSize * this._offset));
                        if (this._background !== undefined)
                            this._background.arrange(0, 0, this.layoutWidth, Math.round(this.headerBox.measureHeight + this.contentSize * this._offset));
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Fold.prototype.startAnimation = function () {
            var _this = this;
            if (this.clock !== undefined)
                this.clock.stop();
            if (!this._isFolded)
                this.contentBox.show();
            this.clock = new Anim.Clock({ duration: this._animDuration, target: this });
            this.clock.timeupdate.connect(function (e) { return _this.onClockTick(e.target, e.progress); });
            this.clock.begin();
        };
        Fold.prototype.stopAnimation = function () {
            if (this.clock !== undefined) {
                this.clock.stop();
                this.clock = undefined;
            }
        };
        Fold.prototype.onClockTick = function (clock, progress) {
            if (this.content === undefined) {
                if (this.clock !== undefined) {
                    this.clock.stop();
                    this.clock = undefined;
                }
                return;
            }
            var offset = this.offset;
            if (offset > 1)
                this.offset = 1;
            else {
                var destOffset = void 0;
                if (this._isFolded)
                    destOffset = 0;
                else
                    destOffset = 1;
                this.offset = destOffset - ((destOffset - offset) * (1 - progress));
            }
            this.progress.fire({ target: this, offset: this.offset });
            if ((progress == 1) && this._isFolded) {
                this.contentBox.hide();
            }
        };
        Fold.prototype.measureCore = function (width, height) {
            if (this._background !== undefined)
                this._background.measure(width, height);
            var size = this.headerBox.measure(width, height);
            var contentSize = { width: 0, height: 0 };
            if ((this._position == 'left') || (this._position == 'right')) {
                contentSize = this.contentBox.measure(width - size.width, height);
                if (contentSize.height > size.height)
                    size.height = contentSize.height;
                if (!this._over)
                    size.width += contentSize.width * this._offset;
                this.contentSize = contentSize.width;
            }
            else {
                contentSize = this.contentBox.measure(width, height - size.height);
                if (contentSize.width > size.width)
                    size.width = contentSize.width;
                if (!this._over)
                    size.height += contentSize.height * this._offset;
                this.contentSize = contentSize.height;
            }
            return size;
        };
        Fold.prototype.arrangeCore = function (width, height) {
            if (this._position == 'left') {
                if (!this._over)
                    this.transform = Ui.Matrix.createTranslate(-this.contentSize + (this._offset * this.contentSize), 0);
                this.contentBox.arrange(0, 0, this.contentBox.measureWidth, height);
                this.headerBox.arrange(this.contentBox.measureWidth, 0, this.headerBox.measureWidth, height);
                if (this._background !== undefined)
                    this._background.arrange(Math.round(this.contentSize * (1 - this._offset)), 0, Math.round(this.headerBox.measureWidth + this.contentSize * this._offset), Math.round(height));
                this.contentBox.setClipRectangle(Math.round(this.contentSize * (1 - this._offset)), 0, Math.round(this.contentSize * this._offset), Math.round(height));
            }
            else if (this._position == 'right') {
                this.headerBox.arrange(0, 0, this.headerBox.measureWidth, height);
                this.contentBox.arrange(this.headerBox.measureWidth, 0, this.contentBox.measureWidth, height);
                if (this._background !== undefined)
                    this._background.arrange(0, 0, Math.round(this.headerBox.measureWidth + this.contentSize * this._offset), Math.round(height));
                this.contentBox.setClipRectangle(0, 0, Math.round(this.contentSize * this._offset), Math.round(height));
            }
            else if (this._position == 'top') {
                if (!this._over)
                    this.transform = Ui.Matrix.createTranslate(0, -this.contentSize + (this._offset * this.contentSize));
                this.contentBox.arrange(0, 0, width, this.contentBox.measureHeight);
                this.headerBox.arrange(0, this.contentBox.measureHeight, width, this.headerBox.measureHeight);
                if (this._background !== undefined)
                    this._background.arrange(0, Math.round(this.contentSize * (1 - this._offset)), width, Math.round(this.headerBox.measureHeight + this.contentSize * this._offset));
                this.contentBox.setClipRectangle(0, Math.round(this.contentSize * (1 - this._offset)), Math.round(width), Math.round(this.contentSize * this._offset));
            }
            else {
                this.headerBox.arrange(0, 0, width, this.headerBox.measureHeight);
                this.contentBox.arrange(0, this.headerBox.measureHeight, width, this.contentBox.measureHeight);
                if (this._background !== undefined)
                    this._background.arrange(0, 0, width, Math.round(this.headerBox.measureHeight + this.contentSize * this._offset));
                this.contentBox.setClipRectangle(0, 0, Math.round(width), Math.round(this.contentSize * this._offset));
            }
            this.offset = this._offset;
        };
        return Fold;
    }(Ui.Container));
    Ui.Fold = Fold;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Switch = (function (_super) {
        __extends(Switch, _super);
        function Switch(init) {
            var _this = _super.call(this, init) || this;
            _this._value = false;
            _this.pos = 0;
            _this.speed = 0;
            _this.animNext = 0;
            _this.animStart = 0;
            _this.changed = new Core.Events();
            _this.onButtonMove = function () {
                var pos = _this.button.positionX;
                var size = _this.layoutWidth;
                var max = size - _this.button.layoutWidth;
                if (pos < 0)
                    pos = 0;
                else if (pos > max)
                    pos = max;
                _this.pos = pos / max;
                _this.button.moved.disconnect(_this.onButtonMove);
                _this.updatePos();
                _this.button.moved.connect(_this.onButtonMove);
            };
            _this.background = new Ui.Rectangle({ width: 4, height: 14, radius: 7 });
            _this.appendChild(_this.background);
            _this.bar = new Ui.Rectangle({ width: 4, height: 14, radius: 7 });
            _this.appendChild(_this.bar);
            _this.button = new Ui.Movable({ moveVertical: false });
            _this.appendChild(_this.button);
            _this.button.moved.connect(_this.onButtonMove);
            _this.button.focused.connect(function () { return _this.updateColors(); });
            _this.button.blurred.connect(function () { return _this.updateColors(); });
            _this.button.downed.connect(function () { return _this.onDown(); });
            _this.button.upped.connect(function (e) { return _this.onUp(e.speedX, e.cumulMove, e.abort); });
            _this.buttonContent = new Ui.Rectangle({ radius: 10, width: 20, height: 20, margin: 10 });
            _this.button.content = _this.buttonContent;
            _this.ease = new Anim.PowerEase({ mode: 'out' });
            if (init) {
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.ease !== undefined)
                    _this.ease = init.ease;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
            }
            return _this;
        }
        Object.defineProperty(Switch.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Switch.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this._value !== value) {
                    this._value = value;
                    if (this.isLoaded) {
                        if (this._value)
                            this.startAnimation(4);
                        else
                            this.startAnimation(-4);
                    }
                    else
                        this.pos = this._value ? 1 : 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        Switch.prototype.updatePos = function () {
            var max;
            var width = this.layoutWidth;
            var height = this.layoutHeight;
            max = width - this.button.layoutWidth;
            this.button.setPosition(max * this.pos, 0);
            this.bar.arrange(this.button.layoutWidth / 2, (height - this.bar.measureHeight) / 2, max * this.pos, this.bar.measureHeight);
        };
        Switch.prototype.getColor = function () {
            return Ui.Color.create(this.getStyleProperty('background')).getYuv();
        };
        Switch.prototype.getForeground = function () {
            return Ui.Color.create(this.getStyleProperty('foreground'));
        };
        Switch.prototype.getBackground = function () {
            var yuv = Ui.Color.create(this.getStyleProperty('background')).getYuv();
            var deltaY = 0;
            if (this.button.isDown)
                deltaY = -0.30;
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v);
        };
        Switch.prototype.getButtonColor = function () {
            var yuv = Ui.Color.create(this.getStyleProperty('background')).getYuv();
            var deltaY = 0;
            if (this.button.isDown)
                deltaY = -0.30;
            else if (this.button.hasFocus)
                deltaY = 0.10;
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v);
        };
        Switch.prototype.updateColors = function () {
            this.bar.fill = this.getForeground().addA(-0.6);
            this.background.fill = this.getBackground();
            this.buttonContent.fill = this.getForeground();
        };
        Switch.prototype.onDown = function () {
            this.stopAnimation();
            this.updateColors();
        };
        Switch.prototype.onUp = function (speedX, cumulMove, abort) {
            if (abort)
                return;
            if (cumulMove < 10)
                this.value = !this._value;
            else {
                if (this.pos > 0.5)
                    speedX = 1;
                else
                    speedX = -1;
                this.startAnimation(speedX);
            }
            this.updateColors();
        };
        Switch.prototype.startAnimation = function (speed) {
            var _this = this;
            this.stopAnimation();
            this.speed = speed;
            this.animStart = this.pos;
            if (this.speed > 0)
                this.animNext = 1;
            else
                this.animNext = 0;
            if (this.animStart !== this.animNext) {
                this.alignClock = new Anim.Clock({ duration: 'forever', target: this });
                this.alignClock.timeupdate.connect(function (e) { return _this.onAlignTick(e.target, e.progress, e.deltaTick); });
                this.alignClock.begin();
            }
            else {
                if (this._value !== (this.animNext === 1)) {
                    this._value = (this.animNext === 1);
                    this.changed.fire({ target: this, value: this._value });
                }
            }
        };
        Switch.prototype.stopAnimation = function () {
            if (this.alignClock !== undefined) {
                this.alignClock.stop();
                this.alignClock = undefined;
            }
        };
        Switch.prototype.onAlignTick = function (clock, progress, delta) {
            if (delta === 0)
                return;
            var relprogress = (clock.time * this.speed) / (this.animNext - this.animStart);
            if (relprogress >= 1) {
                if (this.alignClock)
                    this.alignClock.stop();
                this.alignClock = undefined;
                relprogress = 1;
                this._value = (this.animNext === 1);
                this.changed.fire({ target: this, value: this._value });
            }
            relprogress = this.ease.ease(relprogress);
            this.pos = (this.animStart + relprogress * (this.animNext - this.animStart));
            this.updatePos();
        };
        Switch.prototype.measureCore = function (width, height) {
            var buttonSize = this.button.measure(0, 0);
            var size = buttonSize;
            var res;
            res = this.background.measure(buttonSize.width * 1.75, 0);
            if (res.width > size.width)
                size.width = res.width;
            if (res.height > size.height)
                size.height = res.height;
            res = this.bar.measure(buttonSize.width * 1.75, 0);
            if (res.width > size.width)
                size.width = res.width;
            if (res.height > size.height)
                size.height = res.height;
            if (buttonSize.width * 1.75 > size.width)
                size.width = buttonSize.width * 1.75;
            return size;
        };
        Switch.prototype.arrangeCore = function (width, height) {
            this.button.arrange(0, (height - this.button.measureHeight) / 2, this.button.measureWidth, this.button.measureHeight);
            this.background.arrange(this.button.layoutWidth / 2, (height - this.background.measureHeight) / 2, width - this.button.layoutWidth, this.background.measureHeight);
            this.updatePos();
        };
        Switch.prototype.onStyleChange = function () {
            var borderWidth = this.getStyleProperty('borderWidth');
            this.updateColors();
        };
        Switch.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.button.opacity = 0.2;
        };
        Switch.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.button.opacity = 1;
        };
        Switch.style = {
            radius: 0,
            borderWidth: 1,
            background: '#e1e1e1',
            backgroundBorder: '#919191',
            foreground: '#07a0e5'
        };
        return Switch;
    }(Ui.Container));
    Ui.Switch = Switch;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Accordeonable = (function (_super) {
        __extends(Accordeonable, _super);
        function Accordeonable(init) {
            var _this = _super.call(this, init) || this;
            _this.current = -1;
            _this.headersSize = 0;
            _this.contentSize = 0;
            _this._orientation = 'horizontal';
            _this.changed = new Core.Events();
            _this.onPageSelect = function (e) {
                _this.currentPage = e.target;
            };
            _this.onPageClose = function (e) {
                _this.removePage(e.target);
            };
            _this.clipToBounds = true;
            return _this;
        }
        Object.defineProperty(Accordeonable.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Accordeonable.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            set: function (orientation) {
                if (this._orientation != orientation) {
                    this._orientation = orientation;
                    for (var i = 0; i < this.pages.length; i++)
                        this.pages[i].setOrientation(orientation);
                    this.invalidateMeasure();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Accordeonable.prototype, "pages", {
            get: function () {
                return this.children;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Accordeonable.prototype, "currentPage", {
            get: function () {
                return this._currentPage;
            },
            set: function (page) {
                for (var i = 0; i < this.pages.length; i++) {
                    if (this.pages[i] == page) {
                        this.currentPosition = i;
                        return;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Accordeonable.prototype, "currentPosition", {
            get: function () {
                return this.current;
            },
            set: function (pos) {
                var _this = this;
                if (this.pages.length === 0) {
                    if (this._currentPage !== undefined)
                        this._currentPage.unselect();
                    this._currentPage = undefined;
                    this.current = -1;
                }
                else {
                    this.current = pos;
                    var newPage = this.pages[this.current];
                    if (newPage !== this._currentPage) {
                        if (this._currentPage !== undefined)
                            this._currentPage.unselect();
                        this._currentPage = newPage;
                        this.changed.fire({ target: this, page: this._currentPage, position: this.current });
                        this._currentPage.selected.disconnect(this.onPageSelect);
                        this._currentPage.select();
                        this._currentPage.selected.connect(this.onPageSelect);
                    }
                    if (this.clock !== undefined)
                        this.clock.stop();
                    this.clock = new Anim.Clock({ duration: 2, target: this });
                    this.clock.timeupdate.connect(function (e) { return _this.onClockTick(e.target, e.progress); });
                    this.clock.begin();
                }
            },
            enumerable: true,
            configurable: true
        });
        Accordeonable.prototype.appendPage = function (page, autoSelect) {
            if (autoSelect === void 0) { autoSelect = true; }
            this.appendChild(page);
            page.setOffset(1);
            page.setOrientation(this._orientation);
            page.selected.connect(this.onPageSelect);
            page.closed.connect(this.onPageClose);
            if (autoSelect)
                page.select();
        };
        Accordeonable.prototype.removePage = function (page) {
            var pos = -1;
            for (var i = 0; i < this.pages.length; i++) {
                if (this.pages[i] == page) {
                    pos = i;
                    break;
                }
            }
            if (pos !== -1) {
                page.selected.disconnect(this.onPageSelect);
                page.closed.disconnect(this.onPageClose);
                this.removeChild(page);
                if ((this.current === pos) && (this.current === 0))
                    this.currentPosition = 0;
                else if (this.current >= pos)
                    this.currentPosition = this.current - 1;
                else
                    this.currentPosition = this.current;
            }
        };
        Accordeonable.prototype.onClockTick = function (clock, progress) {
            for (var i = 0; i < this.pages.length; i++) {
                var child = this.pages[i];
                if (i == this.current)
                    child.showContent();
                var offset = child.getOffset();
                if (offset > 1)
                    child.setOffset(1);
                else {
                    var destOffset = void 0;
                    if (i <= this.current)
                        destOffset = 0;
                    else
                        destOffset = 1;
                    child.setOffset(destOffset - ((destOffset - offset) * (1 - progress)));
                }
                if ((progress == 1) && (i != this.current))
                    child.hideContent();
            }
        };
        Accordeonable.prototype.measureHorizontal = function (width, height) {
            var i;
            var size;
            var child;
            var content;
            var minHeaders = 0;
            var minContent = 0;
            var minHeight = 0;
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                size = child.measure(width, height);
                minHeaders += child.getHeader().measureWidth;
                if (child.getHeader().measureHeight > minHeight)
                    minHeight = child.getHeader().measureHeight;
            }
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                size = child.measure((width - minHeaders) + child.getHeader().measureWidth, height);
                content = child.getContent();
                if ((content !== undefined) && (content.measureWidth > minContent)) {
                    minContent = content.measureWidth;
                    if (content.measureHeight > minHeight)
                        minHeight = content.measureHeight;
                }
            }
            this.headersSize = minHeaders;
            return { width: minHeaders + minContent, height: minHeight };
        };
        Accordeonable.prototype.measureVertical = function (width, height) {
            var i;
            var child;
            var size;
            var content;
            var minHeaders = 0;
            var minContent = 0;
            var minWidth = 0;
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                size = child.measure(width, height);
                minHeaders += child.getHeader().measureHeight;
                if (child.getHeader().measureWidth > minWidth)
                    minWidth = child.getHeader().measureWidth;
            }
            for (i = 0; i < this.children.length; i++) {
                child = this.children[i];
                size = child.measure(width, (height - minHeaders) + child.getHeader().measureHeight);
                content = child.getContent();
                if ((content !== undefined) && (content.measureHeight > minContent)) {
                    minContent = content.measureHeight;
                    if (content.measureWidth > minWidth)
                        minWidth = content.measureWidth;
                }
            }
            this.headersSize = minHeaders;
            return { width: minWidth, height: minHeaders + minContent };
        };
        Accordeonable.prototype.measureCore = function (width, height) {
            if (this._orientation == 'horizontal')
                return this.measureHorizontal(width, height);
            else
                return this.measureVertical(width, height);
        };
        Accordeonable.prototype.arrangeCore = function (width, height) {
            var i;
            var child;
            var x;
            var y;
            if (this._orientation == 'horizontal') {
                x = 0;
                this.contentSize = width - this.headersSize;
                for (i = 0; i < this.children.length; i++) {
                    child = this.children[i];
                    child.arrange(x, 0, this.contentSize + child.getHeader().measureWidth, height);
                    x += child.getHeader().measureWidth;
                }
            }
            else {
                y = 0;
                this.contentSize = height - this.headersSize;
                for (i = 0; i < this.children.length; i++) {
                    child = this.children[i];
                    child.arrange(0, y, width, this.contentSize + child.getHeader().measureHeight);
                    y += child.getHeader().measureHeight;
                }
            }
        };
        return Accordeonable;
    }(Ui.Container));
    Ui.Accordeonable = Accordeonable;
    var AccordeonPage = (function (_super) {
        __extends(AccordeonPage, _super);
        function AccordeonPage(init) {
            var _this = _super.call(this, init) || this;
            _this.offset = 0;
            _this.orientation = 'horizontal';
            _this.isSelected = false;
            _this.selected = new Core.Events();
            _this.unselected = new Core.Events();
            _this.closed = new Core.Events();
            _this.orientationchanged = new Core.Events();
            _this.headerBox = new Ui.Pressable();
            _this.appendChild(_this.headerBox);
            _this.headerBox.pressed.connect(function (e) { return _this.onHeaderPress(); });
            return _this;
        }
        Object.defineProperty(AccordeonPage.prototype, "onselected", {
            set: function (value) { this.selected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccordeonPage.prototype, "onunselected", {
            set: function (value) { this.unselected.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccordeonPage.prototype, "onclosed", {
            set: function (value) { this.closed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AccordeonPage.prototype, "onorientationchanged", {
            set: function (value) { this.orientationchanged.connect(value); },
            enumerable: true,
            configurable: true
        });
        AccordeonPage.prototype.close = function () {
            this.closed.fire({ target: this });
        };
        AccordeonPage.prototype.select = function () {
            if (!this.isSelected) {
                this.isSelected = true;
                this.selected.fire({ target: this });
            }
        };
        AccordeonPage.prototype.getIsSelected = function () {
            return this.isSelected;
        };
        AccordeonPage.prototype.getHeader = function () {
            return this.header;
        };
        AccordeonPage.prototype.setHeader = function (header) {
            if (header !== this.header) {
                if (this.header !== undefined)
                    this.headerBox.removeChild(this.header);
                this.header = header;
                if (this.header !== undefined)
                    this.headerBox.appendChild(this.header);
            }
        };
        AccordeonPage.prototype.getContent = function () {
            return this.content;
        };
        AccordeonPage.prototype.setContent = function (content) {
            if (this.content !== content) {
                if (this.content !== undefined)
                    this.removeChild(this.content);
                this.content = content;
                if (this.content !== undefined)
                    this.appendChild(this.content);
            }
        };
        AccordeonPage.prototype.getOrientation = function () {
            return this.orientation;
        };
        AccordeonPage.prototype.setOrientation = function (orientation) {
            if (this.orientation != orientation) {
                this.orientation = orientation;
                this.orientationchanged.fire({ target: this, orientation: orientation });
                this.invalidateMeasure();
            }
        };
        AccordeonPage.prototype.unselect = function () {
            if (this.isSelected) {
                this.isSelected = false;
                this.unselected.fire({ target: this });
            }
        };
        AccordeonPage.prototype.showContent = function () {
            if (this.content !== undefined) {
                this.content.show();
            }
        };
        AccordeonPage.prototype.hideContent = function () {
            if (this.content !== undefined) {
                this.content.hide();
            }
        };
        AccordeonPage.prototype.getOffset = function () {
            return this.offset;
        };
        AccordeonPage.prototype.setOffset = function (offset) {
            this.offset = offset;
            if (this.orientation == 'horizontal')
                this.transform = Ui.Matrix.createTranslate(this.offset * (this.layoutWidth - this.headerBox.measureWidth), 0);
            else
                this.transform = Ui.Matrix.createTranslate(0, this.offset * (this.layoutHeight - this.headerBox.measureHeight));
        };
        AccordeonPage.prototype.onHeaderPress = function () {
            this.select();
        };
        AccordeonPage.prototype.measureCore = function (width, height) {
            var size = this.headerBox.measure(width, height);
            var contentSize = { width: 0, height: 0 };
            if (this.content !== undefined) {
                if (this.orientation == 'horizontal') {
                    contentSize = this.content.measure(width - size.width, height);
                    if (contentSize.height > size.height)
                        size.height = contentSize.height;
                    size.width += contentSize.width;
                }
                else {
                    contentSize = this.content.measure(width, height - size.height);
                    if (contentSize.width > size.width)
                        size.width = contentSize.width;
                    size.height += contentSize.height;
                }
            }
            return size;
        };
        AccordeonPage.prototype.arrangeCore = function (width, height) {
            if (this.orientation == 'horizontal') {
                this.headerBox.arrange(0, 0, this.headerBox.measureWidth, height);
                if (this.content !== undefined)
                    this.content.arrange(this.headerBox.measureWidth, 0, width - this.headerBox.measureWidth, height);
            }
            else {
                this.headerBox.arrange(0, 0, width, this.headerBox.measureHeight);
                if (this.content !== undefined)
                    this.content.arrange(0, this.headerBox.measureHeight, width, height - this.headerBox.measureHeight);
            }
            this.setOffset(this.offset);
        };
        return AccordeonPage;
    }(Ui.Container));
    Ui.AccordeonPage = AccordeonPage;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Accordeon = (function (_super) {
        __extends(Accordeon, _super);
        function Accordeon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Accordeon;
    }(Ui.Accordeonable));
    Ui.Accordeon = Accordeon;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var DropAtBox = (function (_super) {
        __extends(DropAtBox, _super);
        function DropAtBox(container, init) {
            var _this = _super.call(this, init) || this;
            _this.watchers = [];
            _this.allowedTypes = undefined;
            _this.drageffect = new Core.Events();
            _this.dragentered = new Core.Events();
            _this.dragleaved = new Core.Events();
            _this.droppedat = new Core.Events();
            _this.droppedfileat = new Core.Events();
            _this.fixed = new Ui.Fixed();
            _super.prototype.append.call(_this, _this.fixed);
            _this.container = container;
            _super.prototype.append.call(_this, _this.container);
            _this.dragover.connect(function (e) { return _this.onDragOver(e); });
            if (init) {
                if (init.ondroppedat)
                    _this.droppedat.connect(init.ondroppedat);
                if (init.ondroppedfileat)
                    _this.droppedfileat.connect(init.ondroppedfileat);
            }
            return _this;
        }
        Object.defineProperty(DropAtBox.prototype, "ondrageffect", {
            set: function (value) { this.drageffect.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropAtBox.prototype, "ondragentered", {
            set: function (value) { this.dragentered.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropAtBox.prototype, "ondragleaved", {
            set: function (value) { this.dragleaved.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropAtBox.prototype, "ondroppedat", {
            set: function (value) { this.droppedat.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropAtBox.prototype, "ondroppedfileat", {
            set: function (value) { this.droppedfileat.connect(value); },
            enumerable: true,
            configurable: true
        });
        DropAtBox.prototype.addType = function (type, effects) {
            if (typeof (type) === 'string')
                type = type.toLowerCase();
            if (this.allowedTypes == undefined)
                this.allowedTypes = [];
            if (typeof (effects) === 'string')
                effects = [effects];
            if (typeof (effects) !== 'function') {
                for (var i = 0; i < effects.length; i++) {
                    var effect = effects[i];
                    if (typeof (effect) === 'string')
                        effect = { action: effect };
                    if (!('text' in effect)) {
                        if (effect.action === 'copy')
                            effect.text = 'Copier';
                        else if (effect.action === 'move')
                            effect.text = 'Déplacer';
                        else if (effect.action === 'link')
                            effect.text = 'Lier';
                        else
                            effect.text = effect.action;
                    }
                    if (!('dragicon' in effect))
                        effect.dragicon = 'drag' + effect.action;
                    effects[i] = effect;
                }
                this.allowedTypes.push({ type: type, effect: effects });
            }
            else
                this.allowedTypes.push({ type: type, effect: effects });
        };
        DropAtBox.prototype.setMarkerOrientation = function (orientation) {
            this.markerOrientation = orientation;
        };
        DropAtBox.prototype.setMarkerPos = function (marker, pos) {
            marker.show();
            var spacing = 0;
            if ('spacing' in this.container)
                spacing = this.container.spacing;
            if (pos < this.container.children.length) {
                var child = this.container.children[pos];
                if (this.markerOrientation === 'horizontal') {
                    var x = child.layoutX - child.marginLeft -
                        (marker.layoutWidth + marker.marginLeft + marker.marginRight + spacing) / 2;
                    var y = child.layoutY;
                    var height = child.layoutHeight;
                    marker.height = height;
                    this.fixed.setPosition(marker, x, y);
                }
                else {
                    var x = child.layoutX;
                    var y = child.layoutY - child.marginTop - (marker.layoutHeight + marker.marginTop + marker.marginBottom) / 2 - spacing / 2;
                    marker.width = child.layoutWidth;
                    this.fixed.setPosition(marker, x, y);
                }
            }
            else if (this.container.children.length > 0) {
                var child = this.container.children[this.container.children.length - 1];
                if (this.markerOrientation === 'horizontal') {
                    var x = child.layoutX + child.layoutWidth - (marker.layoutWidth - spacing) / 2;
                    var y = child.layoutY;
                    var height = child.layoutHeight;
                    marker.height = height;
                    this.fixed.setPosition(marker, x, y);
                }
                else {
                    var x = child.layoutX;
                    var y = child.layoutY + child.layoutHeight - marker.layoutHeight / 2;
                    marker.width = child.layoutWidth;
                    this.fixed.setPosition(marker, x, y);
                }
            }
        };
        DropAtBox.prototype.findPosition = function (point) {
            if (this.markerOrientation === 'horizontal')
                return this.findPositionHorizontal(point);
            else
                return this.findPositionVertical(point);
        };
        DropAtBox.prototype.findPositionHorizontal = function (point) {
            var line = [];
            var childs = this.container.children;
            for (var i = 0; i < childs.length; i++) {
                if ((point.y >= childs[i].layoutY) && (point.y < childs[i].layoutY + childs[i].layoutHeight))
                    line.push(childs[i]);
            }
            var element = undefined;
            var dist = Number.MAX_VALUE;
            for (var i = 0; i < line.length; i++) {
                var cx = line[i].layoutX + ((line[i].layoutWidth) / 2);
                var d = Math.abs(point.x - cx);
                if (d < dist) {
                    dist = d;
                    element = line[i];
                }
            }
            if ((element === undefined) && (line.length > 0))
                element = line[line.length - 1];
            var insertPos = childs.length;
            if (element !== undefined) {
                var elPos = -1;
                for (var i = 0; (elPos == -1) && (i < childs.length); i++) {
                    if (childs[i] == element)
                        elPos = i;
                }
                if (point.x < element.layoutX + element.layoutWidth / 2)
                    insertPos = elPos;
                else
                    insertPos = elPos + 1;
            }
            return insertPos;
        };
        DropAtBox.prototype.findPositionVertical = function (point) {
            var childs = this.container.children;
            var element = undefined;
            var dist = Number.MAX_VALUE;
            for (var i = 0; i < childs.length; i++) {
                var cy = childs[i].layoutY + ((childs[i].layoutHeight) / 2);
                var d = Math.abs(point.y - cy);
                if (d < dist) {
                    dist = d;
                    element = childs[i];
                }
            }
            if ((element === undefined) && (childs.length > 0))
                element = childs[childs.length - 1];
            var insertPos = childs.length;
            if (element !== undefined) {
                var elPos = -1;
                for (var i = 0; (elPos === -1) && (i < childs.length); i++) {
                    if (childs[i] === element)
                        elPos = i;
                }
                if (point.y < element.layoutY + element.layoutHeight / 2)
                    insertPos = elPos;
                else
                    insertPos = elPos + 1;
            }
            return insertPos;
        };
        DropAtBox.prototype.insertAt = function (element, pos) {
            this.container.insertAt(element, pos);
        };
        DropAtBox.prototype.insertBefore = function (element, child) {
            this.container.insertBefore(element, child);
        };
        DropAtBox.prototype.moveAt = function (element, pos) {
            this.container.moveAt(element, pos);
        };
        Object.defineProperty(DropAtBox.prototype, "logicalChildren", {
            get: function () {
                return this.container.children;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropAtBox.prototype, "content", {
            set: function (content) {
                this.container.content = content;
            },
            enumerable: true,
            configurable: true
        });
        DropAtBox.prototype.clear = function () {
            this.container.clear();
        };
        DropAtBox.prototype.append = function (item) {
            this.container.append(item);
        };
        DropAtBox.prototype.remove = function (item) {
            this.container.remove(item);
        };
        DropAtBox.prototype.getChildPosition = function (child) {
            return this.container.getChildPosition(child);
        };
        DropAtBox.prototype.hasChild = function (child) {
            return this.container.hasChild(child);
        };
        DropAtBox.prototype.onStyleChange = function () {
            var color = this.getStyleProperty('markerColor');
            for (var i = 0; i < this.watchers.length; i++) {
                var marker = (this.watchers[i])["Ui.DropAtBox.marker"];
                marker.fill = color;
            }
        };
        DropAtBox.prototype.getAllowedTypesEffect = function (dataTransfer) {
            if (this.allowedTypes !== undefined) {
                var data = dataTransfer.getData();
                var effect = undefined;
                for (var i = 0; (effect === undefined) && (i < this.allowedTypes.length); i++) {
                    var type = this.allowedTypes[i];
                    if (typeof (type.type) === 'string') {
                        if (type.type === 'all')
                            effect = type.effect;
                        else if (data instanceof Ui.DragNativeData) {
                            if ((type.type === 'files') && data.hasFiles())
                                effect = type.effect;
                            else if (((type.type === 'text') || (type.type === 'text/plain')) && data.hasTypes('text/plain', 'text'))
                                effect = type.effect;
                            else if (data.hasType(type.type))
                                effect = type.effect;
                        }
                    }
                    else if (data instanceof type.type)
                        effect = type.effect;
                }
                if (typeof (effect) === 'function') {
                    var effects = this.onDragEffectFunction(dataTransfer, effect);
                    for (var i = 0; i < effects.length; i++) {
                        var effect_3 = effects[i];
                        if (typeof (effect_3) === 'string')
                            effect_3 = { action: effect_3 };
                        if (!('text' in effect_3)) {
                            if (effect_3.action === 'copy')
                                effect_3.text = 'Copier';
                            else if (effect_3.action === 'move')
                                effect_3.text = 'Déplacer';
                            else if (effect_3.action === 'link')
                                effect_3.text = 'Lier';
                            else if (effect_3.action === 'run')
                                effect_3.text = 'Exécuter';
                            else if (effect_3.action === 'play')
                                effect_3.text = 'Jouer';
                            else
                                effect_3.text = effect_3.action;
                        }
                        if (!('dragicon' in effect_3))
                            effect_3.dragicon = 'drag' + effect_3.action;
                        effects[i] = effect_3;
                    }
                    effect = effects;
                }
                if (effect === undefined)
                    effect = [];
                return effect;
            }
            else
                return [];
        };
        DropAtBox.prototype.onDragEffect = function (dataTransfer) {
            var dragEvent = new Ui.DragEvent();
            dragEvent.setType('drageffect');
            dragEvent.setBubbles(false);
            dragEvent.dataTransfer = dataTransfer;
            dragEvent.dispatchEvent(this);
            var effectAllowed = dragEvent.effectAllowed;
            if (effectAllowed !== undefined)
                return dragEvent.effectAllowed;
            else
                return this.getAllowedTypesEffect(dataTransfer);
        };
        DropAtBox.prototype.onDragOver = function (event) {
            var _this = this;
            var foundWatcher = undefined;
            for (var i = 0; (foundWatcher === undefined) && (i < this.watchers.length); i++)
                if (this.watchers[i].getDataTransfer() === event.dataTransfer)
                    foundWatcher = this.watchers[i];
            var effect = this.onDragEffect(event.dataTransfer);
            if (foundWatcher !== undefined) {
                var equal = effect.length === foundWatcher.getEffectAllowed();
                for (var i = 0; equal && (i < effect.length); i++) {
                    equal = effect[i] === foundWatcher.getEffectAllowed()[i];
                }
                if (!equal) {
                    foundWatcher.release();
                    foundWatcher = undefined;
                }
            }
            if ((effect !== undefined) && (effect.length > 0) && (foundWatcher === undefined)) {
                var watcher_1 = event.dataTransfer.capture(this, effect);
                this.watchers.push(watcher_1);
                watcher_1.moved.connect(function () { return _this.onWatcherMove(watcher_1); });
                watcher_1.dropped.connect(function (e) { return _this.onWatcherDrop(e.target, e.effect, e.x, e.y); });
                watcher_1.leaved.connect(function () { return _this.onWatcherLeave(watcher_1); });
                event.stopImmediatePropagation();
                this.onWatcherEnter(watcher_1);
            }
            else if (foundWatcher !== undefined)
                event.stopImmediatePropagation();
        };
        DropAtBox.prototype.onDragEffectFunction = function (dataTransfer, func) {
            var position = this.findPosition(this.pointFromWindow(dataTransfer.getPosition()));
            return func(dataTransfer.getData(), position);
        };
        DropAtBox.prototype.onWatcherEnter = function (watcher) {
            var marker = new Ui.Rectangle({ margin: 0, width: 6, height: 6 });
            marker.fill = this.getStyleProperty('markerColor');
            marker.hide();
            this.fixed.append(marker, 0, 0);
            watcher["Ui.DropAtBox.marker"] = marker;
        };
        DropAtBox.prototype.onWatcherMove = function (watcher) {
            this.onDragEnter(watcher.getDataTransfer());
            var marker = watcher["Ui.DropAtBox.marker"];
            var position = this.findPosition(this.pointFromWindow(watcher.getPosition()));
            this.setMarkerPos(marker, position);
        };
        DropAtBox.prototype.onWatcherLeave = function (watcher) {
            var found = false;
            var i = 0;
            for (; !found && (i < this.watchers.length); i++) {
                found = (this.watchers[i] === watcher);
            }
            i--;
            if (found)
                this.watchers.splice(i, 1);
            if (this.watchers.length === 0)
                this.onDragLeave();
            var marker = watcher["Ui.DropAtBox.marker"];
            this.fixed.remove(marker);
        };
        DropAtBox.prototype.onWatcherDrop = function (watcher, effect, x, y) {
            var point = this.pointFromWindow(new Ui.Point(x, y));
            this.onDrop(watcher.getDataTransfer(), effect, point.getX(), point.getY());
        };
        DropAtBox.prototype.onDragEnter = function (dataTransfer) {
            this.dragentered.fire({ target: this, data: dataTransfer.getData() });
        };
        DropAtBox.prototype.onDragLeave = function () {
            this.dragleaved.fire({ target: this });
        };
        DropAtBox.prototype.onDrop = function (dataTransfer, dropEffect, x, y) {
            var done = false;
            var point = new Ui.Point(x, y);
            var position = this.findPosition(point);
            this.droppedat.fire({
                target: this,
                data: dataTransfer.getData(),
                effect: dropEffect,
                position: position,
                x: x, y: y
            });
            var data = dataTransfer.getData();
            if (data instanceof Ui.DragNativeData && data.hasFiles()) {
                var files = data.getFiles();
                for (var i = 0; i < files.length; i++)
                    this.droppedfileat.fire({
                        target: this, file: files[i], effect: dropEffect,
                        position: position, x: x, y: y
                    });
            }
        };
        DropAtBox.style = {
            markerColor: '#ff0076'
        };
        return DropAtBox;
    }(Ui.LBox));
    Ui.DropAtBox = DropAtBox;
    var FlowDropBox = (function (_super) {
        __extends(FlowDropBox, _super);
        function FlowDropBox(init) {
            var _this = _super.call(this, new Ui.Flow().assign({ spacing: 10 }), init) || this;
            _this.setMarkerOrientation('horizontal');
            if (init) {
                if (init.uniform !== undefined)
                    _this.uniform = init.uniform;
                if (init.spacing !== undefined)
                    _this.spacing = init.spacing;
            }
            return _this;
        }
        Object.defineProperty(FlowDropBox.prototype, "uniform", {
            set: function (uniform) {
                this.container.uniform = uniform;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FlowDropBox.prototype, "spacing", {
            set: function (spacing) {
                this.container.spacing = spacing;
            },
            enumerable: true,
            configurable: true
        });
        return FlowDropBox;
    }(DropAtBox));
    Ui.FlowDropBox = FlowDropBox;
    var SFlowDropBox = (function (_super) {
        __extends(SFlowDropBox, _super);
        function SFlowDropBox(init) {
            var _this = _super.call(this, new Ui.SFlow(), init) || this;
            _this.setMarkerOrientation('horizontal');
            if (init) {
                if (init.stretchMaxRatio !== undefined)
                    _this.stretchMaxRatio = init.stretchMaxRatio;
                if (init.uniform !== undefined)
                    _this.uniform = init.uniform;
                if (init.uniformRatio !== undefined)
                    _this.uniformRatio = init.uniformRatio;
                if (init.itemAlign !== undefined)
                    _this.itemAlign = init.itemAlign;
                if (init.spacing !== undefined)
                    _this.spacing = init.spacing;
            }
            return _this;
        }
        Object.defineProperty(SFlowDropBox.prototype, "stretchMaxRatio", {
            set: function (ratio) {
                this.container.stretchMaxRatio = ratio;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlowDropBox.prototype, "uniform", {
            set: function (uniform) {
                this.container.uniform = uniform;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlowDropBox.prototype, "uniformRatio", {
            set: function (uniformRatio) {
                this.container.uniformRatio = uniformRatio;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlowDropBox.prototype, "itemAlign", {
            set: function (align) {
                this.container.itemAlign = align;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SFlowDropBox.prototype, "spacing", {
            set: function (spacing) {
                this.container.spacing = spacing;
            },
            enumerable: true,
            configurable: true
        });
        return SFlowDropBox;
    }(DropAtBox));
    Ui.SFlowDropBox = SFlowDropBox;
    var VDropBox = (function (_super) {
        __extends(VDropBox, _super);
        function VDropBox(init) {
            var _this = _super.call(this, new Ui.VBox().assign({ spacing: init && init.spacing ? init.spacing : undefined }), init) || this;
            _this.setMarkerOrientation('vertical');
            return _this;
        }
        Object.defineProperty(VDropBox.prototype, "uniform", {
            set: function (uniform) {
                this.container.uniform = uniform;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VDropBox.prototype, "spacing", {
            set: function (spacing) {
                this.container.spacing = spacing;
            },
            enumerable: true,
            configurable: true
        });
        return VDropBox;
    }(DropAtBox));
    Ui.VDropBox = VDropBox;
    var HDropBox = (function (_super) {
        __extends(HDropBox, _super);
        function HDropBox(init) {
            var _this = _super.call(this, new Ui.HBox(), init) || this;
            _this.setMarkerOrientation('horizontal');
            return _this;
        }
        Object.defineProperty(HDropBox.prototype, "uniform", {
            set: function (uniform) {
                this.container.uniform = uniform;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HDropBox.prototype, "spacing", {
            set: function (spacing) {
                this.container.spacing = spacing;
            },
            enumerable: true,
            configurable: true
        });
        return HDropBox;
    }(DropAtBox));
    Ui.HDropBox = HDropBox;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var SegmentBar = (function (_super) {
        __extends(SegmentBar, _super);
        function SegmentBar(init) {
            var _this = _super.call(this, init) || this;
            _this._field = 'text';
            _this._orientation = 'horizontal';
            _this.changed = new Core.Events();
            _this.onSegmentSelect = function (e) {
                _this.current = e.target;
                _this.onStyleChange();
                _this.changed.fire({ target: _this, value: e.target.data });
            };
            _this.focusable = true;
            _this.border = new Ui.Frame();
            _this.append(_this.border);
            _this.box = new Ui.Box({ uniform: true, margin: 1, spacing: 1, orientation: _this._orientation });
            _this.append(_this.box);
            _this.focused.connect(function () { return _this.onStyleChange(); });
            _this.blurred.connect(function () { return _this.onStyleChange(); });
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            if (init) {
                if (init.orientation !== undefined)
                    _this.orientation = init.orientation;
                if (init.field !== undefined)
                    _this.field = init.field;
                if (init.data !== undefined)
                    _this.data = init.data;
                if (init.currentPosition !== undefined)
                    _this.currentPosition = init.currentPosition;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
            }
            return _this;
        }
        Object.defineProperty(SegmentBar.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentBar.prototype, "orientation", {
            set: function (orientation) {
                this._orientation = orientation;
                this.box.orientation = orientation;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentBar.prototype, "field", {
            set: function (field) {
                this._field = field;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentBar.prototype, "data", {
            set: function (data) {
                var pos = this.currentPosition;
                while (this.box.firstChild !== undefined) {
                    this.box.firstChild.pressed.disconnect(this.onSegmentSelect);
                    this.box.remove(this.box.firstChild);
                }
                this._data = data;
                for (var i = 0; i < data.length; i++) {
                    var mode = void 0;
                    if (this._orientation === 'horizontal')
                        mode = (i === 0) ? 'left' : (i === data.length - 1) ? 'right' : 'middle';
                    else
                        mode = (i === 0) ? 'top' : (i === data.length - 1) ? 'bottom' : 'middle';
                    var segment = new Ui.SegmentButton({ data: data[i], text: data[i][this._field], mode: mode });
                    this.box.append(segment, true);
                    segment.pressed.connect(this.onSegmentSelect);
                }
                this.currentPosition = Math.max(0, Math.min(pos, this.box.children.length - 1));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentBar.prototype, "currentPosition", {
            get: function () {
                for (var i = 0; i < this.box.children.length; i++) {
                    if (this.box.children[i] === this.current)
                        return i;
                }
            },
            set: function (position) {
                if ((position >= 0) && (position < this.box.children.length)) {
                    this.current = this.box.children[position];
                    this.onSegmentSelect({ target: this.current });
                }
            },
            enumerable: true,
            configurable: true
        });
        SegmentBar.prototype.next = function () {
            for (var i = 0; i < this.box.children.length; i++) {
                if (this.box.children[i] === this.current) {
                    this.currentPosition = i + 1;
                    break;
                }
            }
        };
        SegmentBar.prototype.previous = function () {
            for (var i = 0; i < this.box.children.length; i++) {
                if (this.box.children[i] === this.current) {
                    this.currentPosition = i - 1;
                    break;
                }
            }
        };
        SegmentBar.prototype.onKeyDown = function (event) {
            if (this.isDisabled)
                return;
            var key = event.which;
            if ((key == 37) || (key == 39)) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (key == 37)
                this.previous();
            else if (key == 39)
                this.next();
        };
        SegmentBar.prototype.onStyleChange = function () {
            var spacing = this.getStyleProperty('spacing');
            var padding = this.getStyleProperty('padding');
            var radius = this.getStyleProperty('radius');
            var borderWidth = this.getStyleProperty('borderWidth');
            this.border.radius = radius;
            this.border.frameWidth = borderWidth;
            var background = this.getStyleProperty('background');
            var backgroundBorder = this.getStyleProperty('backgroundBorder');
            var backgroundMode = this.getStyleProperty('backgroundMode');
            var backgroundSize = this.getStyleProperty('backgroundSize');
            var foreground = this.getStyleProperty('foreground');
            if (this.hasFocus && !this.getIsMouseFocus()) {
                background = this.getStyleProperty('focusBackground');
                backgroundBorder = this.getStyleProperty('focusBackgroundBorder');
                foreground = this.getStyleProperty('focusForeground');
            }
            var activeBackground = this.getStyleProperty('activeBackground');
            var activeForeground = this.getStyleProperty('activeForeground');
            var textHeight = this.getStyleProperty('textHeight');
            var textTransform = this.getStyleProperty('textTransform');
            this.box.margin = borderWidth;
            this.border.fill = backgroundBorder;
            for (var i = 0; i < this.box.children.length; i++) {
                var child = this.box.children[i];
                child.radius = Math.max(0, radius - borderWidth);
                child.spacing = padding - borderWidth;
                child.textHeight = textHeight;
                child.textTransform = textTransform;
                if (this.current === child) {
                    child.background = activeBackground;
                    child.foreground = activeForeground;
                }
                else {
                    child.background = background;
                    child.foreground = foreground;
                }
                child.backgroundMode = backgroundMode;
                if (backgroundSize != undefined) {
                    if (backgroundMode == 'top' || backgroundMode == 'bottom')
                        child.backgroundHeight = backgroundSize;
                    if (backgroundMode == 'left' || backgroundMode == 'right')
                        child.backgroundWidth = backgroundSize;
                }
            }
        };
        SegmentBar.style = {
            borderWidth: 1,
            background: 'rgba(240,240,240,1)',
            backgroundBorder: 'rgba(102,102,102,1)',
            backgroundMode: 'stretch',
            backgroundSize: 5,
            foreground: '#444444',
            focusBackground: 'rgba(240,240,240,1)',
            focusBackgroundBorder: '#07a0e5',
            focusForeground: '#07a0e5',
            activeBackground: '#07a0e5',
            activeForeground: 'rgba(250,250,250,1)',
            radius: 3,
            textHeight: 26,
            spacing: 10,
            padding: 7,
            textTransform: 'uppercase'
        };
        return SegmentBar;
    }(Ui.LBox));
    Ui.SegmentBar = SegmentBar;
    var SegmentButton = (function (_super) {
        __extends(SegmentButton, _super);
        function SegmentButton(init) {
            var _this = _super.call(this, init) || this;
            _this._mode = undefined;
            _this._radius = 3;
            _this.focusable = false;
            _this.bg = new Ui.Rectangle();
            _this.append(_this.bg);
            _this.textBox = new Ui.LBox();
            _this.append(_this.textBox);
            _this.label = new Ui.CompactLabel({ verticalAlign: 'center', whiteSpace: 'nowrap', textAlign: 'center' });
            _this.textBox.content = _this.label;
            if (init) {
                if (init.textTransform !== undefined)
                    _this.textTransform = init.textTransform;
                if (init.foreground !== undefined)
                    _this.foreground = init.foreground;
                if (init.data !== undefined)
                    _this.data = init.data;
                if (init.text !== undefined)
                    _this.text = init.text;
                if (init.textHeight !== undefined)
                    _this.textHeight = init.textHeight;
                if (init.mode !== undefined)
                    _this.mode = init.mode;
                if (init.radius !== undefined)
                    _this.radius = init.radius;
                if (init.spacing !== undefined)
                    _this.spacing = init.spacing;
                if (init.background !== undefined)
                    _this.background = init.background;
            }
            return _this;
        }
        Object.defineProperty(SegmentButton.prototype, "textTransform", {
            set: function (textTransform) {
                this.label.textTransform = textTransform;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "foreground", {
            set: function (color) {
                this.label.color = Ui.Color.create(color);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (data) {
                this._data = data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "text", {
            set: function (text) {
                this.label.text = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "textHeight", {
            set: function (height) {
                this.textBox.height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "mode", {
            set: function (mode) {
                this._mode = mode;
                if (mode == 'left') {
                    this.bg.radiusTopLeft = this._radius;
                    this.bg.radiusBottomLeft = this._radius;
                    this.bg.radiusTopRight = 0;
                    this.bg.radiusBottomRight = 0;
                }
                else if (mode == 'right') {
                    this.bg.radiusTopLeft = 0;
                    this.bg.radiusBottomLeft = 0;
                    this.bg.radiusTopRight = this._radius;
                    this.bg.radiusBottomRight = this._radius;
                }
                else if (mode == 'top') {
                    this.bg.radiusTopLeft = this._radius;
                    this.bg.radiusBottomLeft = 0;
                    this.bg.radiusTopRight = this._radius;
                    this.bg.radiusBottomRight = 0;
                }
                else if (mode == 'bottom') {
                    this.bg.radiusTopLeft = 0;
                    this.bg.radiusBottomLeft = this._radius;
                    this.bg.radiusTopRight = 0;
                    this.bg.radiusBottomRight = this._radius;
                }
                else {
                    this.bg.radiusTopLeft = 0;
                    this.bg.radiusBottomLeft = 0;
                    this.bg.radiusTopRight = 0;
                    this.bg.radiusBottomRight = 0;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "radius", {
            set: function (radius) {
                this._radius = radius;
                this.mode = this._mode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "spacing", {
            set: function (spacing) {
                this.textBox.margin = spacing;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "background", {
            set: function (color) {
                this.bg.fill = color;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "backgroundMode", {
            set: function (mode) {
                if (mode == 'top' || mode == 'bottom') {
                    this.bg.horizontalAlign = 'stretch';
                    this.bg.verticalAlign = mode;
                }
                else if (mode == 'left' || mode == 'right') {
                    this.bg.horizontalAlign = mode;
                    this.bg.verticalAlign = 'stretch';
                }
                else {
                    this.bg.horizontalAlign = 'stretch';
                    this.bg.verticalAlign = 'stretch';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "backgroundWidth", {
            set: function (width) {
                this.bg.width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SegmentButton.prototype, "backgroundHeight", {
            set: function (height) {
                this.bg.height = height;
            },
            enumerable: true,
            configurable: true
        });
        SegmentButton.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            this.bg.opacity = 0.2;
        };
        SegmentButton.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            this.bg.opacity = 1;
        };
        return SegmentButton;
    }(Ui.Pressable));
    Ui.SegmentButton = SegmentButton;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Locator = (function (_super) {
        __extends(Locator, _super);
        function Locator(init) {
            var _this = _super.call(this, init) || this;
            _this.changed = new Core.Events();
            _this.focused.connect(function () { return _this.updateColors(); });
            _this.blurred.connect(function () { return _this.updateColors(); });
            if (init) {
                if (init.path !== undefined)
                    _this.path = init.path;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
            }
            return _this;
        }
        Object.defineProperty(Locator.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Locator.prototype, "path", {
            get: function () {
                return this._path;
            },
            set: function (path) {
                var _this = this;
                var spacing = this.getStyleProperty('spacing');
                var radius = this.getStyleProperty('radius');
                var padding = this.getStyleProperty('padding');
                this._path = path;
                while (this.children.length > 0)
                    this.removeChild(this.children[0]);
                this.border = new Ui.Rectangle({ fill: '#888888', radius: radius });
                this.appendChild(this.border);
                this.backgrounds = [];
                this.foregrounds = [];
                if (path == '/') {
                    var bg = new Ui.Rectangle({ radius: radius - 1 });
                    this.backgrounds.push(bg);
                    this.appendChild(bg);
                    var fg_1 = new Ui.Pressable({
                        padding: padding,
                        onpressed: function (e) { return _this.onPathPress(fg_1); },
                        ondowned: function (e) { return _this.onPathDown(fg_1); },
                        onupped: function (e) { return _this.onPathUp(fg_1); },
                        onfocused: function (e) { return _this.onPathFocus(fg_1); },
                        onblurred: function (e) { return _this.onPathBlur(fg_1); }
                    });
                    fg_1.locatorPath = '/';
                    fg_1.locatorPos = 0;
                    var home = new Ui.Icon({
                        icon: 'home', width: 24, height: 24,
                        verticalAlign: 'center', horizontalAlign: 'center'
                    });
                    fg_1.appendChild(home);
                    this.foregrounds.push(fg_1);
                    this.appendChild(fg_1);
                }
                else {
                    var paths = path.split('/');
                    var cleanPaths = [];
                    for (var i = 0; i < paths.length; i++) {
                        if (paths[i] !== '')
                            cleanPaths.push(paths[i]);
                    }
                    paths = cleanPaths;
                    var bg = new LocatorRightArrow({ arrowLength: spacing, radius: radius - 1 });
                    this.backgrounds.push(bg);
                    this.appendChild(bg);
                    for (var i = 0; i < paths.length; i++) {
                        var bg_1 = void 0;
                        if (i == paths.length - 1)
                            bg_1 = new LocatorLeftArrow({ arrowLength: spacing, radius: radius - 1 });
                        else
                            bg_1 = new LocatorLeftRightArrow({ arrowLength: spacing });
                        this.backgrounds.push(bg_1);
                        this.appendChild(bg_1);
                    }
                    var currentPath = '/';
                    var fg_2 = new Ui.Pressable({
                        padding: padding,
                        onpressed: function (e) { return _this.onPathPress(fg_2); },
                        ondowned: function (e) { return _this.onPathDown(fg_2); },
                        onupped: function (e) { return _this.onPathUp(fg_2); },
                        onfocused: function (e) { return _this.onPathFocus(fg_2); },
                        onblurred: function (e) { return _this.onPathBlur(fg_2); }
                    });
                    var home = new Ui.Icon({ icon: 'home', width: 24, height: 24 });
                    home.verticalAlign = 'center';
                    home.horizontalAlign = 'center';
                    fg_2.locatorPos = 0;
                    fg_2.locatorPath = '/';
                    fg_2.appendChild(home);
                    this.foregrounds.push(fg_2);
                    this.appendChild(fg_2);
                    var _loop_9 = function (i) {
                        currentPath += paths[i];
                        var fg_3 = new Ui.Pressable({
                            padding: padding,
                            onpressed: function (e) { return _this.onPathPress(fg_3); },
                            ondowned: function (e) { return _this.onPathDown(fg_3); },
                            onupped: function (e) { return _this.onPathUp(fg_3); },
                            onfocused: function (e) { return _this.onPathFocus(fg_3); },
                            onblurred: function (e) { return _this.onPathBlur(fg_3); }
                        });
                        fg_3.locatorPos = i + 1;
                        fg_3.locatorPath = currentPath;
                        fg_3.appendChild(new Ui.Label({ text: paths[i], verticalAlign: 'center' }));
                        this_9.foregrounds.push(fg_3);
                        this_9.appendChild(fg_3);
                        currentPath += '/';
                    };
                    var this_9 = this;
                    for (var i = 0; i < paths.length; i++) {
                        _loop_9(i);
                    }
                }
                this.updateColors();
            },
            enumerable: true,
            configurable: true
        });
        Locator.prototype.getBackground = function () {
            return Ui.Color.create(this.getStyleProperty('background'));
        };
        Locator.prototype.getLightColor = function () {
            var yuv = this.getBackground().getYuv();
            var deltaY = 0;
            if (yuv.y < 0.4)
                return Ui.Color.createFromYuv(yuv.y - 0.15 + deltaY, yuv.u, yuv.v);
            else
                return Ui.Color.createFromYuv(yuv.y + 0.15 + deltaY, yuv.u, yuv.v);
        };
        Locator.prototype.getBackgroundBorder = function () {
            var color;
            if ((this.focusedPart !== undefined) && !this.focusedPart.getIsMouseFocus())
                color = Ui.Color.create(this.getStyleProperty('focusBackgroundBorder'));
            else
                color = Ui.Color.create(this.getStyleProperty('backgroundBorder'));
            var yuv = color.getYuva();
            var deltaY = 0;
            return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v, yuv.a);
        };
        Locator.prototype.getDownColor = function () {
            var yuv = this.getBackground().getYuv();
            var deltaY = -0.20;
            if (yuv.y < 0.4)
                return Ui.Color.createFromYuv(yuv.y - 0.15 + deltaY, yuv.u, yuv.v);
            else
                return Ui.Color.createFromYuv(yuv.y + 0.15 + deltaY, yuv.u, yuv.v);
        };
        Locator.prototype.onPathPress = function (pathItem) {
            this.changed.fire({ target: this, path: pathItem.locatorPath, position: pathItem.locatorPos });
        };
        Locator.prototype.onPathDown = function (pathItem) {
            this.backgrounds[pathItem.locatorPos].fill = this.getDownColor();
        };
        Locator.prototype.onPathUp = function (pathItem) {
            this.backgrounds[pathItem.locatorPos].fill = this.getLightColor();
        };
        Locator.prototype.onPathFocus = function (pressable) {
            this.focusedPart = pressable;
            this.updateColors();
        };
        Locator.prototype.onPathBlur = function (pressable) {
            this.focusedPart = undefined;
            this.updateColors();
        };
        Locator.prototype.updateColors = function () {
            var backgroundColor = this.getBackground();
            var focusBackgroundColor = Ui.Color.create(this.getStyleProperty('focusBackground'));
            this.border.fill = this.getBackgroundBorder();
            var focusPos = -1;
            if (this.focusedPart !== undefined) {
                for (var i = 0; (focusPos === -1) && (i < this.foregrounds.length); i++)
                    if (this.foregrounds[i] === this.focusedPart)
                        focusPos = i;
            }
            for (var i = 0; i < this.backgrounds.length; i++) {
                if (i === focusPos)
                    this.backgrounds[i].fill = focusBackgroundColor;
                else
                    this.backgrounds[i].fill = backgroundColor;
            }
        };
        Locator.prototype.measureCore = function (width, height) {
            console.log('locator.measureCore ');
            console.log(this.foregrounds);
            if (this.foregrounds.length === 0)
                return { width: 0, height: 0 };
            var i;
            for (i = 0; i < this.foregrounds.length; i++)
                this.foregrounds[i].measure(0, 0);
            for (i = 0; i < this.backgrounds.length; i++)
                this.backgrounds[i].measure(0, 0);
            this.border.measure(0, 0);
            if (this.foregrounds.length == 1)
                return { width: this.foregrounds[0].measureWidth + 2, height: this.foregrounds[0].measureHeight + 2 };
            else {
                var minWidth = 0;
                var minHeight = 0;
                for (i = 0; i < this.foregrounds.length; i++) {
                    var child = this.foregrounds[i];
                    if (child.measureHeight > minHeight)
                        minHeight = child.measureHeight;
                    minWidth += child.measureWidth;
                }
                var spacing = this.getStyleProperty('spacing');
                var borderWidth = this.getStyleProperty('borderWidth');
                minWidth += (this.foregrounds.length - 1) * (spacing + borderWidth);
                return { width: minWidth + (2 * borderWidth), height: minHeight + (2 * borderWidth) };
            }
        };
        Locator.prototype.arrangeCore = function (width, height) {
            var borderWidth = this.getStyleProperty('borderWidth');
            if (this.foregrounds.length == 1) {
                this.foregrounds[0].arrange(borderWidth, borderWidth, width - 2 * borderWidth, height - 2 * borderWidth);
                this.backgrounds[0].arrange(borderWidth, borderWidth, width - 2 * borderWidth, height - 2 * borderWidth);
                this.border.arrange(0, 0, width, height);
                return;
            }
            var spacing = this.getStyleProperty('spacing');
            var x = borderWidth;
            for (var i = 0; i < this.foregrounds.length; i++) {
                var bg = this.backgrounds[i];
                var fg = this.foregrounds[i];
                var fgWidth = fg.measureWidth;
                fg.arrange(x + 1, 0 + borderWidth, fgWidth, height - 2 * borderWidth);
                if (i === 0)
                    bg.arrange(x, 0 + borderWidth, fgWidth + spacing, height - 2 * borderWidth);
                else if (i == this.foregrounds.length - 1)
                    bg.arrange(x - spacing, 0 + borderWidth, fgWidth + spacing, height - 2 * borderWidth);
                else
                    bg.arrange(x - spacing, 0 + borderWidth, fgWidth + spacing * 2, height - 2 * borderWidth);
                x += fgWidth + spacing + borderWidth;
            }
            this.border.arrange(0, 0, width, height);
        };
        Locator.prototype.onStyleChange = function () {
            var spacing = this.getStyleProperty('spacing');
            var padding = this.getStyleProperty('padding');
            var radius = this.getStyleProperty('radius');
            var borderWidth = this.getStyleProperty('borderWidth');
            for (var i = 0; i < this.backgrounds.length; i++) {
                var bg = this.backgrounds[i];
                if ('arrowLength' in bg)
                    bg.arrowLength = spacing;
                bg.radius = radius - borderWidth;
            }
            for (var i = 0; i < this.foregrounds.length; i++)
                this.foregrounds[i].padding = padding;
            this.border.radius = radius;
            this.updateColors();
        };
        Locator.prototype.onDisable = function () {
            _super.prototype.onDisable.call(this);
            for (var i = 0; i < this.foregrounds.length; i++)
                this.foregrounds[i].opacity = 0.4;
        };
        Locator.prototype.onEnable = function () {
            _super.prototype.onEnable.call(this);
            for (var i = 0; i < this.foregrounds.length; i++)
                this.foregrounds[i].opacity = 1;
        };
        Locator.style = {
            background: 'rgba(250,250,250,1)',
            backgroundBorder: 'rgba(140,140,140,1)',
            focusBackground: '#07a0e5',
            focusBackgroundBorder: Ui.Color.createFromRgb(0.04, 0.43, 0.5),
            focusActiveBackgroundBorder: Ui.Color.createFromRgb(0.04, 0.43, 0.5),
            radius: 3,
            spacing: 10,
            padding: 8,
            borderWidth: 1
        };
        return Locator;
    }(Ui.Container));
    Ui.Locator = Locator;
    var LocatorRightArrow = (function (_super) {
        __extends(LocatorRightArrow, _super);
        function LocatorRightArrow(config) {
            var _this = _super.call(this) || this;
            _this._radius = 8;
            _this._length = 10;
            _this._fill = new Ui.Color();
            return _this;
        }
        Object.defineProperty(LocatorRightArrow.prototype, "radius", {
            set: function (radius) {
                this._radius = radius;
                this.invalidateArrange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LocatorRightArrow.prototype, "arrowLength", {
            set: function (length) {
                this._length = length;
                this.invalidateArrange();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LocatorRightArrow.prototype, "fill", {
            set: function (color) {
                this._fill = Ui.Color.create(color);
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        LocatorRightArrow.prototype.updateCanvas = function (ctx) {
            var width = this.layoutWidth;
            var height = this.layoutHeight;
            var v1 = width - this._length;
            var v2 = height / 2;
            var v3 = height - this._radius;
            ctx.svgPath('M' + this._radius + ',0 L' + v1 + ',0 L' + width + ',' + v2 + ' L' + v1 + ',' + height + ' L' + this._radius + ',' + height + ' Q0,' + height + ' 0,' + v3 + ' L0,' + this._radius + ' Q0,0 ' + this._radius + ',0 z');
            ctx.fillStyle = this._fill.getCssRgba();
            ctx.fill();
        };
        return LocatorRightArrow;
    }(Ui.CanvasElement));
    Ui.LocatorRightArrow = LocatorRightArrow;
    var LocatorLeftArrow = (function (_super) {
        __extends(LocatorLeftArrow, _super);
        function LocatorLeftArrow(init) {
            var _this = _super.call(this, init) || this;
            _this._radius = 8;
            _this._length = 10;
            if (init) {
                if (init.radius !== undefined)
                    _this.radius = init.radius;
                if (init.arrowLength !== undefined)
                    _this.arrowLength = init.arrowLength;
            }
            return _this;
        }
        Object.defineProperty(LocatorLeftArrow.prototype, "radius", {
            set: function (radius) {
                this._radius = radius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LocatorLeftArrow.prototype, "arrowLength", {
            set: function (length) {
                this._length = length;
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        LocatorLeftArrow.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, width, height);
            var v2 = width - this._radius;
            var v3 = height - this._radius;
            var v4 = height / 2;
            this.path = 'M0,0 L' + v2 + ',0 Q' + width + ',0 ' + width + ',' + this._radius + ' L' + width + ',' + v3 + ' Q' + width + ',' + height + ' ' + v2 + ',' + height + ' L0,' + height + ' L' + this._length + ',' + v4 + ' z';
        };
        return LocatorLeftArrow;
    }(Ui.Shape));
    Ui.LocatorLeftArrow = LocatorLeftArrow;
    var LocatorLeftRightArrow = (function (_super) {
        __extends(LocatorLeftRightArrow, _super);
        function LocatorLeftRightArrow(init) {
            var _this = _super.call(this, init) || this;
            _this._length = 10;
            if (init) {
                if (init.radius !== undefined)
                    _this.radius = init.radius;
                if (init.arrowLength !== undefined)
                    _this.arrowLength = init.arrowLength;
            }
            return _this;
        }
        Object.defineProperty(LocatorLeftRightArrow.prototype, "radius", {
            set: function (radius) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LocatorLeftRightArrow.prototype, "arrowLength", {
            set: function (length) {
                this._length = length;
                this.invalidateDraw();
            },
            enumerable: true,
            configurable: true
        });
        LocatorLeftRightArrow.prototype.arrangeCore = function (width, height) {
            _super.prototype.arrangeCore.call(this, width, height);
            var v1 = width - this._length;
            var v2 = height / 2;
            this.path = 'M0,0 L' + v1 + ',0 L' + width + ',' + v2 + ' L' + v1 + ',' + height + ' L0,' + height + ' L' + this._length + ',' + v2 + ' z';
        };
        return LocatorLeftRightArrow;
    }(Ui.Shape));
    Ui.LocatorLeftRightArrow = LocatorLeftRightArrow;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Carouselable = (function (_super) {
        __extends(Carouselable, _super);
        function Carouselable(init) {
            var _this = _super.call(this, init) || this;
            _this.pos = 0;
            _this.speed = 1;
            _this._bufferingSize = 1;
            _this.changed = new Core.Events();
            _this.clipToBounds = true;
            _this.focusable = true;
            _this.moveVertical = false;
            _this.items = [];
            _this.activeItems = [];
            _this._ease = new Anim.PowerEase({ mode: 'out' });
            _this.downed.connect(function (e) { return _this.onCarouselableDown(); });
            _this.upped.connect(function (e) { return _this.onCarouselableUp(e.target, e.speedX, e.speedY, e.deltaX, e.deltaY, e.cumulMove, e.abort); });
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            _this.wheelchanged.connect(function (e) { return _this.onWheel(e); });
            if (init) {
                if (init.autoPlay)
                    _this.autoPlay = init.autoPlay;
                if (init.bufferingSize)
                    _this.bufferingSize = init.bufferingSize;
                if (init.content)
                    _this.content = init.content;
                if (init.ease)
                    _this.ease = init.ease;
            }
            return _this;
        }
        Object.defineProperty(Carouselable.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carouselable.prototype, "autoPlay", {
            set: function (delay) {
                if (this.autoPlayDelay !== delay) {
                    if (this.autoPlayTask !== undefined)
                        this.autoPlayTask.abort();
                    this.autoPlayTask = undefined;
                    this.autoPlayDelay = delay;
                    this.startAutoPlay();
                }
            },
            enumerable: true,
            configurable: true
        });
        Carouselable.prototype.stopAutoPlay = function () {
            if (this.autoPlayTask !== undefined) {
                this.autoPlayTask.abort();
                this.autoPlayTask = undefined;
            }
        };
        Carouselable.prototype.startAutoPlay = function () {
            var _this = this;
            if (this.autoPlayDelay !== undefined) {
                this.autoPlayTask = new Core.DelayedTask(this.autoPlayDelay, function () { return _this.onAutoPlayTimeout(); });
            }
        };
        Carouselable.prototype.onAutoPlayTimeout = function () {
            if (this.currentPosition >= this.items.length - 1)
                this.setCurrentAt(0);
            else
                this.next();
            this.startAutoPlay();
        };
        Object.defineProperty(Carouselable.prototype, "bufferingSize", {
            get: function () {
                return this._bufferingSize;
            },
            set: function (size) {
                if (this._bufferingSize != size) {
                    this._bufferingSize = size;
                    this.updateItems();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carouselable.prototype, "logicalChildren", {
            get: function () {
                return this.items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carouselable.prototype, "currentPosition", {
            get: function () {
                if (this.alignClock !== undefined)
                    return this.animNext;
                else
                    return this.pos;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carouselable.prototype, "current", {
            get: function () {
                return this.items[this.currentPosition];
            },
            set: function (value) {
                this.setCurrent(value);
            },
            enumerable: true,
            configurable: true
        });
        Carouselable.prototype.setCurrentAt = function (position, noAnimation) {
            if (noAnimation === void 0) { noAnimation = false; }
            position = Math.min(2 * (this.items.length - 1), Math.max(0, position));
            if (noAnimation) {
                this.pos = position;
                this.setPosition(-this.pos * this.layoutWidth, undefined);
                this.onChange();
            }
            else
                this.startAnimation(2 * (this.pos - position), position);
        };
        Carouselable.prototype.setCurrent = function (current, noAnimation) {
            if (noAnimation === void 0) { noAnimation = false; }
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i] == current) {
                    this.setCurrentAt(i, noAnimation);
                    break;
                }
            }
        };
        Carouselable.prototype.next = function () {
            if (this.alignClock === undefined) {
                if (this.pos < this.items.length - 1)
                    this.startAnimation(-2, this.pos + 1);
            }
            else {
                if (this.animNext > this.pos)
                    this.startAnimation(-2 * (this.animNext + 1 - Math.floor(this.pos)), Math.min(this.animNext + 1, this.items.length - 1));
                else
                    this.startAnimation(-2, Math.min(Math.ceil(this.pos), this.items.length - 1));
            }
        };
        Carouselable.prototype.previous = function () {
            if (this.alignClock === undefined) {
                if (this.pos > 0)
                    this.startAnimation(2, this.pos - 1);
            }
            else {
                if (this.animNext < this.pos)
                    this.startAnimation(2 * (Math.floor(this.pos) - (this.animNext - 1)), Math.max(this.animNext - 1, 0));
                else
                    this.startAnimation(2, Math.floor(this.pos));
            }
        };
        Object.defineProperty(Carouselable.prototype, "ease", {
            get: function () {
                return this._ease;
            },
            set: function (ease) {
                this._ease = Anim.EasingFunction.create(ease);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carouselable.prototype, "content", {
            set: function (value) {
                while (this.logicalChildren.length > 0)
                    this.remove(this.logicalChildren[0]);
                for (var _i = 0, value_4 = value; _i < value_4.length; _i++) {
                    var el = value_4[_i];
                    this.append(el);
                }
            },
            enumerable: true,
            configurable: true
        });
        Carouselable.prototype.append = function (child) {
            this.items.push(child);
            this.onChange();
        };
        Carouselable.prototype.remove = function (child) {
            var i = 0;
            while ((i < this.items.length) && (this.items[i] !== child)) {
                i++;
            }
            if (i < this.items.length) {
                this.items.splice(i, 1);
                if ((this.pos < 0) || (this.pos > this.items.length - 1))
                    this.pos = Math.max(0, Math.min(this.pos, this.items.length - 1));
                if (this.alignClock !== undefined)
                    this.animNext = Math.max(0, Math.min(this.animNext, this.items.length - 1));
                this.setPosition(-this.pos * this.layoutWidth, undefined, true);
                this.onChange();
            }
        };
        Carouselable.prototype.insertAt = function (child, position) {
            if (position < 0)
                position = this.items.length + position;
            if (position < 0)
                position = 0;
            if (position >= this.items.length)
                position = this.items.length;
            this.items.splice(position, 0, child);
            this.onChange();
        };
        Carouselable.prototype.moveAt = function (child, position) {
            if (position < 0)
                position = this.items.length + position;
            if (position < 0)
                position = 0;
            if (position >= this.items.length)
                position = this.items.length;
            var i = 0;
            while ((i < this.items.length) && (this.items[i] != child)) {
                i++;
            }
            if (i < this.items.length) {
                this.items.splice(i, 1);
                this.items.splice(position, 0, child);
            }
            this.onChange();
        };
        Carouselable.prototype.onKeyDown = function (event) {
            if (this.isDisabled)
                return;
            var key = event.which;
            if ((key == 37) || (key == 39)) {
                event.stopPropagation();
                event.preventDefault();
                if (key == 37)
                    this.previous();
                else if (key == 39)
                    this.next();
            }
        };
        Carouselable.prototype.onWheel = function (event) {
            if (this.isDisabled)
                return;
            if (event.deltaX !== 0) {
                event.stopPropagation();
                if (event.deltaX < 0)
                    this.previous();
                else
                    this.next();
            }
        };
        Carouselable.prototype.onCarouselableDown = function () {
            this.stopAutoPlay();
            this.stopAnimation();
        };
        Carouselable.prototype.onCarouselableUp = function (el, speedX, speedY, deltaX, deltaY, cumulMove, abort) {
            var mod;
            if (abort === true) {
                mod = this.pos % 1;
                if (mod > 0.5)
                    speedX = -400;
                else
                    speedX = 400;
            }
            else {
                if (Math.abs(speedX) < 50) {
                    if ((deltaX > 0.2 * this.layoutWidth) || (Math.abs(deltaX) > 100)) {
                        if (deltaX < 0)
                            speedX = -400;
                        else
                            speedX = 400;
                    }
                    else {
                        mod = this.pos % 1;
                        if (mod > 0.5)
                            speedX = -400;
                        else
                            speedX = 400;
                    }
                }
            }
            if (Math.abs(speedX) < 800) {
                if (speedX < 0)
                    speedX = -800;
                else
                    speedX = 800;
            }
            if (speedX !== 0)
                this.startAnimation(speedX / this.layoutWidth);
            this.startAutoPlay();
        };
        Carouselable.prototype.onChange = function () {
            this.loadItems();
            this.updateItems();
            var current = this.current;
            if (current !== undefined)
                current.enable();
            var currentPosition = this.currentPosition;
            if ((this.lastPosition === undefined) || (this.lastPosition !== currentPosition)) {
                if ((this.lastPosition !== undefined) && (this.items[this.lastPosition] !== undefined))
                    this.items[this.lastPosition].disable();
                this.lastPosition = currentPosition;
                this.changed.fire({ target: this, position: currentPosition });
            }
        };
        Carouselable.prototype.onAlignTick = function (clock, progress, delta) {
            if (delta === 0)
                return;
            var relprogress = -(clock.time * this.speed) / (this.animNext - this.animStart);
            if (relprogress >= 1) {
                this.alignClock.stop();
                this.alignClock = undefined;
                relprogress = 1;
            }
            relprogress = this._ease.ease(relprogress);
            this.pos = (this.animStart + relprogress * (this.animNext - this.animStart));
            this.setPosition(-this.pos * this.layoutWidth, undefined);
            if (this.alignClock === undefined)
                this.onChange();
        };
        Carouselable.prototype.startAnimation = function (speed, next) {
            var _this = this;
            this.stopAnimation();
            this.speed = speed;
            this.animStart = this.pos;
            if (next === undefined) {
                if (this.speed < 0)
                    this.animNext = Math.ceil(this.animStart);
                else
                    this.animNext = Math.floor(this.animStart);
            }
            else
                this.animNext = next;
            if (this.animStart !== this.animNext) {
                this.alignClock = new Anim.Clock({
                    duration: 'forever', target: this,
                    ontimeupdate: function (e) { return _this.onAlignTick(e.target, e.progress, e.deltaTick); }
                });
                this.alignClock.begin();
            }
        };
        Carouselable.prototype.stopAnimation = function () {
            if (this.alignClock !== undefined) {
                this.alignClock.stop();
                this.alignClock = undefined;
            }
        };
        Carouselable.prototype.loadItems = function () {
            if (!this.isLoaded)
                return;
            var i;
            for (i = 0; i < this.activeItems.length; i++)
                this.activeItems[i].carouselableSeen = undefined;
            var newItems = [];
            for (i = Math.max(0, Math.floor(this.pos - this._bufferingSize)); i < Math.min(this.items.length, Math.floor(this.pos + 1 + this._bufferingSize)); i++) {
                var item = this.items[i];
                var active = false;
                for (var i2 = 0; !active && (i2 < this.activeItems.length); i2++) {
                    if (this.activeItems[i2] === item) {
                        active = true;
                        this.activeItems[i2].carouselableSeen = true;
                    }
                }
                newItems.push(item);
                if (!active) {
                    item.disable();
                    this.appendChild(item);
                }
            }
            for (i = 0; i < this.activeItems.length; i++) {
                if (!this.activeItems[i].carouselableSeen)
                    this.removeChild(this.activeItems[i]);
            }
            this.activeItems = newItems;
        };
        Carouselable.prototype.updateItems = function () {
            if (!this.isLoaded)
                return;
            var w = this.layoutWidth;
            var h = this.layoutHeight;
            for (var i = 0; i < this.activeItems.length; i++) {
                var item = this.activeItems[i];
                var ipos = -1;
                for (ipos = 0; (ipos < this.items.length) && (this.items[ipos] !== item); ipos++) { }
                if (ipos < this.items.length) {
                    item.measure(w, h);
                    item.arrange(0, 0, w, h);
                    item.transform = Ui.Matrix.createTranslate((ipos - this.pos) * w, 0);
                }
            }
        };
        Carouselable.prototype.onLoad = function () {
            _super.prototype.onLoad.call(this);
            this.loadItems();
            this.updateItems();
            this.onChange();
        };
        Carouselable.prototype.onMove = function (x, y) {
            if (this.layoutWidth <= 0)
                return;
            this.pos = -x / this.layoutWidth;
            if ((this.pos < 0) || (this.pos > this.items.length - 1)) {
                this.pos = Math.max(0, Math.min(this.pos, this.items.length - 1));
                this.setPosition(-this.pos * this.layoutWidth);
            }
            this.updateItems();
        };
        Carouselable.prototype.measureCore = function (width, height) {
            var current = this.current;
            return current.measure(width, height);
        };
        Carouselable.prototype.arrangeCore = function (width, height) {
            this.setPosition(-this.pos * width, undefined);
        };
        return Carouselable;
    }(Ui.MovableBase));
    Ui.Carouselable = Carouselable;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var Carousel = (function (_super) {
        __extends(Carousel, _super);
        function Carousel(init) {
            var _this = _super.call(this, init) || this;
            _this.showNext = false;
            _this.showPrevious = false;
            _this._alwaysShowArrows = false;
            _this.changed = new Core.Events();
            _this.focusable = true;
            new Ui.OverWatcher({
                element: _this,
                onentered: function () { return _this.onMouseEnter(); },
                onleaved: function () { return _this.onMouseLeave(); }
            });
            _this.carouselable = new Ui.Carouselable();
            _this.appendChild(_this.carouselable);
            _this.focused.connect(function () { return _this.onCarouselableFocus(); });
            _this.blurred.connect(function () { return _this.onCarouselableBlur(); });
            _this.carouselable.changed.connect(function (e) { return _this.onCarouselableChange(e.target, e.position); });
            _this.buttonPrevious = new Ui.Pressable({
                horizontalAlign: 'left', verticalAlign: 'center', opacity: 0, focusable: false,
                onpressed: function () { return _this.onPreviousPress(); }
            });
            _this.buttonPrevious.drawing.style.backgroundColor = 'rgba(255,255,255,0.6)';
            _this.buttonPreviousIcon = new Ui.Icon({ icon: 'arrowleft', width: 48, height: 48 });
            _this.buttonPrevious.append(_this.buttonPreviousIcon);
            _this.appendChild(_this.buttonPrevious);
            _this.buttonNext = new Ui.Pressable({
                horizontalAlign: 'right', verticalAlign: 'center', opacity: 0, focusable: false,
                onpressed: function () { return _this.onNextPress(); }
            });
            _this.buttonNext.drawing.style.backgroundColor = 'rgba(255,255,255,0.6)';
            _this.buttonNextIcon = new Ui.Icon({ icon: 'arrowright', width: 48, height: 48 });
            _this.buttonNext.append(_this.buttonNextIcon);
            _this.appendChild(_this.buttonNext);
            _this.drawing.addEventListener('keydown', function (e) { return _this.onKeyDown(e); });
            if (init) {
                if (init.autoPlay)
                    _this.autoPlay = init.autoPlay;
                if (init.bufferingSize)
                    _this.bufferingSize = init.bufferingSize;
                if (init.content)
                    _this.content = init.content;
                if (init.alwaysShowArrows)
                    _this.alwaysShowArrows = init.alwaysShowArrows;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
            }
            return _this;
        }
        Object.defineProperty(Carousel.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carousel.prototype, "autoPlay", {
            set: function (delay) {
                this.carouselable.autoPlay = delay;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carousel.prototype, "alwaysShowArrows", {
            get: function () {
                return this._alwaysShowArrows;
            },
            set: function (value) {
                this._alwaysShowArrows = value;
                if (value)
                    this.showArrows();
                else
                    this.hideArrows();
            },
            enumerable: true,
            configurable: true
        });
        Carousel.prototype.next = function () {
            this.carouselable.next();
        };
        Carousel.prototype.previous = function () {
            this.carouselable.previous();
        };
        Object.defineProperty(Carousel.prototype, "logicalChildren", {
            get: function () {
                return this.carouselable.logicalChildren;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carousel.prototype, "currentPosition", {
            get: function () {
                return this.carouselable.currentPosition;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carousel.prototype, "current", {
            get: function () {
                return this.carouselable.current;
            },
            set: function (value) {
                this.setCurrent(value);
            },
            enumerable: true,
            configurable: true
        });
        Carousel.prototype.setCurrentAt = function (position, noAnimation) {
            if (noAnimation === void 0) { noAnimation = false; }
            this.carouselable.setCurrentAt(position, noAnimation);
        };
        Carousel.prototype.setCurrent = function (current, noAnimation) {
            if (noAnimation === void 0) { noAnimation = false; }
            this.carouselable.setCurrent(current, noAnimation);
        };
        Object.defineProperty(Carousel.prototype, "bufferingSize", {
            get: function () {
                return this.carouselable.bufferingSize;
            },
            set: function (size) {
                this.carouselable.bufferingSize = size;
            },
            enumerable: true,
            configurable: true
        });
        Carousel.prototype.append = function (child) {
            this.carouselable.append(child);
        };
        Carousel.prototype.remove = function (child) {
            this.carouselable.remove(child);
        };
        Carousel.prototype.insertAt = function (child, pos) {
            this.carouselable.insertAt(child, pos);
        };
        Carousel.prototype.moveAt = function (child, pos) {
            this.carouselable.moveAt(child, pos);
        };
        Object.defineProperty(Carousel.prototype, "content", {
            set: function (content) {
                this.carouselable.content = content;
            },
            enumerable: true,
            configurable: true
        });
        Carousel.prototype.onCarouselableChange = function (carouselable, position) {
            this.showArrows();
            this.changed.fire({ target: this, position: position });
        };
        Carousel.prototype.onCarouselableFocus = function () {
            this.showArrows();
        };
        Carousel.prototype.onCarouselableBlur = function () {
            this.hideArrows();
        };
        Carousel.prototype.onPreviousPress = function () {
            this.focus();
            this.previous();
        };
        Carousel.prototype.onNextPress = function () {
            this.focus();
            this.next();
        };
        Carousel.prototype.onMouseEnter = function () {
            this.showArrows();
            this.carouselable.stopAutoPlay();
        };
        Carousel.prototype.onMouseOverMove = function () {
            this.showArrows();
        };
        Carousel.prototype.onMouseLeave = function () {
            this.hideArrows();
            this.carouselable.startAutoPlay();
        };
        Carousel.prototype.showArrows = function () {
            var _this = this;
            var pos = this.carouselable.currentPosition;
            var children = this.carouselable.logicalChildren;
            if (children.length > 0) {
                this.showPrevious = (pos > 0);
                this.showNext = (pos < children.length - 1);
            }
            else {
                this.showPrevious = false;
                this.showNext = false;
            }
            if (this.showClock === undefined) {
                this.showClock = new Anim.Clock({
                    duration: 'forever', target: this,
                    ontimeupdate: function (e) { return _this.onShowTick(e.target, e.progress, e.deltaTick); }
                });
                this.showClock.begin();
            }
        };
        Carousel.prototype.hideArrows = function () {
            var _this = this;
            if (this.hideTimeout !== undefined) {
                this.hideTimeout.abort();
                this.hideTimeout = undefined;
            }
            if (this._alwaysShowArrows)
                return;
            this.showPrevious = false;
            this.showNext = false;
            if (this.showClock === undefined) {
                this.showClock = new Anim.Clock({
                    duration: 'forever', target: this,
                    ontimeupdate: function (e) { return _this.onShowTick(e.target, e.progress, e.deltaTick); }
                });
                this.showClock.begin();
            }
        };
        Carousel.prototype.onShowTick = function (clock, progress, delta) {
            if (delta === 0)
                return;
            var opacity;
            var previousDone = false;
            if (this.showPrevious) {
                opacity = this.buttonPrevious.opacity;
                opacity = Math.min(opacity + delta, 1);
                this.buttonPrevious.opacity = opacity;
                if (opacity == 1)
                    previousDone = true;
            }
            else {
                opacity = this.buttonPrevious.opacity;
                opacity = Math.max(opacity - (delta * 2), 0);
                this.buttonPrevious.opacity = opacity;
                if (opacity === 0)
                    previousDone = true;
            }
            var nextDone = false;
            if (this.showNext) {
                opacity = this.buttonNext.opacity;
                opacity = Math.min(opacity + delta, 1);
                this.buttonNext.opacity = opacity;
                if (opacity == 1)
                    nextDone = true;
            }
            else {
                opacity = this.buttonNext.opacity;
                opacity = Math.max(opacity - (delta * 2), 0);
                this.buttonNext.opacity = opacity;
                if (opacity === 0)
                    nextDone = true;
            }
            if (previousDone && nextDone && this.showClock) {
                this.showClock.stop();
                this.showClock = undefined;
            }
        };
        Carousel.prototype.onKeyDown = function (event) {
            if (this.hasFocus) {
                if (event.which == 39)
                    this.next();
                else if (event.which == 37)
                    this.previous();
            }
        };
        Carousel.prototype.measureCore = function (width, height) {
            var minWidth = 0;
            var minHeight = 0;
            for (var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                var size = child.measure(width, height);
                if (size.width > minWidth)
                    minWidth = size.width;
                if (size.height > minHeight)
                    minHeight = size.height;
            }
            return { width: minWidth, height: minHeight };
        };
        Carousel.prototype.arrangeCore = function (width, height) {
            for (var i = 0; i < this.children.length; i++)
                this.children[i].arrange(0, 0, width, height);
        };
        Carousel.prototype.onStyleChange = function () {
            var color = this.getStyleProperty('focusColor');
            this.buttonPreviousIcon.fill = color;
            this.buttonNextIcon.fill = color;
        };
        Carousel.style = {
            focusColor: '#21d3ff'
        };
        return Carousel;
    }(Ui.Container));
    Ui.Carousel = Carousel;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var RichTextButton = (function (_super) {
        __extends(RichTextButton, _super);
        function RichTextButton() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.style = {
                borderWidth: 0,
                background: 'rgba(255,255,255,0)',
                activeBackground: 'rgba(255,255,255,0)'
            };
            return _this;
        }
        return RichTextButton;
    }(Ui.ToggleButton));
    Ui.RichTextButton = RichTextButton;
    var RichTextEditor = (function (_super) {
        __extends(RichTextEditor, _super);
        function RichTextEditor() {
            var _this = _super.call(this) || this;
            var boldButton = new RichTextButton().assign({
                icon: 'format-bold', focusable: false,
                ontoggled: function () { return document.execCommand('bold', false, null); },
                onuntoggled: function () { return document.execCommand('bold', false, null); }
            });
            var italicButton = new RichTextButton().assign({
                icon: 'format-italic', focusable: false,
                ontoggled: function () { return document.execCommand('italic', false, null); },
                onuntoggled: function () { return document.execCommand('italic', false, null); }
            });
            var underlineButton = new RichTextButton().assign({
                icon: 'format-underline', focusable: false,
                ontoggled: function () { return document.execCommand('underline', false, null); },
                onuntoggled: function () { return document.execCommand('underline', false, null); }
            });
            var alignLeftButton = new RichTextButton().assign({
                icon: 'format-align-left', focusable: false,
                ontoggled: function () { return document.execCommand('justifyLeft', false, null); },
                onuntoggled: function () { return document.execCommand('justifyLeft', false, null); }
            });
            var alignCenterButton = new RichTextButton().assign({
                icon: 'format-align-center', focusable: false,
                ontoggled: function () { return document.execCommand('justifyCenter', false, null); },
                onuntoggled: function () { return document.execCommand('justifyCenter', false, null); }
            });
            var alignRightButton = new RichTextButton().assign({
                icon: 'format-align-right', focusable: false,
                ontoggled: function () { return document.execCommand('justifyRight', false, null); },
                onuntoggled: function () { return document.execCommand('justifyRight', false, null); }
            });
            var insertOrderedListButton = new RichTextButton().assign({
                icon: 'format-insert-ordered-list', focusable: false,
                ontoggled: function () { return document.execCommand('insertOrderedList', false, null); },
                onuntoggled: function () { return document.execCommand('insertOrderedList', false, null); }
            });
            var insertUnorderedListButton = new RichTextButton().assign({
                icon: 'format-insert-unordered-list', focusable: false,
                ontoggled: function () { return document.execCommand('insertUnorderedList', false, null); },
                onuntoggled: function () { return document.execCommand('insertUnorderedList', false, null); }
            });
            var insertImageButton = new Ui.Button().assign({
                icon: 'format-insert-image', focusable: false,
                style: {
                    borderWidth: 0,
                    background: 'rgba(255,255,255,0)',
                    activeBackground: 'rgba(255,255,255,0)'
                },
                onpressed: function () {
                    var url = window.prompt("URL de l'image à insérer :");
                    if (url) {
                        document.execCommand('insertImage', false, url);
                    }
                }
            });
            var insertURLButton = new Ui.Button().assign({
                icon: 'format-insert-url', focusable: false,
                style: {
                    borderWidth: 0,
                    background: 'rgba(255,255,255,0)',
                    activeBackground: 'rgba(255,255,255,0)'
                },
                onpressed: function () {
                    var url = window.prompt("URL à insérer :");
                    if (url) {
                        document.execCommand('createLink', false, url);
                    }
                }
            });
            var quoteButton = new Ui.Button().assign({
                icon: 'format-quote', focusable: false,
                style: {
                    borderWidth: 0,
                    background: 'rgba(255,255,255,0)',
                    activeBackground: 'rgba(255,255,255,0)'
                },
                onpressed: function () {
                    document.execCommand('formatBlock', false, '<blockquote>');
                }
            });
            var controls = new Ui.HBox().assign({
                uniform: true, isDisabled: false,
                content: [
                    boldButton,
                    italicButton,
                    underlineButton,
                    quoteButton,
                    alignLeftButton,
                    alignCenterButton,
                    alignRightButton,
                    insertOrderedListButton,
                    insertUnorderedListButton,
                    insertImageButton,
                    insertURLButton
                ]
            });
            var bg = new Ui.TextBgGraphic();
            _this._contentEditable = new Ui.ContentEditable().assign({
                margin: 10, interLine: 1.2, fontSize: 16,
                html: '', resizable: true,
                onfocused: function () { return bg.hasFocus = true; },
                onblurred: function () { return bg.hasFocus = false; },
                onanchorchanged: function () {
                    boldButton.isActive = document.queryCommandState('bold');
                    italicButton.isActive = document.queryCommandState('italic');
                    underlineButton.isActive = document.queryCommandState('underline');
                    alignLeftButton.isActive = document.queryCommandState('justifyLeft');
                    alignCenterButton.isActive = document.queryCommandState('justifyCenter');
                    alignRightButton.isActive = document.queryCommandState('justifyRight');
                },
                onselectionentered: function () { return controls.enable(); },
                onselectionleaved: function () { return controls.disable(); },
                selectable: true
            });
            _this.content = [
                bg,
                new Ui.VBox().assign({
                    margin: 1,
                    content: [
                        new Ui.LBox().assign({
                            content: [
                                new Ui.Rectangle().assign({ fill: 'white', opacity: 0.6 }),
                                controls
                            ]
                        }),
                        _this._contentEditable
                    ]
                })
            ];
            return _this;
        }
        Object.defineProperty(RichTextEditor.prototype, "html", {
            get: function () {
                return this._contentEditable.html;
            },
            set: function (html) {
                this._contentEditable.html = html;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "text", {
            get: function () {
                return this._contentEditable.text;
            },
            set: function (text) {
                this._contentEditable.text = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "textAlign", {
            get: function () {
                return this._contentEditable.textAlign;
            },
            set: function (textAlign) {
                this._contentEditable.textAlign = textAlign;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "fontSize", {
            get: function () {
                return this._contentEditable.fontSize;
            },
            set: function (fontSize) {
                this._contentEditable.fontSize = fontSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "fontFamily", {
            get: function () {
                return this._contentEditable.fontFamily;
            },
            set: function (fontFamily) {
                this._contentEditable.fontFamily = fontFamily;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "fontWeight", {
            get: function () {
                return this._contentEditable.fontWeight;
            },
            set: function (fontWeight) {
                this._contentEditable.fontWeight = fontWeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "interLine", {
            get: function () {
                return this._contentEditable.interLine;
            },
            set: function (interLine) {
                this._contentEditable.interLine = interLine;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "wordWrap", {
            get: function () {
                return this._contentEditable.wordWrap;
            },
            set: function (wordWrap) {
                this._contentEditable.wordWrap = wordWrap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "whiteSpace", {
            get: function () {
                return this._contentEditable.whiteSpace;
            },
            set: function (whiteSpace) {
                this._contentEditable.whiteSpace = whiteSpace;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichTextEditor.prototype, "color", {
            get: function () {
                return this._contentEditable.color;
            },
            set: function (color) {
                this._contentEditable.color = color;
            },
            enumerable: true,
            configurable: true
        });
        return RichTextEditor;
    }(Ui.LBox));
    Ui.RichTextEditor = RichTextEditor;
})(Ui || (Ui = {}));
Ui.Icon.register('format-bold', "M31.2 21.58c1.93-1.35 3.3-3.53 3.3-5.58 0-4.51-3.49-8-8-8h-12.5v28h14.08c4.19 0 7.42-3.4 7.42-7.58 0-3.04-1.73-5.63-4.3-6.84zm-11.2-8.58h6c1.66 0 3 1.34 3 3s-1.34 3-3 3h-6v-6zm7 18h-7v-6h7c1.66 0 3 1.34 3 3s-1.34 3-3 3z");
Ui.Icon.register('format-italic', "M20 8v6h4.43l-6.86 16h-5.57v6h16v-6h-4.43l6.86-16h5.57v-6z");
Ui.Icon.register('format-underline', "M24 34c6.63 0 12-5.37 12-12v-16h-5v16c0 3.87-3.13 7-7 7s-7-3.13-7-7v-16h-5v16c0 6.63 5.37 12 12 12zm-14 4v4h28v-4h-28z");
Ui.Icon.register('format-align-left', "M30 30h-24v4h24v-4zm0-16h-24v4h24v-4zm-24 12h36v-4h-36v4zm0 16h36v-4h-36v4zm0-36v4h36v-4h-36z");
Ui.Icon.register('format-align-right', "M6 42h36v-4h-36v4zm12-8h24v-4h-24v4zm-12-8h36v-4h-36v4zm12-8h24v-4h-24v4zm-12-12v4h36v-4h-36z");
Ui.Icon.register('format-align-center', "M14 30v4h20v-4h-20zm-8 12h36v-4h-36v4zm0-16h36v-4h-36v4zm8-12v4h20v-4h-20zm-8-8v4h36v-4h-36z");
Ui.Icon.register('format-insert-ordered-list', "M4 34h4v1h-2v2h2v1h-4v2h6v-8h-6v2zm2-18h2v-8h-4v2h2v6zm-2 6h3.6l-3.6 4.2v1.8h6v-2h-3.6l3.6-4.2v-1.8h-6v2zm10-12v4h28v-4h-28zm0 28h28v-4h-28v4zm0-12h28v-4h-28v4z");
Ui.Icon.register('format-insert-unordered-list', "M8 21c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zm0-12c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zm0 24.33c-1.47 0-2.67 1.19-2.67 2.67s1.2 2.67 2.67 2.67 2.67-1.19 2.67-2.67-1.2-2.67-2.67-2.67zm6 4.67h28v-4h-28v4zm0-12h28v-4h-28v4zm0-16v4h28v-4h-28z");
Ui.Icon.register('format-insert-image', "M42 38v-28c0-2.21-1.79-4-4-4h-28c-2.21 0-4 1.79-4 4v28c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4zm-25-11l5 6.01 7-9.01 9 12h-28l7-9z");
Ui.Icon.register('format-insert-url', "M7.8 24c0-3.42 2.78-6.2 6.2-6.2h8v-3.8h-8c-5.52 0-10 4.48-10 10s4.48 10 10 10h8v-3.8h-8c-3.42 0-6.2-2.78-6.2-6.2zm8.2 2h16v-4h-16v4zm18-12h-8v3.8h8c3.42 0 6.2 2.78 6.2 6.2s-2.78 6.2-6.2 6.2h-8v3.8h8c5.52 0 10-4.48 10-10s-4.48-10-10-10z");
Ui.Icon.register('format-quote', "M12 34h6l4-8v-12h-12v12h6zm16 0h6l4-8v-12h-12v12h6z");
var Ui;
(function (Ui) {
    var RadioBoxGraphic = (function (_super) {
        __extends(RadioBoxGraphic, _super);
        function RadioBoxGraphic() {
            var _this = _super.call(this) || this;
            _this._isDown = false;
            _this._isChecked = false;
            _this._borderWidth = 2;
            _this.color = new Ui.Color(1, 1, 1);
            _this.activeColor = new Ui.Color(0.31, 0.66, 0.31);
            return _this;
        }
        Object.defineProperty(RadioBoxGraphic.prototype, "isDown", {
            get: function () {
                return this._isDown;
            },
            set: function (isDown) {
                if (this.isDown != isDown) {
                    this._isDown = isDown;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBoxGraphic.prototype, "isChecked", {
            get: function () {
                return this._isChecked;
            },
            set: function (isChecked) {
                if (this.isChecked != isChecked) {
                    this._isChecked = isChecked;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBoxGraphic.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (color) {
                if (this.color !== color) {
                    this._color = Ui.Color.create(color);
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBoxGraphic.prototype, "borderWidth", {
            get: function () { return this._borderWidth; },
            set: function (borderWidth) {
                if (this._borderWidth !== borderWidth) {
                    this._borderWidth = borderWidth;
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBoxGraphic.prototype, "activeColor", {
            get: function () {
                if (!this._activeColor)
                    return;
                var deltaY = 0;
                if (this.isDown)
                    deltaY = 0.20;
                var yuv = this._activeColor.getYuv();
                return Ui.Color.createFromYuv(yuv.y + deltaY, yuv.u, yuv.v);
            },
            set: function (color) {
                if (this.activeColor !== color) {
                    this._activeColor = Ui.Color.create(color);
                    this.invalidateDraw();
                }
            },
            enumerable: true,
            configurable: true
        });
        RadioBoxGraphic.prototype.updateCanvas = function (ctx) {
            var w = this.layoutWidth;
            var h = this.layoutHeight;
            var cx = w / 2;
            var cy = h / 2;
            var radius = Math.min(cx - 5, cy - 5);
            radius = Math.min(radius, 10);
            if (this.isDown)
                ctx.globalAlpha = 0.8;
            if (this.isDisabled)
                ctx.globalAlpha = 0.4;
            ctx.strokeStyle = this.color.getCssRgba();
            ctx.lineWidth = this.borderWidth;
            ctx.beginPath();
            ctx.arc(cx - this.borderWidth / 2, cy - this.borderWidth / 2, radius, 0, 2 * Math.PI, false);
            ctx.closePath();
            ctx.stroke();
            if (this.isChecked) {
                ctx.fillStyle = this.color.getCssRgba();
                ctx.beginPath();
                ctx.arc(cx - this.borderWidth / 2, cy - this.borderWidth / 2, radius / 2, 0, 2 * Math.PI, false);
                ctx.closePath();
                ctx.fill();
                ctx.restore();
            }
        };
        RadioBoxGraphic.prototype.measureCore = function (width, height) {
            return { width: 30, height: 30 };
        };
        RadioBoxGraphic.prototype.onDisable = function () {
            this.invalidateDraw();
        };
        RadioBoxGraphic.prototype.onEnable = function () {
            this.invalidateDraw();
        };
        return RadioBoxGraphic;
    }(Ui.CanvasElement));
    Ui.RadioBoxGraphic = RadioBoxGraphic;
})(Ui || (Ui = {}));
var Ui;
(function (Ui) {
    var RadioBox = (function (_super) {
        __extends(RadioBox, _super);
        function RadioBox(init) {
            var _this = _super.call(this, init) || this;
            _this._isToggled = false;
            _this.changed = new Core.Events();
            _this.toggled = new Core.Events();
            _this.untoggled = new Core.Events();
            _this.role = 'radio';
            _this.drawing.setAttribute('aria-checked', 'false');
            _this.drawing.style.borderWidth = '1px';
            _this.drawing.style.borderStyle = 'solid';
            _this.padding = 2;
            _this.hbox = new Ui.HBox();
            _this.append(_this.hbox);
            _this.graphic = new Ui.RadioBoxGraphic();
            _this.hbox.append(_this.graphic);
            _this.downed.connect(function () { return _this.onRadioDown(); });
            _this.upped.connect(function () { return _this.onRadioUp(); });
            _this.focused.connect(function () { return _this.onRadioFocus(); });
            _this.blurred.connect(function () { return _this.onRadioBlur(); });
            _this.pressed.connect(function () { return _this.onRadioPress(); });
            if (init) {
                if (init.value !== undefined)
                    _this.value = init.value;
                if (init.text !== undefined)
                    _this.text = init.text;
                if (init.content !== undefined)
                    _this.content = init.content;
                if (init.onchanged)
                    _this.changed.connect(init.onchanged);
                if (init.ontoggled)
                    _this.toggled.connect(init.ontoggled);
                if (init.onuntoggled)
                    _this.untoggled.connect(init.onuntoggled);
                if (init.group)
                    _this.group = init.group;
            }
            return _this;
        }
        Object.defineProperty(RadioBox.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBox.prototype, "ontoggled", {
            set: function (value) { this.toggled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBox.prototype, "onuntoggled", {
            set: function (value) { this.untoggled.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBox.prototype, "isToggled", {
            get: function () {
                return this._isToggled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBox.prototype, "value", {
            get: function () {
                return this.isToggled;
            },
            set: function (value) {
                if (value)
                    this.toggle();
                else
                    this.untoggle();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBox.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                if (text === undefined) {
                    if (this.contentBox !== undefined) {
                        this.hbox.remove(this.contentBox);
                        this.contentBox = undefined;
                    }
                    this._text = undefined;
                    this._content = undefined;
                }
                else {
                    if (this._text !== undefined) {
                        this._text = text;
                        this.contentBox.text = this._text;
                    }
                    else {
                        if (this._content !== undefined) {
                            this.hbox.remove(this.contentBox);
                            this._content = undefined;
                        }
                        this._text = text;
                        this.contentBox = new Ui.Text({ margin: 8, text: this._text, verticalAlign: 'center' });
                        this.hbox.append(this.contentBox, true);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBox.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (content === undefined) {
                    if (this.contentBox !== undefined) {
                        this.hbox.remove(this.contentBox);
                        this.contentBox = undefined;
                    }
                    this._text = undefined;
                    this._content = undefined;
                }
                else {
                    if (this._text !== undefined) {
                        this.hbox.remove(this.contentBox);
                        this._text = undefined;
                    }
                    if (this._content !== undefined)
                        this.contentBox.remove(this._content);
                    else {
                        this.contentBox = new Ui.LBox({ padding: 8, verticalAlign: 'center' });
                        this.hbox.append(this.contentBox);
                    }
                    this._content = content;
                    this.contentBox.append(this._content);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioBox.prototype, "group", {
            get: function () {
                return this._group;
            },
            set: function (group) {
                if (this.group != group) {
                    if (this.group)
                        this.group.remove(this);
                    this._group = group;
                    group.add(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        RadioBox.prototype.toggle = function () {
            this.onToggle();
        };
        RadioBox.prototype.untoggle = function () {
            this.onUntoggle();
        };
        RadioBox.prototype.onRadioPress = function () {
            if (!this._isToggled)
                this.onToggle();
        };
        RadioBox.prototype.onToggle = function () {
            if (!this._isToggled) {
                this._isToggled = true;
                this.drawing.setAttribute('aria-checked', 'true');
                this.toggled.fire({ target: this });
                this.graphic.isChecked = true;
                this.graphic.color = this.getStyleProperty('activeColor');
                this.changed.fire({ target: this, value: true });
            }
        };
        RadioBox.prototype.onUntoggle = function () {
            if (this._isToggled) {
                this._isToggled = false;
                this.drawing.setAttribute('aria-checked', 'false');
                this.untoggled.fire({ target: this });
                this.graphic.isChecked = false;
                this.graphic.color = this.getStyleProperty('color');
                this.changed.fire({ target: this, value: false });
            }
        };
        RadioBox.prototype.onRadioFocus = function () {
            if (!this.getIsMouseFocus()) {
                this.graphic.color = this.getStyleProperty('focusColor');
                this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('focusBackgroundBorder')).getCssRgba();
            }
        };
        RadioBox.prototype.onRadioBlur = function () {
            if (this._isToggled)
                this.graphic.color = this.getStyleProperty('activeColor');
            else
                this.graphic.color = this.getStyleProperty('color');
            this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('backgroundBorder')).getCssRgba();
        };
        RadioBox.prototype.onRadioDown = function () {
            this.graphic.isDown = true;
        };
        RadioBox.prototype.onRadioUp = function () {
            this.graphic.isDown = false;
        };
        RadioBox.prototype.onStyleChange = function () {
            if (this.hasFocus) {
                this.graphic.color = this.getStyleProperty('focusColor');
                this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('focusBackgroundBorder')).getCssRgba();
            }
            else {
                this.drawing.style.borderColor = Ui.Color.create(this.getStyleProperty('backgroundBorder')).getCssRgba();
                if (this._isToggled)
                    this.graphic.color = this.getStyleProperty('activeColor');
                else
                    this.graphic.color = this.getStyleProperty('color');
            }
            this.graphic.activeColor = this.getStyleProperty('activeColor');
            this.graphic.borderWidth = this.getStyleProperty('radioWidth');
            this.drawing.style.borderWidth = parseInt(this.getStyleProperty('borderWidth')) + "px";
        };
        RadioBox.style = {
            borderWidth: 0,
            radioWidth: 2,
            color: '#444444',
            activeColor: '#07a0e5',
            focusColor: '#21d3ff',
            checkColor: '#ffffff',
            backgroundBorder: 'rgba(250,250,250,0)',
            focusBackgroundBorder: '#21d3ff'
        };
        return RadioBox;
    }(Ui.Pressable));
    Ui.RadioBox = RadioBox;
    var RadioGroup = (function (_super) {
        __extends(RadioGroup, _super);
        function RadioGroup() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.content = {};
            _this.changed = new Core.Events();
            return _this;
        }
        Object.defineProperty(RadioGroup.prototype, "onchanged", {
            set: function (value) { this.changed.connect(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioGroup.prototype, "current", {
            get: function () {
                return this._current;
            },
            set: function (radio) {
                if (this.current == radio)
                    return;
                if (radio && !radio.isToggled)
                    radio.toggle();
                if (radio == undefined && this.current.isToggled)
                    this.current.untoggle();
                this._current = radio;
                this.changed.fire({ target: this });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioGroup.prototype, "children", {
            get: function () {
                var _this = this;
                return Object.keys(this.content).map(function (prop) { return _this.content[prop]; });
            },
            enumerable: true,
            configurable: true
        });
        RadioGroup.prototype.add = function (radio) {
            var _this = this;
            if (Object.keys(this.content).map(function (prop) { return _this.content[prop]; }).indexOf(radio) !== -1)
                return;
            var handler = radio.toggled.connect(function (e) { return _this.onRadioSelected(e); });
            this.content[handler] = radio;
        };
        RadioGroup.prototype.remove = function (radio) {
            var _this = this;
            if (radio == undefined)
                return;
            var index = Object.keys(this.content).map(function (prop) { return _this.content[prop]; }).indexOf(radio);
            if (index === -1)
                return;
            var realIndex = Number(Object.keys(this.content)[index]);
            radio.toggled.disconnect(realIndex);
            if (this.content[realIndex].isToggled)
                this.current = undefined;
            delete (this.content[realIndex]);
        };
        RadioGroup.prototype.onRadioSelected = function (event) {
            if (this.current && this.current.isToggled)
                this.current.untoggle();
            this.current = event.target;
        };
        return RadioGroup;
    }(Core.Object));
    Ui.RadioGroup = RadioGroup;
})(Ui || (Ui = {}));
//# sourceMappingURL=era.js.map